*------------------------------------------------------------*
User:                yas19006
Date:                May 06, 2020
Time:                18:33:43
Site:                70085622
Platform:            X64_8PRO
Maintenance Release: 9.04.01M3P062415
EM Version:          14.1
* 
*------------------------------------------------------------*
* Training Log
Date:                May 06, 2020
Time:                18:33:25
*------------------------------------------------------------*
14714  proc freq data=EMWS5.Tree_VariableSet noprint;
14715  table ROLE*LEVEL/out=WORK.TreeMETA;
14716  run;
 
NOTE: There were 106 observations read from the data set EMWS5.TREE_VARIABLESET.
NOTE: The data set WORK.TREEMETA has 9 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.06 seconds
      cpu time            0.03 seconds
 
 
14717  proc print data=WORK.TreeMETA label noobs;
14718  var ROLE LEVEL COUNT;
14719  label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL = "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
14720  title9 ' ';
14721  title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
14722  run;
 
NOTE: There were 9 observations read from the data set WORK.TREEMETA.
NOTE: The PROCEDURE PRINT printed page 1.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
14723  title10;
 
14724  %let EMNORLEN = %DMNORLEN;
EMWS5.TextTopic_TRAIN EMWS5.TextTopic_TRAIN
EMWS5.TextTopic_TRAIN EMWS5.TextTopic_TRAIN EMWS5 TextTopic_TRAIN
EMWS5.TextTopic_TRAIN EMWS5.TextTopic_TRAIN
EMWS5.TextTopic_TRAIN EMWS5.TextTopic_TRAIN EMWS5 TextTopic_TRAIN
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >>
>>>>>>>>>>>>>> TARGET(   NAME='Total_Actions'
                         ROLE='TARGET'
                         LEVEL='INTERVAL'
                         ORDER=''
                         CREATOR=''
                         FORMATTYPE='QUANTITY'
                         FAMILY=''
                         LOWERLIMIT=.
                         UPPERLIMIT=.
                         REPORT='N'
                         DISTRIBUTION=''
                         COMMENT=''
                         PRICE=.
                         TYPE='N'
                         LABEL='Total Actions'
                         FORMAT=''
                         INFORMAT=''
                         INDEX='N'
                         INDEXTYPE='NONE'
                         LENGTH=8
                         USE='Y'
                      )[11767]
PERFORMANCE  DETAILS
WORK.EM_DMDB WORK.EM_DMDB
WORK.EM_DMDB WORK.EM_DMDB WORK EM_DMDB
"No decisions defined for target "Total_Actions"."
14785  proc print data = EMWS5.Tree_Total_Actions_DM noobs label;
14786  var _type_ variable label;
14787  where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR', 'DECPRIOR');
14788  label _TYPE_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_type_vlabel,     NOQUOTE))" VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))" LABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
14789  title9 ' ';
14790  title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_predDecVars_title  , NOQUOTE))";
14791  run;
 
NOTE: There were 3 observations read from the data set EMWS5.TREE_TOTAL_ACTIONS_DM.
      WHERE _type_ not in ('DATAPRIOR', 'DECISION', 'DECPRIOR', 'MATRIX', 'TRAINPRIOR');
NOTE: The PROCEDURE PRINT printed page 2.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
14792  title10;
 
14793  %let EMEXCEPTIONSTRING=;
PERFORMANCE  DETAILS
15367  *------------------------------------------------------------*;
15368  * Tree: Generation of macros and macro variables;
15369  * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
15370  *------------------------------------------------------------*;
 
15371  %let EMEXCEPTIONSTRING=;
15372  *------------------------------------------------------------*;
15373  * TRAIN: Tree;
15374  *------------------------------------------------------------*;
15375  %let EM_ACTION = TRAIN;
15376  %let syscc = 0;
15377  %macro main;
15378
15379    %if %upcase(&EM_ACTION) = CREATE %then %do;
15380      filename temp catalog 'sashelp.emmodl.tree_create.source';
15381      %include temp;
15382      filename temp;
15383
15384      %em_tree_create;
15385    %end;
15386
15387     %else
15388     %if %upcase(&EM_ACTION) = TRAIN %then %do;
15389
15390         filename temp catalog 'sashelp.emmodl.tree_train.source';
15391         %include temp;
15392         filename temp;
15393         %em_tree_train;
15394     %end;
15395
15396    %else
15397    %if %upcase(&EM_ACTION) = SCORE %then %do;
15398      filename temp catalog 'sashelp.emmodl.tree_score.source';
15399      %include temp;
15400      filename temp;
15401
15402      %em_tree_score;
15403
15404    %end;
15405
15406    %else
15407    %if %upcase(&EM_ACTION) = REPORT %then %do;
15408
15409         filename temp catalog 'sashelp.emmodl.tree_report.source';
15410         %include temp;
15411         filename temp;
15412
15413         %em_tree_report;
15414     %end;
15415
15416    %else
15417    %if %upcase(&EM_ACTION) = OPENINT %then %do;
15418
15419         filename temp catalog 'sashelp.emmodl.tree_actions.source';
15420         %include temp;
15421         filename temp;
15422         %EM_TREE_OPENTREEVIEWER;
15423
15424     %end;
15425
15426    %else
15427    %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
15428
15429         filename temp catalog 'sashelp.emmodl.tree_actions.source';
15430         %include temp;
15431         filename temp;
15432         %EM_TREE_CLOSETREEVIEWER;
15433
15434     %end;
15435
15436
15437     %doendm:
15438  %mend main;
15439
15440  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_TRAIN.SOURCE.
15442 +%macro em_tree_train;
15444 +   %if &EM_IMPORT_DATA eq %then %do;
15445 +       %let EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN,1;
15446 +       %put &em_codebar;
15447 +       %let errormsg = %sysfunc(sasmsg(sashelp.dmine, error_nodeTrainRawData_note, NOQUOTE));
15448 +       %put &errormsg;
15449 +       %put &em_codebar;
15450 +       %goto doendm;
15451 +   %end;
15452 +   %else
15453 +       %let EMEXCEPTIONSTRING =;
15455 +   %if  &EM_NUM_TARGET lt 1 %then %do;
15456 +        %let EMEXCEPTIONSTRING = exception.server.USE1TARGET;
15457 +        %put &em_codebar;
15458 +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, metadata.use01target_err, NOQUOTE));
15459 +        %put &errormsg;
15460 +        %put &em_codebar;
15461 +        %goto doendm;
15462 +   %end;
15464 +   %if  (&EM_NUM_INTERVAL_INPUT < 1) and (&EM_NUM_BINARY_INPUT < 1) and (&EM_NUM_ORDINAL_INPUT < 1)
15465 +        and (&EM_NUM_NOMINAL_INPUT < 1) and (&EM_NUM_INTERVAL_REJECTED < 1) and (&EM_NUM_BINARY_REJECTED <1)
15466 +        and (&EM_NUM_ORDINAL_REJECTED < 1) and (&EM_NUM_NOMINAL_REJECTED < 1) %then %do;
15467 +        %let EMEXCEPTIONSTRING = exception.server.USEATLEAST1INPUTREJECT;
15468 +        %put &em_codebar;
15469 +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, error_noInput_note, NOQUOTE));
15470 +        %put &errormsg;
15471 +        %put &em_codebar;
15472 +        %goto doendm;
15473 +   %end;
15475 +   /* Initialize property macro variables */
15476 +   filename temp catalog 'sashelp.emmodl.tree_macros.source';
15477 +   %include temp;
15478 +   filename temp;
15480 +   %EM_SetProperties;
15482 +   /* need to delete EMTREE if not used as import tree data since AUTODELETE=N */
15483 +   %EM_GETNAME(key=EMTREE, type=DATA);
15484 +   %if "&EM_PROPERTY_IMPORTMODEL" eq "Y" %then %do;
15485 +     /* if import eq Y and no importtable defined, throw an exception */
15486 +      %if %length(&EM_PROPERTY_ImportedTreeData)=0 %then %do;
15487 +         %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEMODELDATASET;
15488 +         %let  errmsg = %sysfunc(sasmsg(sashelp.dmine, NOTREEMODELDATASET_ERR , NOQUOTE));
15489 +         %put &em_codebar;
15490 +         %put &errmsg;
15491 +         %put &em_codebar;
15492 +         %goto doendm;
15493 +      %end;
15494 +      %else %if %sysfunc(exist(&EM_PROPERTY_ImportedTreeData))=0 %then %do;
15495 +         %let EMEXCEPTIONSTRING = exception.server.EMTOOL.INVALIDTREEMODELDATASET;
15496 +         %put &em_codebar;
15497 +         %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.INVALIDTREEMODELDATASET_ERR, NOQUOTE));
15498 +         %put &errormsg;
15499 +         %put &em_codebar;
15500 +         %goto doendm;
15501 +      %end;
15502 +      %else %do;
15503 +         %let dsid=%sysfunc(open(&EM_PROPERTY_ImportedTreeData));
15504 +         %let varnumID = %sysfunc(varnum(&dsid,ID));
15505 +         %let varnumLabel = %sysfunc(varnum(&dsid,LABEL));
15506 +         %let varnumX = %sysfunc(varnum(&dsid,X));
15507 +         %let varnumY = %sysfunc(varnum(&dsid,Y));
15508 +         %let dsid = %sysfunc(close(&dsid));
15509 +         %if &varnumID=0 or &varnumLabel=0 or &varnumX=0 or &varnumY=0 %then %do;
15510 +            %let EMEXCEPTIONSTRING = exception.server.EMTOOL.INVALIDTREEMODELDATASET;
15511 +            %put &em_codebar;
15512 +            %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.INVALIDTREEMODELDATASET_ERR, NOQUOTE));
15513 +            %put &errormsg;
15514 +            %put &em_codebar;
15515 +            %goto doendm;
15516 +         %end;
15517 +      %end;
15518 +      %if %qupcase(&EM_USER_EMTREE) ne %qupcase(&EM_PROPERTY_ImportedTreeData) and (%sysfunc(exist(&EM_USER_EMTREE)) or %sysfunc(exist(&EM_USER_EMTREE, VIEW))) %then %do;
15519 +         proc delete data=&EM_USER_EMTREE;
15520 +         run;
15521 +      %end;
15522 +   %end;
15523 +   %else %if "&EM_PROPERTY_FREEZE" ne "Y" and (%sysfunc(exist(&EM_USER_EMTREE)) or %sysfunc(exist(&EM_USER_EMTREE, VIEW))) %then %do;
15524 +      proc delete data=&EM_USER_EMTREE;
15525 +      run;
15526 +   %end;
15528 +   /* load tree macros */
15529 +   filename temp catalog 'sashelp.emmodl.tree_trainmacros.source';
15530 +   %include temp;
15531 +   filename temp;
15533 +   /* data sets */
15534 +   %EM_GETNAME(key=OUTSTATS,   type=DATA);
15535 +   %EM_GETNAME(key=EXPORTTREE, type=DATA);
15536 +   %EM_GETNAME(key=TREE_PLOT,     type=DATA);
15538 +   /* files */
15539 +   %EM_REGISTER(key=ENGLISHRULES, type=FILE, extension=txt);
15541 +   /* check actual num of target levels */
15542 +   %if ("%EM_TARGET_LEVEL" eq "BINARY") %then %do;
15543 +      %EM_CheckBinaryTargetLevel(indata=&EM_IMPORT_DATA, target=%EM_TARGET,
15544 +                              nLevel=_nTargetLevel );
15545 +      %if &_nTargetLevel  > 2 %then %do;
15546 +        %let EMEXCEPTIONSTRING = exception.server.METADATA.WRONGTARGETLEVEL,&target_Var;
15547 +        %put &em_codebar;
15548 +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, metadata.wrongtargetlevel, NOQUOTE));
15549 +        %put &errormsg;
15550 +        %put &em_codebar;
15551 +        %goto doendm;
15552 +      %end;
15553 +   %end;
15555 +   /* neither cost variables nor constant cost are valid with USEDECISIONS */
15556 +   %if "&EM_PROPERTY_USEDECISION" eq "Y" %then %do;
15557 +     %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
15558 +        %let costflag=0;
15559 +        data _null_;
15560 +          set &EM_DEC_DECMETA(where=(_TYPE_="DECISION" AND USE="Y" AND ^missing(COST) )) end=eof;
15561 +          if eof then call symput("costflag", _N_);
15562 +        run;
15563 +        %if &costflag gt 0 %then %do;
15564 +          %let EMEXCEPTIONSTRING = exception.server.TREE.INVALIDDECISION;
15565 +          %put &em_codebar;
15566 +          %let errormsg = %sysfunc(sasmsg(sashelp.dmine, costnotvalidwithusedecisions_note_err, NOQUOTE));
15567 +          %put &errormsg;
15568 +          %put &em_codebar;
15569 +          %goto doendm;
15570 +       %end;
15571 +     %end;
15572 +   %end;
15574 +   /* determine if multiple targets will be processed */
15575 +   %let em_tree_multipleTargets=N;
15576 +   %let em_tree_numTarget = 1;
15577 +   %let em_tree_targetVars=;
15579 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
15580 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
15581 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
15582 +         %let em_tree_multipleTargets=N;
15583 +      %end;
15584 +      %else %do;
15585 +         /* create macro array of targets  */
15586 +         data _null_;
15587 +           set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
15588 +           call symput('em_tree_targetVars'!!strip(put(_N_, BEST.)), strip(Name));
15589 +           if eof then
15590 +             call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
15591 +        run;
15593 +        %if &em_tree_numTarget gt 1 %then %do;
15594 +           %let em_tree_multipleTargets=Y;
15595 +        %end;
15596 +      %end;
15597 +   %end;
15599 +   /* create view of only necessary variable for performance reasons */
15600 +   %let tempData = &EM_LIB..em_&EM_NODEID;
15601 +   data &tempData / view=&tempData;
15602 +     set &EM_IMPORT_DATA (keep=%EM_INPUT %EM_REJECTED %EM_TARGET %EM_FREQ %EM_COST
15603 +     %if "&em_tree_multipleTargets" eq "N" %then %do;
15604 +       %EM_TARGET
15605 +     %end;
15606 +     %else %do;
15607 +       %if &em_tree_numTarget ne 0 %then %do;
15608 +         %do i=1 %to &em_tree_numTarget;
15609 +            &&em_tree_targetVars&i
15610 +         %end;
15611 +       %end;
15612 +     %end;
15613 +     );
15614 +   run;
15616 +   /* run Tree procedure */
15617 +   %em_tree_runTreeProcedure(indata=&tempData, multipleTar=&em_tree_multipleTargets);
15619 +   /* Check return code and throw exception if error is detected */
15620 +   %if %length(&EMEXCEPTIONSTRING) %then %goto doendm;
15621 +   %if &syserr %then %do;
15622 +     %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
15623 +     %goto doendm;
15624 +   %end;
15626 +   /* add decision score code if multiple targets are processed */
15627 +   %if "&em_tree_multipleTargets" eq "Y" %then %do;
15628 +     %EM_MODEL(TARGET=%EM_TARGET, DECSCORECODE=Y, CLASSIFICATION=Y, FITSTATISTICS=N);
15629 +   %end;
15631 +   /* create outfit dataset if multiple score statements have been executed */
15632 +   %em_tree_createFitStats(multipleTar=&em_tree_multipleTargets);
15634 +   /* create English Rules */
15635 +   filename X "&EM_USER_ENGLISHRULES" encoding='utf-8' NOBOM;
15636 +     %if "&em_Tree_multipleTargets" eq "N" %then %do;
15637 +       %em_tree_makeEnglishRules;
15639 +       /* English Rules */
15640 +       %EM_REPORT(key=ENGLISHRULES, viewtype=SOURCE, block=MODEL, description=ENGLISHRULES, autodisplay=N);
15642 +     %end;
15643 +   filename x;
15645 +   %doendm:
15646 +%mend em_tree_train;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_MACROS.SOURCE.
15647 +%macro EM_SetProperties;
15649 +   /* train properties */
15650 +   %em_checkmacro(name=EM_PROPERTY_ImportModel,            value=N, global=Y);
15651 +   %em_checkmacro(name=EM_PROPERTY_ImportedTreeData,       value=, global=Y);
15652 +   %em_checkmacro(name=EM_PROPERTY_FREEZE,                 value=N, global=Y);
15653 +   %em_checkmacro(name=EM_PROPERTY_USEMULTIPLETARGET,      value=N, global=Y);
15654 +   %em_checkmacro(name=EM_PROPERTY_NOMINALCRITERION,       value=PROBCHISQ, global=Y);
15655 +   %em_checkmacro(name=EM_PROPERTY_ORDINALCRITERION,       value=ENTROPY, global=Y);
15656 +   %em_checkmacro(name=EM_PROPERTY_INTERVALCRITERION,      value=PROBF, global=Y);
15657 +   %em_checkmacro(name=EM_PROPERTY_CRITERION,              value=DEFAULT, global=Y);
15658 +   %em_checkmacro(name=EM_PROPERTY_SIGLEVEL,               value=0.2, global=Y);
15659 +   %em_checkmacro(name=EM_PROPERTY_SPLITSIZE,              value=., global=Y);
15660 +   %em_checkmacro(name=EM_PROPERTY_LEAFSIZE,               value=5, global=Y);
15661 +   %em_checkmacro(name=EM_PROPERTY_MINCATSIZE,             value=5, global=Y);
15662 +   %em_checkmacro(name=EM_PROPERTY_MAXBRANCH,              value=2, global=Y);
15663 +   %em_checkmacro(name=EM_PROPERTY_MAXDEPTH,               value=6, global=Y);
15664 +   %em_checkmacro(name=EM_PROPERTY_NRULES,                 value=5, global=Y);
15665 +   %em_checkmacro(name=EM_PROPERTY_NSURRS,                 value=0, global=Y);
15666 +   %em_checkmacro(name=EM_PROPERTY_MISSINGVALUE,           value=USEINSEARCH, global=Y);
15667 +   %em_checkmacro(name=EM_PROPERTY_USEVARONCE,             value=N, global=Y);
15668 +   %em_checkmacro(name=EM_PROPERTY_SUBTREE,                value=ASSESSMENT, global=Y);
15669 +   %em_checkmacro(name=EM_PROPERTY_NSUBTREE,               value=1, global=Y);
15670 +   %em_checkmacro(name=EM_PROPERTY_ASSESSMEASURE,          value=PROFIT/LOSS, global=Y);
15671 +   %em_checkmacro(name=EM_PROPERTY_ASSESSPERCENTAGE,       value=0.25, global=Y);
15672 +   %em_checkmacro(name=EM_PROPERTY_NODESAMPLE,             value=20000, global=Y);
15673 +   %em_checkmacro(name=EM_PROPERTY_EXHAUSTIVE,             value=5000, global=Y);
15674 +   %em_checkmacro(name=EM_PROPERTY_USEDECISION,            value=N, global=Y);
15675 +   %em_checkmacro(name=EM_PROPERTY_USEPRIORS,              value=N, global=Y);
15676 +   %em_checkmacro(name=EM_PROPERTY_KASS,                   value=Y, global=Y);
15677 +   %em_checkmacro(name=EM_PROPERTY_KASSAPPLY,              value=BEFORE, global=Y);
15678 +   %em_checkmacro(name=EM_PROPERTY_DEPTH,                  value=Y, global=Y);
15679 +   %em_checkmacro(name=EM_PROPERTY_INPUTS,                 value=N, global=Y);
15680 +   %em_checkmacro(name=EM_PROPERTY_NUMINPUTS,              value=1, global=Y);
15681 +   %em_checkmacro(name=EM_PROPERTY_DUMMY,                  value=N, global=Y);
15682 +   %em_checkmacro(name=EM_PROPERTY_LEAFID,                 value=Y, global=Y);
15683 +   %em_checkmacro(name=EM_PROPERTY_PREDICT,                value=Y, global=Y);
15684 +   %em_checkmacro(name=EM_PROPERTY_PERFORMANCE,            value=DISK, global=Y);
15685 +   %em_checkmacro(name=EM_PROPERTY_CV,                     value=N, global=Y);
15686 +   %em_checkmacro(name=EM_PROPERTY_CVNITER,                value=10, global=Y);
15687 +   %em_checkmacro(name=EM_PROPERTY_CVREPEAT,               value=1, global=Y);
15688 +   %em_checkmacro(name=EM_PROPERTY_CVSEED,                 value=12345, global=Y);
15689 +   %em_checkmacro(name=EM_PROPERTY_OBSIMPORTANCE,          value=N, global=Y);
15690 +   %em_checkmacro(name=EM_PROPERTY_NUMSINGLEIMP,           value=5, global=Y);
15692 +   /* properties for interactive sample */
15693 +   %em_checkmacro(name=EM_PROPERTY_CREATESAMPLE,           value=DEFAULT, global=Y);
15694 +   %em_checkmacro(name=EM_PROPERTY_SAMPLEMETHOD,           value=RANDOM, global=Y);
15695 +   %em_checkmacro(name=EM_PROPERTY_SAMPLESIZE,             value=10000, global=Y);
15696 +   %em_checkmacro(name=EM_PROPERTY_SAMPLESEED,             value=12345, global=Y);
15698 +   /* report properties */
15699 +   %em_checkmacro(name=EM_PROPERTY_PRECISION,              value=4, global=Y);
15700 +   %em_checkmacro(name=EM_PROPERTY_SPLITPRECISION,         value=4, global=Y);
15701 +   %em_checkmacro(name=EM_PROPERTY_CLASSCOLORBY,           value=PERCENTEVEN, global=Y);
15702 +   %em_checkmacro(name=EM_PROPERTY_INTCOLORBY,             value=AVG, global=Y);
15703 +   %em_checkmacro(name=EM_PROPERTY_SHOWNODEID,             value=Y, global=Y);
15704 +   %em_checkmacro(name=EM_PROPERTY_SHOWVALID,              value=Y, global=Y);
15705 +   %em_checkmacro(name=EM_PROPERTY_PRED,                   value=N, global=Y);
15706 +   %em_checkmacro(name=EM_PROPERTY_TARGET,                 value=ALL, global=Y);
15707 +   %em_checkmacro(name=EM_PROPERTY_COUNT,                  value=Y, global=Y);
15708 +   %em_checkmacro(name=EM_PROPERTY_PERCENTCORRECT,         value=N, global=Y);
15709 +   %em_checkmacro(name=EM_PROPERTY_PROFITLOSS,             value=NONE, global=Y);
15710 +   %em_checkmacro(name=EM_PROPERTY_AVG,                    value=Y, global=Y);
15711 +   %em_checkmacro(name=EM_PROPERTY_RASE,                   value=N, global=Y);
15713 +   /* score properties */
15714 +   %em_checkmacro(name=EM_PROPERTY_VARSELECTION,           value=Y, global=Y);
15715 +   %em_checkmacro(name=EM_PROPERTY_NODEROLE,               value=SEGMENT, global=Y);
15717 +%mend EM_SetProperties;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: Deleting EMWS5.TREE_EMTREE (memtype=DATA).
NOTE: PROCEDURE DELETE used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_TRAINMACROS.SOURCE.
15719 +%Macro EM_CheckBinaryTargetLevel(indata=, target=,  nLevel= );
15720 +  %global &nLevel;
15721 +  proc dmdb batch data=&indata
15722 +    classout=_tmp_dmdbout;
15723 +    class &target;
15724 +  run;
15725 +  data _tmp_dmdbout;
15726 +    set _tmp_dmdbout;
15727 +    if strip(TYPE) = 'N' and  strip(LEVEL) = '.' then delete;
15728 +    if strip(TYPE) = 'C' and  strip(LEVEL) = '' then delete;
15729 +  run;
15730 +  data _null_;
15731 +    %let dsid = %sysfunc(open(work._tmp_dmdbout));
15732 +    %let _obs = %sysfunc(attrn(&dsid, NOBS));
15733 +    %let dsid = %sysfunc(close(&dsid));
15734 +     call symput("&nLevel", put(&_obs, Best12.));
15735 +  run;
15737 +  proc datasets lib=work nolist;
15738 +     delete _tmp_dmdbout;
15739 +  run;
15740 +  quit;
15741 +%Mend EM_CheckBinaryTargetLevel;
15744 +%macro em_tree_runTreeProcedure(indata= , multipleTar= , intFlag= );
15746 +  /* determine the number of obs in training data */
15747 +  proc sql;
15748 +    reset noprint;
15749 +    select count(*) into :em_nobs from &indata;
15750 +  quit;
15752 +  /* determine the number of input variables */
15753 +  %let numinputs = %eval(&EM_NUM_BINARY_INPUT + &EM_NUM_NOMINAL_INPUT + &EM_NUM_ORDINAL_INPUT + &EM_NUM_INTERVAL_INPUT+
15754 +                         &EM_NUM_BINARY_REJECTED + &EM_NUM_NOMINAL_REJECTED + &EM_NUM_ORDINAL_REJECTED + &EM_NUM_INTERVAL_REJECTED);
15756 +  /* retrieve targetEvent from decmeta */
15757 +  %let targetEvent=;
15758 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
15759 +    %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
15760 +      data _null_;
15761 +       set &EM_DEC_DECMETA(where=(_TYPE_="TARGET"));
15762 +       call symput('targetEvent', strip(tranwrd(EVENT,'"','""')));
15763 +      run;
15764 +    %end;
15765 +  %end;
15767 +  /* create targetTable if multipleTar eq Y */
15768 +  data temptarget;
15769 +    set &EM_DATA_VARIABLESET;
15770 +    where ROLE="TARGET" AND LEVEL^="ORDINAL";
15771 +  run;
15773 + /* data sets */
15774 + %EM_GETNAME(key=OUTSTATS,      type=DATA);
15775 + %EM_GETNAME(key=EMTREE,        type=DATA);
15776 + %EM_GETNAME(key=OUTOBSIMP,     type=DATA);
15777 + %EM_GETNAME(key=OUTSEQ,        type=DATA);
15778 + %EM_GETNAME(key=OUTIMPORT,     type=DATA);
15779 + %EM_GETNAME(key=OUTNODES,      type=DATA);
15780 + %EM_GETNAME(key=OUTSUMMARY,    type=DATA);
15781 + %EM_GETNAME(key=OUTTOPOLOGY,   type=DATA);
15782 + %EM_GETNAME(key=OUTPATH,       type=DATA);
15783 + %EM_GETNAME(key=OUTRULES,      type=DATA);
15785 + /* files */
15786 + %EM_GETNAME(key=TREEFLOW, type=FILE, extension=sas);
15787 + %EM_GETNAME(key=TREEPUBLISH, type=FILE, extension=sas);
15789 + /* turn on pmml if requested */
15790 + %let nnpmml=0;
15791 + %if %symexist(EM_PMML) %then %do;
15792 +    %if %upcase(&EM_PMML)=Y or %upcase(&EM_PMML)=YES %then %do;
15793 +       %let nnpmml=1;
15795 +       ods pmml file="&EM_FILE_EMPMML" encoding="UTF-8";
15796 +%end;
15798 + %let numClassTarget = %sysevalf(&EM_NUM_BINARY_TARGET + &EM_NUM_NOMINAL_TARGET + &EM_NUM_ORDINAL_TARGET);
15800 + %if &nnpmml or &numClassTarget %then %do;
15802 +       /* create dmdb needed for pmml generation */
15803 +       %let tree_maxlevel = 512;
15804 +       %if %symexist(EM_TRAIN_MAXLEVELS) %then %do;
15805 +         %if &EM_TRAIN_MAXLEVELS ne %then %do;
15806 +           %let tree_maxlevel = &EM_TRAIN_MAXLEVELS;
15807 +         %end;
15808 +       %end;
15809 +       %if &tree_maxlevel gt 0 %then %do;
15810 +           %let tree_maxlevel=%sysevalf(&tree_maxlevel+1);
15811 +          %let tree_maxlevel=%sysfunc(max(3, &tree_maxlevel ));
15812 +       %end;
15814 +       %let targetOrderString =;
15815 +       %let targetString = ;
15816 +       data _null_;
15817 +          length orderString nameString $10000;
15818 +          retain orderString nameString;
15819 +          set &em_data_variableset end=eof;
15820 +          %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" and ^&em_num_ordinal_target %then %do;
15821 +              where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL");
15822 +          %end;
15823 +          %else %do;
15824 +              where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL", "ORDINAL") and USE ='Y';
15825 +          %end;          select(order);
15826 +            when('')        order ='DESC';
15827 +            when('FMTASC')  order='ASCFMT';
15828 +            when('FMTDESC') order='DESFMT';
15829 +            otherwise;
15830 +          end;
15831 +          orderString = trim(orderString)!!' '!!trim(NAME)!!'('!!trim(order)!!')';
15832 +          nameString = trim(nameString)!!' '!!trim(NAME);
15834 +          if eof then do;
15835 +             call symput('targetOrderString', trim(orderString));
15836 +             call symput('targetString', trim(nameString));
15837 +          end;
15838 +       run;
15840 +       %let arborkluge= "work._treeDMDB";
15842 +       proc dmdb batch data=&indata
15843 +       %if &nnpmml %then %do;
15844 +           PMML
15845 +       %end;
15846 +        dmdbcat=_treeDMDB classout=classout varout=varout maxlevel=&tree_maxlevel;
15849 +   %if &nnpmml %then %do;
15850 +        %if "%EM_ID" ne "" %then %do;
15851 +          id %EM_ID;
15852 +        %end;
15853 +        %if &EM_NUM_CLASS gt 0 %then %do;
15854 +          class %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT
15855 +               %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED
15856 +               &targetOrderString;
15857 +        %end;
15858 +        %if &EM_NUM_INTERVAL gt 0 %then %do;
15859 +          var %EM_INTERVAL;
15860 +        %end;
15861 +        target &targetString %EM_INTERVAL_TARGET;
15862 +        %if "%EM_FREQ" ne "" %then %do;
15863 +          freq %EM_FREQ;
15864 +        %end;
15865 +  %end;
15866 +  %else %do;
15867 +      class  &targetOrderString;
15868 +      target &targetString %EM_INTERVAL_TARGET;
15869 +  %end;
15870 +       run;
15871 +       quit;
15873 +       proc datasets lib=work nolist;
15874 +          delete classout varout;
15875 +       run;
15876 +       quit;
15878 +    %end;
15879 + %end;
15881 + /* run Arbor procedure */
15882 + %if "&EM_PROPERTY_FREEZE" eq "N" and "&EM_PROPERTY_IMPORTMODEL" eq "N" %then %do;
15883 +  proc arbor data=&INDATA
15885 +  %if "&EM_PROPERTY_LEAFSIZE" ne "" %then %do;
15886 +    Leafsize = &EM_PROPERTY_LEAFSIZE
15887 +  %end;
15889 +  %if (("&EM_PROPERTY_SPLITSIZE" ne ".") AND (&EM_PROPERTY_SPLITSIZE lt &em_nobs)) %then %do;
15890 +    Splitsize = &EM_PROPERTY_SPLITSIZE
15891 +  %end;
15893 +  %if "&EM_PROPERTY_MINCATSIZE" ne "" %then %do;
15894 +    MinCatSize = &EM_PROPERTY_MINCATSIZE
15895 +  %end;
15897 +  %if "&EM_PROPERTY_MAXBRANCH" ne "" %then %do;
15898 +    MaxBranch = &EM_PROPERTY_MAXBRANCH
15899 +  %end;
15901 +  %if "&EM_PROPERTY_MAXDEPTH" ne "" %then %do;
15902 +    MaxDepth = &EM_PROPERTY_MAXDEPTH
15903 +  %end;
15905 +  %if (("%EM_TARGET_LEVEL" eq "NOMINAL") OR ("%EM_TARGET_LEVEL" eq "BINARY")) %then %do;
15906 +    %let Criterion = &EM_PROPERTY_NOMINALCRITERION;
15907 +  %end;
15908 +  %else %if "%EM_TARGET_LEVEL" eq "ORDINAL" %then %do;
15909 +    %let Criterion = &EM_PROPERTY_ORDINALCRITERION;
15910 +  %end;
15911 +  %else %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
15912 +    %let Criterion = &EM_PROPERTY_INTERVALCRITERION;
15913 +  %end;
15915 +  %if (("&criterion" eq "PROBCHISQ") or ("&criterion" eq "PROBF")) %then %do;
15916 +    %if "&EM_PROPERTY_SIGLEVEL" ne "" %then %do;
15917 +      alpha = &EM_PROPERTY_SIGLEVEL
15918 +    %end;
15919 +  %end;
15921 +  %if (("&EM_PROPERTY_KASS" eq "Y") OR ("&EM_PROPERTY_DEPTH" eq "Y") or ("&EM_PROPERTY_INPUTS" eq "Y")) %then %do;
15922 +    %if (("&Criterion" eq "PROBCHISQ") OR ("&Criterion" eq "PROBF") OR ("&Criterion" eq "DEFAULT")) %then %do;
15923 +      %if (("&EM_PROPERTY_KASS" eq "Y") or ("&EM_PROPERTY_DEPTH" eq "Y")) %then %do;
15924 +        %if "&EM_PROPERTY_KASSAPPLY" eq "BEFORE" %then %let chaid = CHAIDBEFORE;
15925 +        %else %if "&EM_PROPERTY_KASSAPPLY" eq "AFTER" %then %let chaid = CHAIDAFTER;
15927 +        padjust =
15928 +        %if "&EM_PROPERTY_KASS" eq "Y" %then %do;
15929 +          &chaid
15930 +        %end;
15931 +        %if "&EM_PROPERTY_DEPTH" eq "Y" %then %do;
15932 +          DEPTH
15933 +        %end;
15934 +      %end;
15935 +      %if "&EM_PROPERTY_INPUTS" eq "Y" %then %do;
15936 +         %let num_inputs = %sysfunc(min(&numinputs, &EM_PROPERTY_NUMINPUTS));
15937 +         pvars = &num_inputs
15938 +      %end;
15939 +    %end;
15940 +  %end;
15941 +  %else %do;
15942 +      %if (("&Criterion" eq "PROBCHISQ") OR ("&Criterion" eq "PROBF") OR ("&Criterion" eq "DEFAULT")) %then %do;
15943 +         padjust = NONE
15944 +      %end;
15945 +  %end;
15947 +  %if "&EM_PROPERTY_NRULES" ne "" %then %do;
15948 +    %let num_nrules = %sysfunc(min(&numinputs, &EM_PROPERTY_NRULES));
15949 +    Maxrules = &num_nrules
15950 +  %end;
15952 +  %if "&EM_PROPERTY_NSURRS" ne "" %then %do;
15953 +    %let num_nsurrs = %sysfunc(min((&numinputs-1), &EM_PROPERTY_NSURRS));
15954 +    Maxsurrs = &num_nsurrs
15955 +  %end;
15957 +  %if "&EM_PROPERTY_MISSINGVALUE" ne "" %then %do;
15958 +     Missing=&EM_PROPERTY_MISSINGVALUE
15959 +  %end;
15961 +  %if "&EM_PROPERTY_USEVARONCE" eq "Y" %then %do;
15962 +     USEVARONCE
15963 +  %end;
15965 +  %if "&EM_PROPERTY_EXHAUSTIVE" ne "" %then %do;
15966 +    Exhaustive=&EM_PROPERTY_EXHAUSTIVE
15967 +  %end;
15970 +  %if (("&multipleTar" eq "N") AND ("%EM_TARGET_LEVEL" ne "INTERVAL")) %then %do;
15971 +    event = "&targetEvent"
15972 +  %end;
15974 +  %if "&EM_PROPERTY_USEDECISION" eq "Y" %then %do;
15975 +     DECSEARCH
15976 +  %end;
15978 +  %if "&EM_PROPERTY_USEPRIORS" eq "Y" %then %do;
15979 +     PRIORSSEARCH
15980 +  %end;
15982 +  %if &arbor_1 ne %then %do;
15983 +    &arbor_1
15984 +  %end;
15986 +  %if &em_arbor ne %then %do;
15987 +     &em_arbor
15988 +  %end;
15989 +  ;
15990 + %end;
15991 + %else %if "&EM_PROPERTY_IMPORTMODEL" eq "Y"  %then %do;
15992 +     proc arbor data=&INDATA inmodel=&EM_PROPERTY_ImportedTreeData refreshtrain;
15993 +       interact;
15994 + %end;
15995 + %else %if "&EM_PROPERTY_FREEZE" eq "Y" %then %do;
15996 +   %if %sysfunc(exist(&EM_USER_EMTREE)) ne 1 %then %do;
15997 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEDATASET;
15998 +    %put &em_codebar;
15999 +    %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.notreedataset_err, NOQUOTE));
16000 +    %put &errormsg;
16001 +    %put &em_codebar;
16002 +    %goto doendm;
16003 +   %end;
16004 +   %else %do;
16005 +     proc arbor data=&INDATA inmodel=&EM_USER_EMTREE refreshtrain;
16006 +       interact;
16007 +   %end;
16008 + %end;
16010 + %else %do;
16011 +   %if %sysfunc(exist(&EM_USER_BROWSETREE)) ne 1 %then %do;
16012 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEDATASET;
16013 +    %put &em_codebar;
16014 +    %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.notreedataset_err, NOQUOTE));
16015 +    %put &errormsg;
16016 +    %put &em_codebar;
16017 +    %goto doendm;
16018 +   %end;
16019 +   %else %do;
16020 +      proc arbor data=&INDATA inmodel=&EM_USER_BROWSETREE refrestrain;
16021 +        interact;
16022 +   %end;
16023 + %end;
16025 + %if "&EM_PROPERTY_FREEZE" eq "N" and "&EM_PROPERTY_IMPORTMODEL" eq "N" %then %do;
16026 +    %if %eval(&EM_NUM_INTERVAL_INPUT + &EM_NUM_INTERVAL_REJECTED) gt 0 %then %do;
16027 +      input %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED/ level = interval;
16028 +    %end;
16030 +    %if  %eval(&EM_NUM_NOMINAL_INPUT + &EM_NUM_NOMINAL_REJECTED) gt 0 %then %do;
16031 +      input %EM_NOMINAL_INPUT %EM_NOMINAL_REJECTED / level = nominal;
16032 +    %end;
16034 +    %if %eval(&EM_NUM_BINARY_INPUT + &EM_NUM_BINARY_REJECTED) gt 0 %then %do;
16035 +      input %EM_BINARY_INPUT %EM_BINARY_REJECTED / level = nominal;
16036 +    %end;
16038 +    %if %eval(&EM_NUM_ORDINAL_INPUT + &EM_NUM_ORDINAL_REJECTED) gt 0 %then %do;
16039 +      input %EM_ORDINAL_INPUT %EM_ORDINAL_REJECTED/ level = ordinal;
16040 +    %end;
16042 +    %if "%EM_FREQ" ne "" %then %do;
16043 +       freq %EM_FREQ;
16044 +    %end;
16046 +    %if "&multipleTar" eq "Y" %then %do;
16047 +       /* cycle through all target vars in variableset */
16048 +       %let tdsid = %sysfunc(open(temptarget));
16049 +       %if &tdsid %then %do;
16050 +          %let n_var = %sysfunc(varnum(&tdsid, NAME));
16051 +          %let n_lvl = %sysfunc(varnum(&tdsid, LEVEL));
16052 +          %do %while(^ %sysfunc(fetch(&tdsid)));
16053 +             %let var = %sysfunc(getvarc(&tdsid, &n_var));
16054 +             %let lvl = %sysfunc(getvarc(&tdsid, &n_lvl));
16055 +             target &var / level = &lvl
16056 +             %if (("&lvl" eq "BINARY") or ("&lvl" eq "NOMINAL")) %then %do;
16057 +               Criterion=&EM_PROPERTY_NOMINALCRITERION;
16058 +             %end;
16059 +             %else %if "&lvl" eq "INTERVAL" %then %do;
16060 +               Criterion=&EM_PROPERTY_INTERVALCRITERION;
16061 +             %end;
16062 +             %else %if "&lvl" eq "ORDINAL" %then %do;
16063 +               Criterion=&EM_PROPERTY_ORDINALCRITERION;
16064 +             %end;
16065 +          %end;
16066 +          %if &tdsid %then %let tdsid=%sysfunc(close(&tdsid));
16067 +       %end;
16068 +       useTarget variable = %EM_TARGET;
16069 +    %end;
16070 +    %else %do;
16071 +      target %EM_TARGET / level = %EM_TARGET_LEVEL
16072 +      %if (("%EM_TARGET_LEVEL" eq "BINARY") or ("%EM_TARGET_LEVEL" eq "NOMINAL")) %then %do;
16073 +        Criterion=&EM_PROPERTY_NOMINALCRITERION;
16074 +      %end;
16075 +      %else %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
16076 +        Criterion=&EM_PROPERTY_INTERVALCRITERION;
16077 +      %end;
16078 +      %else %if "%EM_TARGET_LEVEL" eq "ORDINAL" %then %do;
16079 +        Criterion=&EM_PROPERTY_ORDINALCRITERION;
16080 +      %end;
16081 +    %end;
16083 +    %if "&multipleTar" eq "N" %then %do;
16084 +      &EM_DEC_STATEMENT;
16085 +    %end;
16087 +    Performance &EM_PROPERTY_PERFORMANCE
16088 +    %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
16089 +      nodesize=&EM_PROPERTY_NODESAMPLE
16090 +    %end;
16091 +    ;
16093 +    %if "&intFlag" eq "Y" %then %do;
16094 +       INTERACT Largest;
16095 +       Train maxnewdepth=0;
16096 +    %end;
16098 +       %if "&EM_PROPERTY_ASSESSMEASURE" ne "" %then %do;
16099 +         Assess
16100 +         %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)) )) %then %do;
16101 +            %if "&EM_PROPERTY_CV" eq "Y" %then %do;
16102 +              %put &em_codebar;
16103 +              %let errormsg = %sysfunc(sasmsg(sashelp.dmine, novalidationwithcv_note, NOQUOTE));
16104 +              %put &errormsg;
16105 +              %put &em_codebar;
16106 +            %end;
16107 +            %else %do;
16108 +               Validata=&EM_IMPORT_VALIDATE
16109 +            %end;
16110 +         %end;
16111 +         %else %do;
16112 +           NoValidata
16113 +         %end;
16114 +         %if "&EM_PROPERTY_TRAINMODE" ne "INTERACTIVE" %then %do;
16115 +            %if "&EM_PROPERTY_ASSESSMEASURE" eq "PROFIT/LOSS" %then %do;
16116 +               %let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='MATRIX'))));
16117 +               %if &dsid %then %do;
16118 +                 %let usenum = %sysfunc(varnum(&dsid, USE));
16119 +                 %do %while(^ %sysfunc(fetch(&dsid)));
16120 +                   %let use = %sysfunc(getvarc(&dsid, &usenum));
16121 +                   %if "&use" eq "Y" %then %let measure=PROFIT;
16122 +                   %else %do;
16123 +                      %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %let measure = ASE;
16124 +                      %else %let measure= MISC;
16125 +                   %end;
16126 +                 %end;
16127 +               %end;
16128 +               %if &dsid %then %let dsid = %sysfunc(close(&dsid));
16129 +            %end;
16130 +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "MISC" %then %do;
16131 +              %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then  %do;
16132 +                 %let measure=ASE;
16133 +              %end;
16134 +              %else %do;
16135 +                 %let measure=MISC;
16136 +              %end;
16137 +            %end;
16138 +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "ASE" %then %do;
16139 +              %let measure=ASE;
16140 +            %end;
16141 +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "LIFT" %then %do;
16142 +               %let measure = LIFT;
16143 +               %let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='MATRIX'))));
16144 +               %if &dsid %then %do;
16145 +                 %let usenum = %sysfunc(varnum(&dsid, USE));
16146 +                 %do %while(^ %sysfunc(fetch(&dsid)));
16147 +                   %let use = %sysfunc(getvarc(&dsid, &usenum));
16148 +                   %if "&use" eq "Y" %then %let measure=LIFTPROFIT;
16149 +                 %end;
16150 +               %end;
16151 +               %if &dsid %then %let dsid = %sysfunc(close(&dsid));
16152 +            %end;
16153 +            measure=&measure
16154 +            %if (("&measure" eq "LIFT") AND ("%EM_TARGET_LEVEL" ne "INTERVAL")) %then %do;
16155 +               event = "&targetEvent"
16156 +            %end;
16157 +            %if (("&measure" eq "LIFT") OR ("&measure" eq "LIFTPROFIT")) %then %do;
16158 +              proportion=&EM_PROPERTY_ASSESSPERCENTAGE
16159 +            %end;
16160 +         %end;
16161 +         %if "&multipleTar" eq "N" %then %do;
16162 +            %if "&EM_PROPERTY_CV" eq "Y" %then %do;
16163 +               CV
16164 +               %if "&EM_PROPERTY_CVNIter" ne "" %then %do;
16165 +                 CVNITer = &EM_PROPERTY_CVNITER
16166 +               %end;
16167 +               %if "&EM_PROPERTY_CVREPEAT" ne "" %then %do;
16168 +                 CVRepeat = &EM_PROPERTY_CVREPEAT
16169 +               %end;
16170 +               %if "&EM_PROPERTY_CVSEED" ne "" %then %do;
16171 +                 CVSeed = &EM_PROPERTY_CVSEED
16172 +               %end;
16173 +            %end;
16174 +         %end;
16175 +       %end;
16176 +      ;
16178 +      %if "&intFlag" ne "Y" %then %do;
16179 +        %if "&EM_PROPERTY_SUBTREE" ne "" %then %do;
16180 +          %if "&EM_PROPERTY_SUBTREE" eq "ASSESSMENT" %then %let subtree=BEST;
16181 +          %else %if "&EM_PROPERTY_SUBTREE" eq "N" %then %let subtree=NLEAVES;
16182 +          %else %if "&EM_PROPERTY_SUBTREE" eq "LARGEST" %then %let subtree=LARGEST;
16184 +          SUBTREE &subtree
16185 +          %if "&subtree" eq "NLEAVES" %then %do;
16186 +            =&EM_PROPERTY_NSUBTREE
16187 +          %end;
16188 +          ;
16189 +        %end;
16191 +       %if (("&EM_PROPERTY_OBSIMPORTANCE" eq "Y") AND ("&multipleTar" eq "N")) %then %do;
16192 +          %if "&EM_USER_OUTOBSIMP" ne "" %then %do;
16193 +            importance data=&INDATA outfit=&EM_USER_OUTOBSIMP nvars=&EM_PROPERTY_NUMSINGLEIMP;
16194 +          %end;
16195 +       %end;
16196 +      %end;
16197 + %end;
16200 + MakeMacro nleaves = nleaves;
16201 + save
16202 + %if "&EM_USER_EMTREE" ne "" %then %do;
16203 +   MODEL=&EM_USER_EMTREE
16204 + %end;
16205 + %if "&EM_USER_OUTSEQ" ne "" %then %do;
16206 +   SEQUENCE=&EM_USER_OUTSEQ
16207 + %end;
16208 + %if "&EM_USER_OUTIMPORT" ne "" %then %do;
16209 +   IMPORTANCE=&EM_USER_OUTIMPORT
16210 + %end;
16211 + %if "&EM_USER_OUTNODES" ne "" %then %do;
16212 +   NODESTAT=&EM_USER_OUTNODES
16213 + %end;
16214 + %if "&EM_USER_OUTSUMMARY" ne "" %then %do;
16215 +   SUMMARY=&EM_USER_OUTSUMMARY
16216 + %end;
16217 + %if "&EM_USER_OUTSTATS" ne "" %then %do;
16218 +   STATSBYNODE=&EM_USER_OUTSTATS
16219 + %end;
16220 + %if "&EM_USER_OUTTOPOLOGY" ne "" %then %do;
16221 +   TOPOLOGY=&EM_USER_OUTTOPOLOGY
16222 + %end;
16223 + %if "&EM_USER_OUTPATH" ne "" %then %do;
16224 +   Pathlistnonmissing=&EM_USER_OUTPATH
16225 + %end;
16226 + %if "&EM_USER_OUTRULES" ne "" %then %do;
16227 +   RULES = &EM_USER_OUTRULES
16228 + %end;
16229 + ;
16231 + %if "&intFlag" ne "Y" %then %do;
16233 +   %let lookupString = ;
16234 +   %if ^%symexist(EM_OPTION) %then
16235 +      %let EM_OPTION=;
16237 +   %if %sysfunc(index(%upcase(&EM_DEBUG), I18N)) or %sysfunc(index(%upcase(&EM_OPTION), I18N)) %then %do;
16238 +      %let lookupString = LOOKUP=SELECT;
16239 +   %end;
16241 +   %let codetext=;
16242 +   %let norescodetxt=;
16244 +   %if "&EM_PROPERTY_DUMMY" eq "Y" %then %do;
16245 +     %let codetext=&codetext DUMMY;
16246 +     %let norescodetxt=&norescodetxt DUMMY;
16247 +   %end;
16248 +   %if "&EM_PROPERTY_LEAFID" ne "Y" %then %do;
16249 +     %let codetext=&codetext NOLEAFID;
16250 +     %let norescodetxt=&norescodetxt NOLEAFID;
16251 +   %end;
16252 +   %if "&EM_PROPERTY_PREDICT" ne "Y" %then %do;
16253 +     %let norescodetxt=&norescodetxt NOPRED;
16254 +   %end;
16256 +   code file="&EM_USER_TREEFLOW" res &codetext group=&emloopid &lookupString;
16257 +   code file="&EM_USER_TREEPUBLISH" nores &norescodetxt group=&emloopid &lookupString;
16259 +   %if &nnpmml %then %do;
16260 +     code pmml;
16261 +   %end;
16263 +   score data=&INDATA out=_NULL_ outfit=work.fit_train role=TRAIN;
16264 +   %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16265 +     score data=&EM_IMPORT_VALIDATE out=_NULL_ outfit=work.fit_valid role=VALID;
16266 +   %end;
16267 +   %if "&EM_IMPORT_TEST" ne "" %then %do;
16268 +     score data=&EM_IMPORT_TEST out=_NULL_ outfit=work.fit_test role=TEST;
16269 +   %end;
16270 + %end;
16272 + run;
16273 + quit;
16275 + /*%em_checkerror(); */
16276 +  %if %sysfunc(cexist(work._treeDMDB)) %then %do;
16277 +   /* Delete DMDB catalog */
16278 +   proc datasets lib=work nolist;
16279 +       delete _treeDMDB / mt=cat;
16280 +  run;
16281 +  %end;
16283 + %if &nnpmml %then %do;
16284 +    ods pmml close;
16285 + %end;
16287 +  %doendm:
16289 +%mend em_tree_runTreeProcedure;
16291 +%macro em_tree_createFitStats( multipleTar= );
16294 +  /* create targetTable is multipleTar eq Y */
16295 +  data temptarget;
16296 +    set &EM_DATA_VARIABLESET;
16297 +    where ROLE="TARGET";
16298 +  run;
16300 +  %EM_GETNAME(key=EMOUTFIT, type=DATA);
16301 +   data &EM_USER_EMOUTFIT;
16302 +     length target $32;
16303 +     merge work.fit_train
16304 +     %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16305 +       work.fit_valid
16306 +     %end;
16307 +     %if "&EM_IMPORT_TEST" ne "" %then %do;
16308 +       work.fit_test
16309 +     %end;
16310 +     ;
16311 +     %if "&multipleTar" eq "N" %then %do;
16312 +       target="%EM_TARGET";
16313 +     %end;
16314 +     %else %do;
16315 +       target = _TARGET_;
16316 +     %end;
16317 +     drop _NW_ _SUMW_
16318 +     %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16319 +        _VSUMW_
16320 +     %end;
16321 +     ;
16322 +   run;
16324 +   %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16325 +     proc datasets library=work nolist;
16326 +       delete fit_valid;
16327 +     run;
16328 +   %end;
16329 +   %if "&EM_IMPORT_TEST" ne "" %then %do;
16330 +     proc datasets library=work nolist;
16331 +       delete fit_test;
16332 +     run;
16333 +   %end;
16335 +%mend em_tree_createFitStats;
16338 +%macro em_tree_makeEnglishRules;
16340 +  %EM_GETNAME(key=OUTNODES, type=DATA);
16341 +  %EM_GETNAME(key=OUTPATH, type=DATA);
16343 +  /* verify that necessary tables exist and if not, skip processing */
16344 +  %if %sysfunc(exist(&EM_USER_OUTNODES)) ne 1 %then %do;
16345 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
16346 +    %goto doendm;
16347 +  %end;
16348 +  %if %sysfunc(exist(&EM_USER_OUTPATH)) ne 1 %then %do;
16349 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
16350 +    %goto doendm;
16351 +  %end;
16353 +  /* determine length of variable in outpath dataset */
16354 +  %let vlength= ;
16355 +  %let dsid = %sysfunc(open(&EM_USER_OUTPATH));
16356 +  %if &dsid ne %then %do;
16357 +    %let varnum = %sysfunc(varnum(&dsid, VARIABLE));
16358 +    %let vlength = %sysfunc(VARLEN(&dsid, &varnum));
16359 +  %end;
16360 +  %if &dsid ne %then %let dsid = %sysfunc(close(&dsid));
16362 +  data tempoutpath;
16363 +    length varname $&vlength;
16364 +    retain varname;
16365 +    set &EM_USER_OUTPATH;
16367 +    if ^missing(variable) then varname=variable;
16368 +    else if ^missing(var_name) then varname=var_name;
16369 +    output;
16370 +  run;
16372 +  /* create an array of generated predicted variable names */
16373 +  %let tree_pred_vars = ;
16374 +  %let tree_pred_label = ;
16375 +  %let numpred= 0;
16376 +  %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
16378 +    data _null_;
16379 +     set &EM_DEC_DECMETA(where=(_TYPE_="PREDICTED")) end=eof;
16380 +     call symput('tree_pred_vars'!!strip(put(_N_, BEST.)), strip(VARIABLE));
16381 +     call symput('tree_pred_label'!!strip(put(_N_, BEST.)), strip(tranwrd(LABEL,'"','""')));
16382 +     if eof then
16383 +       call symput('numpred', strip(put(_N_, BEST.)));
16384 +    run;
16385 +  %end;
16387 +  /* determine if NPRIORS exists in outnodes  */
16388 +  %local nprior_flag;
16389 +  data _null_;
16390 +    set &EM_USER_OUTNODES(obs=2) end=eof;
16391 +    if eof then do;
16392 +      call symput('nprior_flag', strip(put(npriors, best.)));
16393 +    end;
16394 +  run;
16396 +  proc sort data=tempoutpath; by node; run;
16397 +  proc sort data=&EM_USER_OUTNODES out=outnodes; by node; run;
16399 +  data tempoutpath;
16400 +    merge tempoutpath(in=_a) outnodes(keep= node
16401 +    %if "&nprior_flag" ne "." %then %do;
16402 +      NPRIORS
16403 +    %end;
16404 +    %else %do;
16405 +      N
16406 +    %end;
16407 +    %if &numpred gt 0 %then %do;
16408 +      %do i=1 %to &numpred;
16409 +        &&tree_pred_vars&i
16410 +      %end;
16411 +    %end;
16412 +    );
16413 +    by node;
16414 +    if _a;
16415 +  run;
16417 +  proc sort data=tempoutpath; by node descending varname descending numeric_value; run;
16419 +  data _null_;
16420 +    file x;
16421 +    set tempoutpath;
16422 +    by node descending varname;
16423 +    retain origvar oldnode string;
16424 +    length origvar $32 oldnode 8 string $200;
16426 +    if _N_ = 1 then do;
16427 +      origvar = varname;
16428 +      oldnode = node;
16429 +    end;
16431 +    if first.node then do;
16432 +       put "&EM_CODEBAR";
16433 +       put " Node = " node;
16434 +       put "&EM_CODEBAR";
16435 +    end;
16437 +      if first.varname then do;
16438 +         if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
16439 +            if MISSING(CHARACTER_VALUE) then do;
16440 +             if NUMERIC_VALUE ne .  then do;
16441 +              if ^first.node then do;
16442 +                string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16443 +              end;
16444 +              else do;
16445 +                string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16446 +              end;
16447 +             end;
16448 +            end;
16449 +            else do;
16450 +              if ^first.node then do;
16451 +                string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16452 +              end;
16453 +              else do;
16454 +                string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16455 +              end;
16456 +             end;
16457 +         end;
16458 +         else if RELATION in ("=") then do;
16459 +            if ^first.node then do;
16460 +              string = "AND "||strip(varname) ||" IS ONE OF: "||character_value;
16461 +            end;
16462 +            else do;
16463 +              string = "if "|| strip(varname) ||" IS ONE OF: "||character_value;
16464 +            end;
16465 +         end;
16466 +         else if RELATION in ("ISMISSING") then do;
16467 +            if ^first.node then do;
16468 +              string = " AND "|| strip(varname) || " equals Missing";
16469 +            end;
16470 +            else do;
16471 +              string = "if "|| strip(varname) ||" equals Missing";
16472 +            end;
16473 +         end;
16474 +         else if RELATION in ("ISNOTMISSING") then do;
16475 +            if ^first.node then do;
16476 +              string = " AND "|| strip(varname) || " equals All Values";
16477 +            end;
16478 +            else do;
16479 +              string = "if "|| strip(varname) ||" equals All Values";
16480 +            end;
16481 +         end;
16482 +         if ^missing(varname) then origvar = varname;
16483 +         oldnode=node;
16485 +      end;
16486 +      else do;
16487 +         if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
16488 +          if MISSING(CHARACTER_VALUE) then do;
16489 +           if  NUMERIC_VALUE ne .  then do;
16490 +            if ^MISSING(string) then
16491 +              string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16492 +            else
16493 +              string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16494 +           end;
16495 +          end;
16496 +          else do;
16497 +            if ^MISSING(string) then
16498 +              string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16499 +            else
16500 +              string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16501 +          end;
16503 +         end;
16504 +         else if RELATION in ("=") then do;
16505 +           string = strip(string)||", "||strip(character_value);
16506 +         end;
16507 +         else if RELATION in ("ISMISSING") then do;
16509 +         end;
16510 +         if ^missing(varname) then origvar = varname;
16511 +         oldnode=node;
16512 +      end;
16513 +      if last.varname then do;
16514 +         if RELATION in ("ISMISSING") then do;
16515 +           if ^first.varname then do;
16516 +             string = strip(string) || " or MISSING";
16517 +           end;
16518 +         end;
16519 +         put string;
16520 +         if ^missing(varname) then origvar = varname;
16521 +         oldnode=node;
16522 +      end;
16524 +      if last.node then do;
16525 +         put "then ";
16526 +         put " Tree Node Identifier   = " node;
16528 +         %if "&nprior_flag" ne "." %then %do;
16529 +           put " Number of Observations = " NPRIORS;
16530 +         %end;
16531 +         %else %do;
16532 +           put " Number of Observations = " N;
16533 +         %end;
16535 +         %if &numpred gt 0 %then %do;
16536 +           %do i=1 %to &numpred;
16537 +             put " &&tree_pred_label&i = " &&tree_pred_vars&i;
16538 +           %end;
16539 +         %end;
16541 +         put " ";
16542 +         if ^missing(varname) then origvar = varname;
16543 +         oldnode=node;
16544 +      end;
16546 +  run;
16548 +  proc datasets lib=work nolist;
16549 +    delete tempoutpath outnodes;
16550 +  run;
16552 +  %doendm:
16553 +%mend em_tree_makeEnglishRules;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: The data set WORK.EM_USER_KEY has 1 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: DATA STEP view saved on file EMWS5.EM_TREE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.29 seconds
      cpu time            0.03 seconds
 
 
NOTE: View EMWS5.EM_TREE.VIEW used (Total process time):
      real time           0.05 seconds
      cpu time            0.06 seconds
 
NOTE: There were 2694 observations read from the data set EMWS5.TEXTTOPIC_TRAIN.
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.07 seconds
      cpu time            0.06 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS5.TREE_VARIABLESET.
      WHERE (ROLE='TARGET') and (LEVEL not = 'ORDINAL');
NOTE: The data set WORK.TEMPTARGET has 1 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
NOTE: 1595871 kilobytes of physical memory.
NOTE: Will use 2693 out of 2694 training cases.
NOTE: Using memory pool with 532730880 bytes.
NOTE: Passed training data 12 times.
NOTE: Training used 5915304 bytes of work memory.
NOTE: The subtree sequence contains 53 subtrees. The largest has 105 nodes and 53 leaves.
NOTE: Using subtree with 97 nodes and 49 leaves.
NOTE: Using subtree with 97 nodes and 49 leaves.
NOTE: Created macro variable NLEAVES equal to 49.
NOTE: The data set EMWS5.TREE_OUTIMPORT has 73 observations and 6 variables.
NOTE: The data set EMWS5.TREE_EMTREE has 3751 observations and 4 variables.
NOTE: The data set EMWS5.TREE_OUTNODES has 97 observations and 16 variables.
NOTE: The data set EMWS5.TREE_OUTPATH has 195 observations and 7 variables.
NOTE: The data set EMWS5.TREE_OUTRULES has 1078 observations and 6 variables.
NOTE: The data set EMWS5.TREE_OUTSEQ has 53 observations and 18 variables.
NOTE: The data set EMWS5.TREE_OUTSTATS has 582 observations and 4 variables.
NOTE: The data set EMWS5.TREE_OUTSUMMARY has 10 observations and 3 variables.
NOTE: The data set EMWS5.TREE_OUTTOPOLOGY has 97 observations and 5 variables.
NOTE: External file P:\DMBI_Project\Twitter_Insta_Content_Engineering\Workspaces\EMWS5\Tree\TREEFLOW.sas opened.
NOTE: External file P:\DMBI_Project\Twitter_Insta_Content_Engineering\Workspaces\EMWS5\Tree\TREEPUBLISH.sas opened.
NOTE: The data set WORK.FIT_TRAIN has 1 observations and 9 variables.
NOTE: View EMWS5.EM_TREE.VIEW used (Total process time):
      real time           0.07 seconds
      cpu time            0.07 seconds
 
NOTE: There were 2694 observations read from the data set EMWS5.TEXTTOPIC_TRAIN.
NOTE: The data set WORK.FIT_VALID has 1 observations and 7 variables.
NOTE: The data set WORK.FIT_TEST has 1 observations and 7 variables.
 
 
NOTE: View EMWS5.EM_TREE.VIEW used (Total process time):
      real time           1.27 seconds
      cpu time            0.73 seconds
 
NOTE: There were 2694 observations read from the data set EMWS5.TEXTTOPIC_TRAIN.
NOTE: There were 2694 observations read from the data set EMWS5.EM_TREE.
NOTE: The data set WORK._NAMEDAT has 1 observations and 5 variables.
NOTE: PROCEDURE ARBOR used (Total process time):
      real time           1.29 seconds
      cpu time            0.73 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS5.TREE_VARIABLESET.
      WHERE ROLE='TARGET';
NOTE: The data set WORK.TEMPTARGET has 1 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 1 observations read from the data set WORK.FIT_TRAIN.
NOTE: There were 1 observations read from the data set WORK.FIT_VALID.
NOTE: There were 1 observations read from the data set WORK.FIT_TEST.
NOTE: The data set EMWS5.TREE_EMOUTFIT has 1 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.18 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: Deleting WORK.FIT_VALID (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Deleting WORK.FIT_TEST (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 195 observations read from the data set EMWS5.TREE_OUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 195 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS5.TREE_TOTAL_ACTIONS_DM.
      WHERE _TYPE_='PREDICTED';
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Variable npriors is uninitialized.
NOTE: There were 2 observations read from the data set EMWS5.TREE_OUTNODES.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 195 observations read from the data set WORK.TEMPOUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 195 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 97 observations read from the data set EMWS5.TREE_OUTNODES.
NOTE: The data set WORK.OUTNODES has 97 observations and 16 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 195 observations read from the data set WORK.TEMPOUTPATH.
NOTE: There were 97 observations read from the data set WORK.OUTNODES.
NOTE: The data set WORK.TEMPOUTPATH has 195 observations and 10 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 195 observations read from the data set WORK.TEMPOUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 195 observations and 10 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      212:176   222:190   368:191   375:195
NOTE: The file X is:
      Filename=P:\DMBI_Project\Twitter_Insta_Content_Engineering\Workspaces\EMWS5\Tree\ENGLISHRULES.txt,
      RECFM=V,LRECL=131068,File Size (bytes)=0,
      Last Modified=06May2020:18:33:32,
      Create Time=06May2020:18:33:32
 
NOTE: 470 records were written to the file X.
      The minimum record length was 1.
      The maximum record length was 62.
NOTE: There were 195 observations read from the data set WORK.TEMPOUTPATH.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Deleting WORK.TEMPOUTPATH (memtype=DATA).
NOTE: Deleting WORK.OUTNODES (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.01 seconds
 
 
NOTE: Fileref X has been deassigned.
16555
16556  *------------------------------------------------------------*;
16557  * End TRAIN: Tree;
16558  *------------------------------------------------------------*;
 
16559  *------------------------------------------------------------*;
16560  * Close any missing semi colons;
16561  *------------------------------------------------------------*;
16562  ;
16563  ;
16564  ;
16565  ;
16566  quit;
16567  *------------------------------------------------------------*;
16568  * Close any unbalanced quotes;
16569  *------------------------------------------------------------*;
16570  /*; *"; *'; */
16571  ;
16572  run;
16573  quit;
16574  /* Reset EM Options */
16575  options formchar="|----|+|---+=|-/\<>*";
16576  options nocenter ls=256 ps=10000;
16577  goptions reset=all device=GIF NODISPLAY;
 
16578  proc sort data=WORK.EM_USER_REPORT;
16579  by ID VIEW;
16580  run;
 
NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
*------------------------------------------------------------*
* Score Log
Date:                May 06, 2020
Time:                18:33:33
*------------------------------------------------------------*
16682  %let EMEXCEPTIONSTRING=;
16683  *------------------------------------------------------------*;
16684  * SCORE: Tree;
16685  *------------------------------------------------------------*;
16686  %let EM_ACTION = SCORE;
16687  %let syscc = 0;
16688  %macro main;
16689
16690    %if %upcase(&EM_ACTION) = CREATE %then %do;
16691      filename temp catalog 'sashelp.emmodl.tree_create.source';
16692      %include temp;
16693      filename temp;
16694
16695      %em_tree_create;
16696    %end;
16697
16698     %else
16699     %if %upcase(&EM_ACTION) = TRAIN %then %do;
16700
16701         filename temp catalog 'sashelp.emmodl.tree_train.source';
16702         %include temp;
16703         filename temp;
16704         %em_tree_train;
16705     %end;
16706
16707    %else
16708    %if %upcase(&EM_ACTION) = SCORE %then %do;
16709      filename temp catalog 'sashelp.emmodl.tree_score.source';
16710      %include temp;
16711      filename temp;
16712
16713      %em_tree_score;
16714
16715    %end;
16716
16717    %else
16718    %if %upcase(&EM_ACTION) = REPORT %then %do;
16719
16720         filename temp catalog 'sashelp.emmodl.tree_report.source';
16721         %include temp;
16722         filename temp;
16723
16724         %em_tree_report;
16725     %end;
16726
16727    %else
16728    %if %upcase(&EM_ACTION) = OPENINT %then %do;
16729
16730         filename temp catalog 'sashelp.emmodl.tree_actions.source';
16731         %include temp;
16732         filename temp;
16733         %EM_TREE_OPENTREEVIEWER;
16734
16735     %end;
16736
16737    %else
16738    %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
16739
16740         filename temp catalog 'sashelp.emmodl.tree_actions.source';
16741         %include temp;
16742         filename temp;
16743         %EM_TREE_CLOSETREEVIEWER;
16744
16745     %end;
16746
16747
16748     %doendm:
16749  %mend main;
16750
16751  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_SCORE.SOURCE.
16753 +%macro em_tree_score;
16755 +   /* determine if multiple targets will be processed */
16756 +   %let em_tree_multipleTargets=N;
16757 +   %let em_tree_numTarget=1;
16758 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
16759 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
16760 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
16761 +         %let em_tree_multipleTargets=N;
16762 +      %end;
16763 +      %else %do;
16764 +         /* create macro array of targets  */
16765 +         data _null_;
16766 +           set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
16767 +           call symput('em_tree_targetVars'!!strip(put(_N_, BEST.)), strip(Name));
16768 +           if eof then
16769 +             call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
16770 +        run;
16772 +        %if &em_tree_numTarget gt 1 %then %do;
16773 +           %let em_tree_multipleTargets=Y;
16774 +        %end;
16775 +      %end;
16776 +   %end;
16778 +   /* build flow and publish scoring code */
16779 +   %EM_GETNAME(key=TREEFLOW, type=FILE, extension=sas);
16780 +   %EM_GETNAME(key=TREEPUBLISH, type=FILE, extension=sas);
16782 +   filename treeflow "&EM_USER_TREEFLOW";
16783 +   filename treepub "&EM_USER_TREEPUBLISH";
16785 +   filename flowref  "&EM_FILE_EMFLOWSCORECODE";
16786 +   filename pubref   "&EM_FILE_EMPUBLISHSCORECODE";
16788 +   %em_copyfile(infref=treeflow, outfref=flowref);
16789 +   %em_copyfile(infref=treepub, outfref=pubref);
16791 +   filename treeflow;
16792 +   filename treepub;
16794 +   /* if priors are used, add code to generate unadjusted residuals in export */
16795 +   %let useAdjPriors = N;
16796 +   data _null_;
16797 +     set &EM_DEC_DECMETA(where=(_TYPE_="DECPRIOR"));
16798 +     if USE="Y" then call symput('useAdjPriors', 'Y');
16799 +   run;
16800 +   %if (("&em_tree_multipleTargets" eq "N") AND ("&useAdjPriors" eq "Y")) %then %do;
16801 +      filename temp catalog 'sashelp.emutil.em_makeunadjustedresidualvars.source';
16802 +      %include temp;
16803 +      filename temp;
16805 +      %EM_GETNAME(key=adjResidualCode, type=FILE, extension=sas);
16806 +      filename adjref "&EM_USER_adjResidualCode";
16807 +      %makeUnadjustedResidualVars(target=%EM_TARGET, decmeta=&EM_DEC_DECMETA, fref=adjref);
16809 +      %em_copyfile(infref=adjref, outfref=flowref, append=Y);
16811 +      filename adjref;
16812 +   %end;
16814 +   /* LEAF */
16815 +   %if "&EM_PROPERTY_LEAFID" eq "Y" %then %do;
16816 +      data _null_;
16817 +        file flowref mod;
16818 +        put 'drop _LEAF_;';
16819 +      run;
16821 +      data _null_;
16822 +        file pubref mod;
16823 +        put 'drop _LEAF_;';
16824 +      run;
16826 +   %end;
16828 +   filename flowref;
16829 +   filename pubref;
16831 +   /* em_metachange code */
16832 +   %if "&EM_PROPERTY_LEAFID" eq "Y" %then %do;
16833 +     %EM_METACHANGE(name=_NODE_, role=&EM_PROPERTY_NODEROLE, LEVEL=NOMINAL);
16834 +   %end;
16836 +   /* variable selection based on importance stat    */
16837 +   %if "&EM_PROPERTY_VARSELECTION" eq "Y" %then %do;
16838 +     %EM_GETNAME(key=OUTIMPORT, type=DATA);
16839 +     %let dsid = %sysfunc(open(&EM_USER_OUTIMPORT(where=(IMPORTANCE<0.05))));
16840 +     %let varnum = %sysfunc(varnum(&dsid, NAME));
16841 +     %let obs = %sysfunc(fetch(&dsid));
16842 +     %do %while(&obs=0);
16843 +       %let temp = %nrbquote(%sysfunc(getvarc(&dsid, &varnum)));
16844 +       %let varname = %nrbquote(%sysfunc(tranwrd(&temp,  %str(%"),"")));
16845 +       %EM_METACHANGE(name=&varname, role=REJECTED);
16846 +       %let obs = %sysfunc(fetch(&dsid));
16847 +     %end;
16848 +     %if &dsid %then %let dsid=%sysfunc(close(&dsid));
16849 +   %end;
16851 +   /* set Q_ varaibles to role of ASSESS when in the presense of prior probabilities */
16852 +   %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
16853 +    %let tree_pred_vars = ;
16854 +    %let tree_pred_lvl =;
16855 +    %let numpred= 0;
16857 +    data _null_;
16858 +     set &EM_DEC_DECMETA(where=(_TYPE_="PREDICTED")) end=eof;
16859 +     call symput('tree_pred_vars'!!strip(put(_N_, BEST.)), strip(VARIABLE));
16860 +     call symput('tree_pred_lvl'!!strip(put(_N_, BEST.)), strip(LEVEL));
16861 +     if eof then
16862 +       call symput('numpred', strip(put(_N_, BEST.)));
16863 +    run;
16864 +   %end;
16866 +   %if &numpred ne 0 %then %do;
16867 +    %do i=1 %to &numpred;
16868 +      %let qpred = Q%substr(&&tree_pred_vars&i,2);
16869 +      %EM_METACHANGE(name=&qpred, role=ASSESS);
16870 +    %end;
16871 +   %end;
16873 +   /* determine if multiple targets will be processed */
16874 +   %let em_tree_multipleTargets=N;
16875 +   %let em_tree_numTarget=1;
16876 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
16877 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
16878 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
16879 +         %let em_tree_multipleTargets=N;
16880 +      %end;
16881 +      %else %do;
16882 +        data _null_;
16883 +          set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
16884 +          if eof then
16885 +            call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
16886 +        run;
16888 +        %if &em_tree_numTarget gt 1 %then %do;
16889 +           %let em_tree_multipleTargets=Y;
16890 +        %end;
16891 +     %end;
16892 +   %end;
16894 +   /* need to include this code to do the %em_report for OUTIMPORT here instead of in Report code so _loop data set is created when group processing */
16895 +   %if "&em_tree_multipleTargets" eq "N" %then %do;
16897 +      /* variable importance */
16898 +      %EM_GETNAME(key=OUTIMPORT, type=DATA);
16899 +      %if %sysfunc(exist(&EM_USER_OUTIMPORT)) eq 1 %then %do;
16901 +         %let validexist=0;
16902 +         %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)))) %then %do;
16903 +           %let validexist=1;
16904 +         %end;
16906 +         /* determine if vars exists - properties could indicate they are they but freeze=Y would mean the node wasn't retrained */
16907 +         /* and the columns may not be generated                                                                                 */
16908 +         %let em_tree_cvexists=;
16909 +         %let em_tree_surrexists=.;
16910 +         data _null_;
16911 +            set &EM_USER_OUTIMPORT (obs=2) end=eof;
16912 +            if eof then do ;
16913 +               call symput("em_tree_cvexists" , strip(put(cvimportance,best.))) ;
16914 +               call symput("em_tree_surrexists", strip(put(nsurrogates, best.)));
16915 +            end;
16916 +         run;
16918 +         data &EM_USER_OUTIMPORT;
16919 +            set &EM_USER_OUTIMPORT;
16921 +            /* format columns based on Precison value specified */
16922 +            format importance 15.&EM_PROPERTY_PRECISION
16923 +                 %if &validexist %then %do;
16924 +                   vimportance ratio 15.&EM_PROPERTY_PRECISION
16925 +                 %end;
16926 +                 %if "&EM_TREE_CVEXISTS" ne "." %then %do;
16927 +                   cvimportance vimportance ratio 15.&EM_PROPERTY_PRECISION
16928 +                 %end;
16929 +            ;
16930 +            label  NAME       = "%sysfunc(sasmsg(sashelp.dmine, meta_name_vlabel, noquote))"
16931 +                 LABEL        = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, noquote))"
16932 +                 NRULES       = "%sysfunc(sasmsg(sashelp.dmine, rpt_nrules_vlabel, noquote))"
16933 +                 IMPORTANCE   = "%sysfunc(sasmsg(sashelp.dmine, rpt_importance_vlabel, noquote))"
16934 +                 %if "&em_tree_surrexists" ne "" %then %do;
16935 +                   NSURROGATES  = "%sysfunc(sasmsg(sashelp.dmine, rpt_nsurrogates_vlabel, noquote))"
16936 +                 %end;
16937 +                 %if &validexist %then %do;
16938 +                   VIMPORTANCE = "%sysfunc(sasmsg(sashelp.dmine, rpt_vimportance_vlabel, noquote))"
16939 +                   RATIO       = "%sysfunc(sasmsg(sashelp.dmine, rpt_ratio_vlabel, noquote))"
16940 +                 %end;
16941 +                 %if "&EM_TREE_CVEXISTS" ne "" %then %do;
16942 +                   VIMPORTANCE = "%sysfunc(sasmsg(sashelp.dmine, rpt_vimportance_vlabel, noquote))"
16943 +                   CVIMPORTANCE =  "%sysfunc(sasmsg(sashelp.dmine, rpt_cvimport_vlabel, noquote))"
16944 +                   CVRULES= "%sysfunc(sasmsg(sashelp.dmine, rpt_cvrules_vlabel, noquote))"
16945 +                   RATIO = "%sysfunc(sasmsg(sashelp.dmine, rpt_ratio_vlabel, noquote))"
16946 +                 %end;
16947 +            ;
16948 +         run;
16950 +         %EM_REPORT(key=OUTIMPORT, viewtype=DATA, block=MODEL, description=IMPORTANCE, autodisplay=N);
16951 +      %end;
16952 +   %end;
16954 +   %doendm:
16955 +%mend em_tree_score;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: The file FLOWREF is:
      Filename=P:\DMBI_Project\Twitter_Insta_Content_Engineering\Workspaces\EMWS5\Tree\EMFLOWSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=0,
      Last Modified=06May2020:18:33:33,
      Create Time=06May2020:18:33:33
 
NOTE: 463 records were written to the file FLOWREF.
      The minimum record length was 1.
      The maximum record length was 65.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: The file PUBREF is:
      Filename=P:\DMBI_Project\Twitter_Insta_Content_Engineering\Workspaces\EMWS5\Tree\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=0,
      Last Modified=06May2020:18:33:33,
      Create Time=06May2020:18:33:33
 
NOTE: 458 records were written to the file PUBREF.
      The minimum record length was 1.
      The maximum record length was 65.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
NOTE: Fileref TREEFLOW has been deassigned.
NOTE: Fileref TREEPUB has been deassigned.
 
NOTE: There were 0 observations read from the data set EMWS5.TREE_TOTAL_ACTIONS_DM.
      WHERE _TYPE_='DECPRIOR';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: The file FLOWREF is:
      Filename=P:\DMBI_Project\Twitter_Insta_Content_Engineering\Workspaces\EMWS5\Tree\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=17807,
      Last Modified=06May2020:18:33:33,
      Create Time=06May2020:18:33:33
 
NOTE: 1 record was written to the file FLOWREF.
      The minimum record length was 12.
      The maximum record length was 12.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: The file PUBREF is:
      Filename=P:\DMBI_Project\Twitter_Insta_Content_Engineering\Workspaces\EMWS5\Tree\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=17599,
      Last Modified=06May2020:18:33:33,
      Create Time=06May2020:18:33:33
 
NOTE: 1 record was written to the file PUBREF.
      The minimum record length was 12.
      The maximum record length was 12.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.00 seconds
 
 
NOTE: Fileref FLOWREF has been deassigned.
NOTE: Fileref PUBREF has been deassigned.
 
NOTE: The data set WORK.EM_METACHANGE has 1 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 2 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 2 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 3 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 3 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 4 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 4 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 5 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 5 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 6 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 6 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 7 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 7 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 8 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 8 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 9 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 9 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 10 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 10 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 11 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 11 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 12 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 12 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 13 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 13 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 14 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 14 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 15 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 15 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 16 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 16 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 17 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 17 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 18 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 18 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 19 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 19 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 20 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 20 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 21 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 21 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 22 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 22 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 23 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 23 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 24 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 24 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 25 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 25 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 26 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 26 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 27 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 27 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 28 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 28 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 29 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 29 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 30 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 30 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 31 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 31 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 32 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 32 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 33 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 33 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 34 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 34 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 35 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 35 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 36 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 36 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 37 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 37 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 38 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 38 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 39 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 39 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 40 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 40 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 41 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 41 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 42 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 42 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 43 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 43 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 44 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 44 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 45 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 45 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 46 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 46 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 47 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 47 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 48 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 48 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 49 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 49 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 50 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 50 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 51 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 51 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 52 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 52 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 53 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 53 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 54 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 54 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 55 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 55 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 56 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 56 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 57 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 57 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 58 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 58 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 59 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 59 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 60 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 60 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 61 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 61 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 62 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 62 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 63 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 63 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 64 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 64 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 65 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 65 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 66 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 66 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 67 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 67 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 68 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 68 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 69 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 69 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 70 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 70 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 71 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 71 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 72 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 72 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 73 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS5.TREE_TOTAL_ACTIONS_DM.
      WHERE _TYPE_='PREDICTED';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 73 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 74 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Variable cvimportance is uninitialized.
NOTE: Variable nsurrogates is uninitialized.
NOTE: There were 2 observations read from the data set EMWS5.TREE_OUTIMPORT.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Variable NSURROGATES is uninitialized.
NOTE: Variable CVIMPORTANCE is uninitialized.
NOTE: Variable CVRULES is uninitialized.
NOTE: There were 73 observations read from the data set EMWS5.TREE_OUTIMPORT.
NOTE: The data set EMWS5.TREE_OUTIMPORT has 73 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.11 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
 
 
16956
16957  *------------------------------------------------------------*;
16958  * End SCORE: Tree;
16959  *------------------------------------------------------------*;
 
16960  proc sort data=WORK.EM_METACHANGE;
16961  by key uname;
16962  run;
 
NOTE: There were 74 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 74 observations and 9 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
16963  filename x "P:\DMBI_Project\Twitter_Insta_Content_Engineering\Workspaces\EMWS5\Tree\CDELTA_TRAIN.sas";
16964  data _null_;
16965  file x;
16966  put 'if upcase(NAME) = "CHARACTER_COUNT" then do;';
16967  put 'ROLE = "REJECTED";';
16968  put 'end;';
16969  put 'else ';
16970  put 'if upcase(NAME) = "Q_TOTAL_ACTIONS" then do;';
16971  put 'ROLE = "ASSESS";';
16972  put 'end;';
16973  put 'else ';
16974  put 'if upcase(NAME) = "RETWEET_COUNT" then do;';
16975  put 'ROLE = "REJECTED";';
16976  put 'end;';
16977  put 'else ';
16978  put 'if upcase(NAME) = "TEXTCLUSTER_SVD1" then do;';
16979  put 'ROLE = "REJECTED";';
16980  put 'end;';
16981  put 'else ';
16982  put 'if upcase(NAME) = "TEXTCLUSTER_SVD10" then do;';
16983  put 'ROLE = "REJECTED";';
16984  put 'end;';
16985  put 'else ';
16986  put 'if upcase(NAME) = "TEXTCLUSTER_SVD11" then do;';
16987  put 'ROLE = "REJECTED";';
16988  put 'end;';
16989  put 'else ';
16990  put 'if upcase(NAME) = "TEXTCLUSTER_SVD12" then do;';
16991  put 'ROLE = "REJECTED";';
16992  put 'end;';
16993  put 'else ';
16994  put 'if upcase(NAME) = "TEXTCLUSTER_SVD13" then do;';
16995  put 'ROLE = "REJECTED";';
16996  put 'end;';
16997  put 'else ';
16998  put 'if upcase(NAME) = "TEXTCLUSTER_SVD14" then do;';
16999  put 'ROLE = "REJECTED";';
17000  put 'end;';
17001  put 'else ';
17002  put 'if upcase(NAME) = "TEXTCLUSTER_SVD15" then do;';
17003  put 'ROLE = "REJECTED";';
17004  put 'end;';
17005  put 'else ';
17006  put 'if upcase(NAME) = "TEXTCLUSTER_SVD16" then do;';
17007  put 'ROLE = "REJECTED";';
17008  put 'end;';
17009  put 'else ';
17010  put 'if upcase(NAME) = "TEXTCLUSTER_SVD17" then do;';
17011  put 'ROLE = "REJECTED";';
17012  put 'end;';
17013  put 'else ';
17014  put 'if upcase(NAME) = "TEXTCLUSTER_SVD18" then do;';
17015  put 'ROLE = "REJECTED";';
17016  put 'end;';
17017  put 'else ';
17018  put 'if upcase(NAME) = "TEXTCLUSTER_SVD19" then do;';
17019  put 'ROLE = "REJECTED";';
17020  put 'end;';
17021  put 'else ';
17022  put 'if upcase(NAME) = "TEXTCLUSTER_SVD2" then do;';
17023  put 'ROLE = "REJECTED";';
17024  put 'end;';
17025  put 'else ';
17026  put 'if upcase(NAME) = "TEXTCLUSTER_SVD20" then do;';
17027  put 'ROLE = "REJECTED";';
17028  put 'end;';
17029  put 'else ';
17030  put 'if upcase(NAME) = "TEXTCLUSTER_SVD21" then do;';
17031  put 'ROLE = "REJECTED";';
17032  put 'end;';
17033  put 'else ';
17034  put 'if upcase(NAME) = "TEXTCLUSTER_SVD22" then do;';
17035  put 'ROLE = "REJECTED";';
17036  put 'end;';
17037  put 'else ';
17038  put 'if upcase(NAME) = "TEXTCLUSTER_SVD23" then do;';
17039  put 'ROLE = "REJECTED";';
17040  put 'end;';
17041  put 'else ';
17042  put 'if upcase(NAME) = "TEXTCLUSTER_SVD24" then do;';
17043  put 'ROLE = "REJECTED";';
17044  put 'end;';
17045  put 'else ';
17046  put 'if upcase(NAME) = "TEXTCLUSTER_SVD25" then do;';
17047  put 'ROLE = "REJECTED";';
17048  put 'end;';
17049  put 'else ';
17050  put 'if upcase(NAME) = "TEXTCLUSTER_SVD26" then do;';
17051  put 'ROLE = "REJECTED";';
17052  put 'end;';
17053  put 'else ';
17054  put 'if upcase(NAME) = "TEXTCLUSTER_SVD27" then do;';
17055  put 'ROLE = "REJECTED";';
17056  put 'end;';
17057  put 'else ';
17058  put 'if upcase(NAME) = "TEXTCLUSTER_SVD28" then do;';
17059  put 'ROLE = "REJECTED";';
17060  put 'end;';
17061  put 'else ';
17062  put 'if upcase(NAME) = "TEXTCLUSTER_SVD29" then do;';
17063  put 'ROLE = "REJECTED";';
17064  put 'end;';
17065  put 'else ';
17066  put 'if upcase(NAME) = "TEXTCLUSTER_SVD3" then do;';
17067  put 'ROLE = "REJECTED";';
17068  put 'end;';
17069  put 'else ';
17070  put 'if upcase(NAME) = "TEXTCLUSTER_SVD30" then do;';
17071  put 'ROLE = "REJECTED";';
17072  put 'end;';
17073  put 'else ';
17074  put 'if upcase(NAME) = "TEXTCLUSTER_SVD31" then do;';
17075  put 'ROLE = "REJECTED";';
17076  put 'end;';
17077  put 'else ';
17078  put 'if upcase(NAME) = "TEXTCLUSTER_SVD32" then do;';
17079  put 'ROLE = "REJECTED";';
17080  put 'end;';
17081  put 'else ';
17082  put 'if upcase(NAME) = "TEXTCLUSTER_SVD33" then do;';
17083  put 'ROLE = "REJECTED";';
17084  put 'end;';
17085  put 'else ';
17086  put 'if upcase(NAME) = "TEXTCLUSTER_SVD34" then do;';
17087  put 'ROLE = "REJECTED";';
17088  put 'end;';
17089  put 'else ';
17090  put 'if upcase(NAME) = "TEXTCLUSTER_SVD35" then do;';
17091  put 'ROLE = "REJECTED";';
17092  put 'end;';
17093  put 'else ';
17094  put 'if upcase(NAME) = "TEXTCLUSTER_SVD36" then do;';
17095  put 'ROLE = "REJECTED";';
17096  put 'end;';
17097  put 'else ';
17098  put 'if upcase(NAME) = "TEXTCLUSTER_SVD37" then do;';
17099  put 'ROLE = "REJECTED";';
17100  put 'end;';
17101  put 'else ';
17102  put 'if upcase(NAME) = "TEXTCLUSTER_SVD38" then do;';
17103  put 'ROLE = "REJECTED";';
17104  put 'end;';
17105  put 'else ';
17106  put 'if upcase(NAME) = "TEXTCLUSTER_SVD39" then do;';
17107  put 'ROLE = "REJECTED";';
17108  put 'end;';
17109  put 'else ';
17110  put 'if upcase(NAME) = "TEXTCLUSTER_SVD4" then do;';
17111  put 'ROLE = "REJECTED";';
17112  put 'end;';
17113  put 'else ';
17114  put 'if upcase(NAME) = "TEXTCLUSTER_SVD40" then do;';
17115  put 'ROLE = "REJECTED";';
17116  put 'end;';
17117  put 'else ';
17118  put 'if upcase(NAME) = "TEXTCLUSTER_SVD41" then do;';
17119  put 'ROLE = "REJECTED";';
17120  put 'end;';
17121  put 'else ';
17122  put 'if upcase(NAME) = "TEXTCLUSTER_SVD42" then do;';
17123  put 'ROLE = "REJECTED";';
17124  put 'end;';
17125  put 'else ';
17126  put 'if upcase(NAME) = "TEXTCLUSTER_SVD43" then do;';
17127  put 'ROLE = "REJECTED";';
17128  put 'end;';
17129  put 'else ';
17130  put 'if upcase(NAME) = "TEXTCLUSTER_SVD44" then do;';
17131  put 'ROLE = "REJECTED";';
17132  put 'end;';
17133  put 'else ';
17134  put 'if upcase(NAME) = "TEXTCLUSTER_SVD45" then do;';
17135  put 'ROLE = "REJECTED";';
17136  put 'end;';
17137  put 'else ';
17138  put 'if upcase(NAME) = "TEXTCLUSTER_SVD46" then do;';
17139  put 'ROLE = "REJECTED";';
17140  put 'end;';
17141  put 'else ';
17142  put 'if upcase(NAME) = "TEXTCLUSTER_SVD47" then do;';
17143  put 'ROLE = "REJECTED";';
17144  put 'end;';
17145  put 'else ';
17146  put 'if upcase(NAME) = "TEXTCLUSTER_SVD48" then do;';
17147  put 'ROLE = "REJECTED";';
17148  put 'end;';
17149  put 'else ';
17150  put 'if upcase(NAME) = "TEXTCLUSTER_SVD49" then do;';
17151  put 'ROLE = "REJECTED";';
17152  put 'end;';
17153  put 'else ';
17154  put 'if upcase(NAME) = "TEXTCLUSTER_SVD5" then do;';
17155  put 'ROLE = "REJECTED";';
17156  put 'end;';
17157  put 'else ';
17158  put 'if upcase(NAME) = "TEXTCLUSTER_SVD50" then do;';
17159  put 'ROLE = "REJECTED";';
17160  put 'end;';
17161  put 'else ';
17162  put 'if upcase(NAME) = "TEXTCLUSTER_SVD51" then do;';
17163  put 'ROLE = "REJECTED";';
17164  put 'end;';
17165  put 'else ';
17166  put 'if upcase(NAME) = "TEXTCLUSTER_SVD52" then do;';
17167  put 'ROLE = "REJECTED";';
17168  put 'end;';
17169  put 'else ';
17170  put 'if upcase(NAME) = "TEXTCLUSTER_SVD53" then do;';
17171  put 'ROLE = "REJECTED";';
17172  put 'end;';
17173  put 'else ';
17174  put 'if upcase(NAME) = "TEXTCLUSTER_SVD54" then do;';
17175  put 'ROLE = "REJECTED";';
17176  put 'end;';
17177  put 'else ';
17178  put 'if upcase(NAME) = "TEXTCLUSTER_SVD6" then do;';
17179  put 'ROLE = "REJECTED";';
17180  put 'end;';
17181  put 'else ';
17182  put 'if upcase(NAME) = "TEXTCLUSTER_SVD7" then do;';
17183  put 'ROLE = "REJECTED";';
17184  put 'end;';
17185  put 'else ';
17186  put 'if upcase(NAME) = "TEXTCLUSTER_SVD8" then do;';
17187  put 'ROLE = "REJECTED";';
17188  put 'end;';
17189  put 'else ';
17190  put 'if upcase(NAME) = "TEXTCLUSTER_SVD9" then do;';
17191  put 'ROLE = "REJECTED";';
17192  put 'end;';
17193  put 'else ';
17194  put 'if upcase(NAME) = "TEXTTOPIC_RAW1" then do;';
17195  put 'ROLE = "REJECTED";';
17196  put 'end;';
17197  put 'else ';
17198  put 'if upcase(NAME) = "TEXTTOPIC_RAW10" then do;';
17199  put 'ROLE = "REJECTED";';
17200  put 'end;';
17201  put 'else ';
17202  put 'if upcase(NAME) = "TEXTTOPIC_RAW11" then do;';
17203  put 'ROLE = "REJECTED";';
17204  put 'end;';
17205  put 'else ';
17206  put 'if upcase(NAME) = "TEXTTOPIC_RAW12" then do;';
17207  put 'ROLE = "REJECTED";';
17208  put 'end;';
17209  put 'else ';
17210  put 'if upcase(NAME) = "TEXTTOPIC_RAW13" then do;';
17211  put 'ROLE = "REJECTED";';
17212  put 'end;';
17213  put 'else ';
17214  put 'if upcase(NAME) = "TEXTTOPIC_RAW14" then do;';
17215  put 'ROLE = "REJECTED";';
17216  put 'end;';
17217  put 'else ';
17218  put 'if upcase(NAME) = "TEXTTOPIC_RAW15" then do;';
17219  put 'ROLE = "REJECTED";';
17220  put 'end;';
17221  put 'else ';
17222  put 'if upcase(NAME) = "TEXTTOPIC_RAW2" then do;';
17223  put 'ROLE = "REJECTED";';
17224  put 'end;';
17225  put 'else ';
17226  put 'if upcase(NAME) = "TEXTTOPIC_RAW3" then do;';
17227  put 'ROLE = "REJECTED";';
17228  put 'end;';
17229  put 'else ';
17230  put 'if upcase(NAME) = "TEXTTOPIC_RAW4" then do;';
17231  put 'ROLE = "REJECTED";';
17232  put 'end;';
17233  put 'else ';
17234  put 'if upcase(NAME) = "TEXTTOPIC_RAW5" then do;';
17235  put 'ROLE = "REJECTED";';
17236  put 'end;';
17237  put 'else ';
17238  put 'if upcase(NAME) = "TEXTTOPIC_RAW6" then do;';
17239  put 'ROLE = "REJECTED";';
17240  put 'end;';
17241  put 'else ';
17242  put 'if upcase(NAME) = "TEXTTOPIC_RAW7" then do;';
17243  put 'ROLE = "REJECTED";';
17244  put 'end;';
17245  put 'else ';
17246  put 'if upcase(NAME) = "TEXTTOPIC_RAW8" then do;';
17247  put 'ROLE = "REJECTED";';
17248  put 'end;';
17249  put 'else ';
17250  put 'if upcase(NAME) = "TEXTTOPIC_RAW9" then do;';
17251  put 'ROLE = "REJECTED";';
17252  put 'end;';
17253  put 'else ';
17254  put 'if upcase(NAME) = "TYPE" then do;';
17255  put 'ROLE = "REJECTED";';
17256  put 'end;';
17257  put 'else ';
17258  put 'if upcase(NAME) = "_NODE_" then do;';
17259  put 'ROLE = "SEGMENT";';
17260  put 'LEVEL = "NOMINAL";';
17261  put 'end;';
17262  run;
 
NOTE: The file X is:
      Filename=P:\DMBI_Project\Twitter_Insta_Content_Engineering\Workspaces\EMWS5\Tree\CDELTA_TRAIN.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=06May2020:18:33:35,
      Create Time=06May2020:18:03:06
 
NOTE: 296 records were written to the file X.
      The minimum record length was 4.
      The maximum record length was 46.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
17263  filename x;
NOTE: Fileref X has been deassigned.
 
17264  filename emflow "P:\DMBI_Project\Twitter_Insta_Content_Engineering\Workspaces\EMWS5\Tree\EMFLOWSCORE.sas";
17265  *------------------------------------------------------------*;
17266  * Tree: Scoring DATA data;
17267  *------------------------------------------------------------*;
17268  data EMWS5.Tree_TRAIN
17269  / view=EMWS5.Tree_TRAIN
17270  ;
17271  set EMWS5.TextTopic_TRAIN
17272  ;
17273  %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file P:\DMBI_Project\Twitter_Insta_Content_Engineering\Workspaces\EMWS5\Tree\EMFLOWSCORE.sas.
17274 +****************************************************************;
17275 +******             DECISION TREE SCORING CODE             ******;
17276 +****************************************************************;
17277 +
17278 +******         LENGTHS OF NEW CHARACTER VARIABLES         ******;
17279 +LENGTH _WARN_  $    4;
17280 +
17281 +******              LABELS FOR NEW VARIABLES              ******;
17282 +label _NODE_ = 'Node' ;
17283 +label _LEAF_ = 'Leaf' ;
17284 +label P_Total_Actions = 'Predicted: Total_Actions' ;
17285 +label V_Total_Actions = 'Validated: Total_Actions' ;
17286 +label R_Total_Actions = 'Residual: Total_Actions' ;
17287 +label _WARN_ = 'Warnings' ;
17288 +
17289 +
17290 +
17291 +******             ASSIGN OBSERVATION TO NODE             ******;
17292 +IF  NOT MISSING(Like_Count ) AND
17293 +                 26244 <= Like_Count  THEN DO;
17294 +  IF  NOT MISSING(Like_Count ) AND
17295 +                   61279 <= Like_Count  THEN DO;
17296 +    IF  NOT MISSING(Like_Count ) AND
17297 +                   94861.5 <= Like_Count  THEN DO;
17298 +      _NODE_  =                   15;
17299 +      _LEAF_  =                   49;
17300 +      P_Total_Actions  =     158441.857142857;
17301 +      V_Total_Actions  =               176878;
17302 +      END;
17303 +    ELSE DO;
17304 +      IF  NOT MISSING(Like_Count ) AND
17305 +                     73445.5 <= Like_Count  THEN DO;
17306 +        _NODE_  =                   29;
17307 +        _LEAF_  =                   48;
17308 +        P_Total_Actions  =     102068.222222222;
17309 +        V_Total_Actions  =               100576;
17310 +        END;
17311 +      ELSE DO;
17312 +        IF  NOT MISSING(TextCluster_SVD39 ) AND
17313 +          TextCluster_SVD39  <    -0.01650754330562 THEN DO;
17314 +          _NODE_  =                   54;
17315 +          _LEAF_  =                   45;
17316 +          P_Total_Actions  =     86650.8571428571;
17317 +          V_Total_Actions  =              80876.5;
17318 +          END;
17319 +        ELSE DO;
17320 +          IF  NOT MISSING(Like_Count ) AND
17321 +            Like_Count  <              65336.5 THEN DO;
17322 +            _NODE_  =                  104;
17323 +            _LEAF_  =                   46;
17324 +            P_Total_Actions  =                76800;
17325 +            V_Total_Actions  =                76985;
17326 +            END;
17327 +          ELSE DO;
17328 +            _NODE_  =                  105;
17329 +            _LEAF_  =                   47;
17330 +            P_Total_Actions  =                83134;
17331 +            V_Total_Actions  =                78421;
17332 +            END;
17333 +          END;
17334 +        END;
17335 +      END;
17336 +    END;
17337 +  ELSE DO;
17338 +    IF  NOT MISSING(Like_Count ) AND
17339 +                   42625.5 <= Like_Count  THEN DO;
17340 +      IF  NOT MISSING(Like_Count ) AND
17341 +                     50758.5 <= Like_Count  THEN DO;
17342 +        IF  NOT MISSING(Like_Count ) AND
17343 +          Like_Count  <              54811.5 THEN DO;
17344 +          _NODE_  =                   52;
17345 +          _LEAF_  =                   42;
17346 +          P_Total_Actions  =     64541.7272727272;
17347 +          V_Total_Actions  =     65511.7142857142;
17348 +          END;
17349 +        ELSE DO;
17350 +          IF  NOT MISSING(Retweet_Count ) AND
17351 +            Retweet_Count  <                 9768 THEN DO;
17352 +            _NODE_  =                  102;
17353 +            _LEAF_  =                   43;
17354 +            P_Total_Actions  =              65888.6;
17355 +            V_Total_Actions  =              68721.5;
17356 +            END;
17357 +          ELSE DO;
17358 +            _NODE_  =                  103;
17359 +            _LEAF_  =                   44;
17360 +            P_Total_Actions  =     71534.9411764706;
17361 +            V_Total_Actions  =     73987.2857142857;
17362 +            END;
17363 +          END;
17364 +        END;
17365 +      ELSE DO;
17366 +        IF  NOT MISSING(Like_Count ) AND
17367 +                       47978.5 <= Like_Count  THEN DO;
17368 +          IF  NOT MISSING(Retweet_Count ) AND
17369 +                         10851.5 <= Retweet_Count  THEN DO;
17370 +            _NODE_  =                   99;
17371 +            _LEAF_  =                   41;
17372 +            P_Total_Actions  =                62895;
17373 +            V_Total_Actions  =                66275;
17374 +            END;
17375 +          ELSE DO;
17376 +            _NODE_  =                   98;
17377 +            _LEAF_  =                   40;
17378 +            P_Total_Actions  =                58360;
17379 +            V_Total_Actions  =                58556;
17380 +            END;
17381 +          END;
17382 +        ELSE DO;
17383 +          _NODE_  =                   50;
17384 +          _LEAF_  =                   39;
17385 +          P_Total_Actions  =     54199.6551724138;
17386 +          V_Total_Actions  =     55754.8333333333;
17387 +          END;
17388 +        END;
17389 +      END;
17390 +    ELSE DO;
17391 +      IF  NOT MISSING(Like_Count ) AND
17392 +                       32578 <= Like_Count  THEN DO;
17393 +        IF  NOT MISSING(Like_Count ) AND
17394 +                         36968 <= Like_Count  THEN DO;
17395 +          _NODE_  =                   49;
17396 +          _LEAF_  =                   38;
17397 +          P_Total_Actions  =     47490.1282051282;
17398 +          V_Total_Actions  =     46893.8235294117;
17399 +          END;
17400 +        ELSE DO;
17401 +          IF  NOT MISSING(Retweet_Count ) AND
17402 +                          7815.5 <= Retweet_Count  THEN DO;
17403 +            _NODE_  =                   93;
17404 +            _LEAF_  =                   37;
17405 +            P_Total_Actions  =              44662.4;
17406 +            V_Total_Actions  =     43629.6666666666;
17407 +            END;
17408 +          ELSE DO;
17409 +            _NODE_  =                   92;
17410 +            _LEAF_  =                   36;
17411 +            P_Total_Actions  =     40920.8214285714;
17412 +            V_Total_Actions  =     41169.5714285714;
17413 +            END;
17414 +          END;
17415 +        END;
17416 +      ELSE DO;
17417 +        IF  NOT MISSING(Like_Count ) AND
17418 +                       29255.5 <= Like_Count  THEN DO;
17419 +          IF  NOT MISSING(Retweet_Count ) AND
17420 +                            6613 <= Retweet_Count  THEN DO;
17421 +            _NODE_  =                   91;
17422 +            _LEAF_  =                   35;
17423 +            P_Total_Actions  =             39058.25;
17424 +            V_Total_Actions  =     37837.3333333333;
17425 +            END;
17426 +          ELSE DO;
17427 +            _NODE_  =                   90;
17428 +            _LEAF_  =                   34;
17429 +            P_Total_Actions  =     36632.7619047619;
17430 +            V_Total_Actions  =     35467.7777777777;
17431 +            END;
17432 +          END;
17433 +        ELSE DO;
17434 +          IF  NOT MISSING(Retweet_Count ) AND
17435 +                          5334.5 <= Retweet_Count  THEN DO;
17436 +            _NODE_  =                   89;
17437 +            _LEAF_  =                   33;
17438 +            P_Total_Actions  =     34467.4583333333;
17439 +            V_Total_Actions  =             33810.25;
17440 +            END;
17441 +          ELSE DO;
17442 +            _NODE_  =                   88;
17443 +            _LEAF_  =                   32;
17444 +            P_Total_Actions  =     32084.9285714285;
17445 +            V_Total_Actions  =                31388;
17446 +            END;
17447 +          END;
17448 +        END;
17449 +      END;
17450 +    END;
17451 +  END;
17452 +ELSE DO;
17453 +  IF  NOT MISSING(Like_Count ) AND
17454 +                   10555 <= Like_Count  THEN DO;
17455 +    IF  NOT MISSING(Like_Count ) AND
17456 +                   17187.5 <= Like_Count  THEN DO;
17457 +      IF  NOT MISSING(Like_Count ) AND
17458 +                     21711.5 <= Like_Count  THEN DO;
17459 +        IF  NOT MISSING(Like_Count ) AND
17460 +                       24117.5 <= Like_Count  THEN DO;
17461 +          IF  NOT MISSING(Retweet_Count ) AND
17462 +                            5562 <= Retweet_Count  THEN DO;
17463 +            _NODE_  =                   87;
17464 +            _LEAF_  =                   31;
17465 +            P_Total_Actions  =              31488.5;
17466 +            V_Total_Actions  =     31188.3333333333;
17467 +            END;
17468 +          ELSE DO;
17469 +            _NODE_  =                   86;
17470 +            _LEAF_  =                   30;
17471 +            P_Total_Actions  =          29660.96875;
17472 +            V_Total_Actions  =                29453;
17473 +            END;
17474 +          END;
17475 +        ELSE DO;
17476 +          IF  NOT MISSING(Retweet_Count ) AND
17477 +                            4904 <= Retweet_Count  THEN DO;
17478 +            _NODE_  =                   85;
17479 +            _LEAF_  =                   29;
17480 +            P_Total_Actions  =     28146.0666666666;
17481 +            V_Total_Actions  =              28982.2;
17482 +            END;
17483 +          ELSE DO;
17484 +            _NODE_  =                   84;
17485 +            _LEAF_  =                   28;
17486 +            P_Total_Actions  =          26633.65625;
17487 +            V_Total_Actions  =     26452.1538461538;
17488 +            END;
17489 +          END;
17490 +        END;
17491 +      ELSE DO;
17492 +        IF  NOT MISSING(Like_Count ) AND
17493 +          Like_Count  <              18993.5 THEN DO;
17494 +          _NODE_  =                   42;
17495 +          _LEAF_  =                   25;
17496 +          P_Total_Actions  =     21422.7540983606;
17497 +          V_Total_Actions  =     21518.3636363636;
17498 +          END;
17499 +        ELSE DO;
17500 +          IF  NOT MISSING(Like_Count ) AND
17501 +                         20317.5 <= Like_Count  THEN DO;
17502 +            _NODE_  =                   83;
17503 +            _LEAF_  =                   27;
17504 +            P_Total_Actions  =     24651.3225806451;
17505 +            V_Total_Actions  =            24647.375;
17506 +            END;
17507 +          ELSE DO;
17508 +            _NODE_  =                   82;
17509 +            _LEAF_  =                   26;
17510 +            P_Total_Actions  =     23186.9428571428;
17511 +            V_Total_Actions  =     22820.5454545454;
17512 +            END;
17513 +          END;
17514 +        END;
17515 +      END;
17516 +    ELSE DO;
17517 +      IF  NOT MISSING(Like_Count ) AND
17518 +                     13795.5 <= Like_Count  THEN DO;
17519 +        IF  NOT MISSING(Like_Count ) AND
17520 +                       15594.5 <= Like_Count  THEN DO;
17521 +          IF  NOT MISSING(Retweet_Count ) AND
17522 +                            3274 <= Retweet_Count  THEN DO;
17523 +            _NODE_  =                   79;
17524 +            _LEAF_  =                   24;
17525 +            P_Total_Actions  =     20228.3181818181;
17526 +            V_Total_Actions  =              19983.2;
17527 +            END;
17528 +          ELSE DO;
17529 +            _NODE_  =                   78;
17530 +            _LEAF_  =                   23;
17531 +            P_Total_Actions  =           18886.5625;
17532 +            V_Total_Actions  =     18883.8571428571;
17533 +            END;
17534 +          END;
17535 +        ELSE DO;
17536 +          IF  NOT MISSING(Retweet_Count ) AND
17537 +                          2779.5 <= Retweet_Count  THEN DO;
17538 +            _NODE_  =                   77;
17539 +            _LEAF_  =                   22;
17540 +            P_Total_Actions  =                18106;
17541 +            V_Total_Actions  =     18179.3636363636;
17542 +            END;
17543 +          ELSE DO;
17544 +            _NODE_  =                   76;
17545 +            _LEAF_  =                   21;
17546 +            P_Total_Actions  =     16885.9183673469;
17547 +            V_Total_Actions  =              16810.2;
17548 +            END;
17549 +          END;
17550 +        END;
17551 +      ELSE DO;
17552 +        IF  NOT MISSING(Like_Count ) AND
17553 +                         12214 <= Like_Count  THEN DO;
17554 +          IF  NOT MISSING(Retweet_Count ) AND
17555 +            Retweet_Count  <                 2136 THEN DO;
17556 +            _NODE_  =                   74;
17557 +            _LEAF_  =                   19;
17558 +            P_Total_Actions  =     14740.9756097561;
17559 +            V_Total_Actions  =     14768.6666666666;
17560 +            END;
17561 +          ELSE DO;
17562 +            _NODE_  =                   75;
17563 +            _LEAF_  =                   20;
17564 +            P_Total_Actions  =     15928.8620689655;
17565 +            V_Total_Actions  =     15902.6153846153;
17566 +            END;
17567 +          END;
17568 +        ELSE DO;
17569 +          IF  NOT MISSING(Retweet_Count ) AND
17570 +            Retweet_Count  <               1943.5 THEN DO;
17571 +            _NODE_  =                   72;
17572 +            _LEAF_  =                   17;
17573 +            P_Total_Actions  =            12852.625;
17574 +            V_Total_Actions  =      12938.909090909;
17575 +            END;
17576 +          ELSE DO;
17577 +            _NODE_  =                   73;
17578 +            _LEAF_  =                   18;
17579 +            P_Total_Actions  =      14001.536231884;
17580 +            V_Total_Actions  =     14223.5416666666;
17581 +            END;
17582 +          END;
17583 +        END;
17584 +      END;
17585 +    END;
17586 +  ELSE DO;
17587 +    IF  NOT MISSING(Like_Count ) AND
17588 +                    5354.5 <= Like_Count  THEN DO;
17589 +      IF  NOT MISSING(Like_Count ) AND
17590 +                      7849.5 <= Like_Count  THEN DO;
17591 +        IF  NOT MISSING(Like_Count ) AND
17592 +                          9086 <= Like_Count  THEN DO;
17593 +          IF  NOT MISSING(Retweet_Count ) AND
17594 +                          1738.5 <= Retweet_Count  THEN DO;
17595 +            _NODE_  =                   71;
17596 +            _LEAF_  =                   16;
17597 +            P_Total_Actions  =     12079.9516129032;
17598 +            V_Total_Actions  =     11995.5714285714;
17599 +            END;
17600 +          ELSE DO;
17601 +            _NODE_  =                   70;
17602 +            _LEAF_  =                   15;
17603 +            P_Total_Actions  =     11125.4054054054;
17604 +            V_Total_Actions  =     11061.3928571428;
17605 +            END;
17606 +          END;
17607 +        ELSE DO;
17608 +          IF  NOT MISSING(Retweet_Count ) AND
17609 +                            1714 <= Retweet_Count  THEN DO;
17610 +            _NODE_  =                   69;
17611 +            _LEAF_  =                   14;
17612 +            P_Total_Actions  =     10624.2857142857;
17613 +            V_Total_Actions  =      10373.923076923;
17614 +            END;
17615 +          ELSE DO;
17616 +            _NODE_  =                   68;
17617 +            _LEAF_  =                   13;
17618 +            P_Total_Actions  =     9763.95726495726;
17619 +            V_Total_Actions  =               9545.2;
17620 +            END;
17621 +          END;
17622 +        END;
17623 +      ELSE DO;
17624 +        IF  NOT MISSING(Like_Count ) AND
17625 +          Like_Count  <               6503.5 THEN DO;
17626 +          IF  NOT MISSING(Like_Count ) AND
17627 +                          6042.5 <= Like_Count  THEN DO;
17628 +            _NODE_  =                   65;
17629 +            _LEAF_  =                   10;
17630 +            P_Total_Actions  =     7309.08860759493;
17631 +            V_Total_Actions  =     7526.45833333333;
17632 +            END;
17633 +          ELSE DO;
17634 +            _NODE_  =                   64;
17635 +            _LEAF_  =                    9;
17636 +            P_Total_Actions  =     6633.57272727272;
17637 +            V_Total_Actions  =     6593.03703703703;
17638 +            END;
17639 +          END;
17640 +        ELSE DO;
17641 +          IF  NOT MISSING(Like_Count ) AND
17642 +                          7226.5 <= Like_Count  THEN DO;
17643 +            _NODE_  =                   67;
17644 +            _LEAF_  =                   12;
17645 +            P_Total_Actions  =     8777.48979591836;
17646 +            V_Total_Actions  =              8906.25;
17647 +            END;
17648 +          ELSE DO;
17649 +            _NODE_  =                   66;
17650 +            _LEAF_  =                   11;
17651 +            P_Total_Actions  =     8068.19379844961;
17652 +            V_Total_Actions  =               7890.5;
17653 +            END;
17654 +          END;
17655 +        END;
17656 +      END;
17657 +    ELSE DO;
17658 +      IF  NOT MISSING(Like_Count ) AND
17659 +        Like_Count  <               2944.5 THEN DO;
17660 +        IF  NOT MISSING(Like_Count ) AND
17661 +          Like_Count  <                 1744 THEN DO;
17662 +          IF  NOT MISSING(Like_Count ) AND
17663 +            Like_Count  <                 1003 THEN DO;
17664 +            _NODE_  =                   56;
17665 +            _LEAF_  =                    1;
17666 +            P_Total_Actions  =      681.48623853211;
17667 +            V_Total_Actions  =     816.085714285714;
17668 +            END;
17669 +          ELSE DO;
17670 +            _NODE_  =                   57;
17671 +            _LEAF_  =                    2;
17672 +            P_Total_Actions  =            1606.6625;
17673 +            V_Total_Actions  =     1590.79245283018;
17674 +            END;
17675 +          END;
17676 +        ELSE DO;
17677 +          IF  NOT MISSING(Like_Count ) AND
17678 +            Like_Count  <               2366.5 THEN DO;
17679 +            _NODE_  =                   58;
17680 +            _LEAF_  =                    3;
17681 +            P_Total_Actions  =       2372.700729927;
17682 +            V_Total_Actions  =           2423.46875;
17683 +            END;
17684 +          ELSE DO;
17685 +            _NODE_  =                   59;
17686 +            _LEAF_  =                    4;
17687 +            P_Total_Actions  =     3088.34666666666;
17688 +            V_Total_Actions  =               3053.5;
17689 +            END;
17690 +          END;
17691 +        END;
17692 +      ELSE DO;
17693 +        IF  NOT MISSING(Like_Count ) AND
17694 +          Like_Count  <               4050.5 THEN DO;
17695 +          IF  NOT MISSING(Like_Count ) AND
17696 +            Like_Count  <               3480.5 THEN DO;
17697 +            _NODE_  =                   60;
17698 +            _LEAF_  =                    5;
17699 +            P_Total_Actions  =             3693.928;
17700 +            V_Total_Actions  =     3687.02222222222;
17701 +            END;
17702 +          ELSE DO;
17703 +            _NODE_  =                   61;
17704 +            _LEAF_  =                    6;
17705 +            P_Total_Actions  =     4424.82191780821;
17706 +            V_Total_Actions  =     4348.74193548387;
17707 +            END;
17708 +          END;
17709 +        ELSE DO;
17710 +          IF  NOT MISSING(Like_Count ) AND
17711 +                            4674 <= Like_Count  THEN DO;
17712 +            _NODE_  =                   63;
17713 +            _LEAF_  =                    8;
17714 +            P_Total_Actions  =     5833.82442748091;
17715 +            V_Total_Actions  =     5768.81818181818;
17716 +            END;
17717 +          ELSE DO;
17718 +            _NODE_  =                   62;
17719 +            _LEAF_  =                    7;
17720 +            P_Total_Actions  =     5067.40782122905;
17721 +            V_Total_Actions  =             5136.825;
17722 +            END;
17723 +          END;
17724 +        END;
17725 +      END;
17726 +    END;
17727 +  END;
17728 +
17729 +*****  RESIDUALS R_ *************;
17730 +IF MISSING( Total_Actions ) THEN R_Total_Actions  = .;
17731 +ELSE R_Total_Actions  = Total_Actions  - P_Total_Actions ;
17732 +
17733 +****************************************************************;
17734 +******          END OF DECISION TREE SCORING CODE         ******;
17735 +****************************************************************;
17736 +
17737 +drop _LEAF_;
NOTE: %INCLUDE (level 1) ending.
17738  run;
 
NOTE: DATA STEP view saved on file EMWS5.TREE_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.05 seconds
      cpu time            0.04 seconds
 
 
17739  quit;
17740  filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
 
17741  filename emflow "P:\DMBI_Project\Twitter_Insta_Content_Engineering\Workspaces\EMWS5\Tree\EMFLOWSCORE.sas";
17742  *------------------------------------------------------------*;
17743  * Tree: Scoring VALIDATE data;
17744  *------------------------------------------------------------*;
17745  data EMWS5.Tree_VALIDATE
17746  / view=EMWS5.Tree_VALIDATE
17747  ;
17748  set EMWS5.TextTopic_VALIDATE
17749  ;
17750  %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file P:\DMBI_Project\Twitter_Insta_Content_Engineering\Workspaces\EMWS5\Tree\EMFLOWSCORE.sas.
17751 +****************************************************************;
17752 +******             DECISION TREE SCORING CODE             ******;
17753 +****************************************************************;
17754 +
17755 +******         LENGTHS OF NEW CHARACTER VARIABLES         ******;
17756 +LENGTH _WARN_  $    4;
17757 +
17758 +******              LABELS FOR NEW VARIABLES              ******;
17759 +label _NODE_ = 'Node' ;
17760 +label _LEAF_ = 'Leaf' ;
17761 +label P_Total_Actions = 'Predicted: Total_Actions' ;
17762 +label V_Total_Actions = 'Validated: Total_Actions' ;
17763 +label R_Total_Actions = 'Residual: Total_Actions' ;
17764 +label _WARN_ = 'Warnings' ;
17765 +
17766 +
17767 +
17768 +******             ASSIGN OBSERVATION TO NODE             ******;
17769 +IF  NOT MISSING(Like_Count ) AND
17770 +                 26244 <= Like_Count  THEN DO;
17771 +  IF  NOT MISSING(Like_Count ) AND
17772 +                   61279 <= Like_Count  THEN DO;
17773 +    IF  NOT MISSING(Like_Count ) AND
17774 +                   94861.5 <= Like_Count  THEN DO;
17775 +      _NODE_  =                   15;
17776 +      _LEAF_  =                   49;
17777 +      P_Total_Actions  =     158441.857142857;
17778 +      V_Total_Actions  =               176878;
17779 +      END;
17780 +    ELSE DO;
17781 +      IF  NOT MISSING(Like_Count ) AND
17782 +                     73445.5 <= Like_Count  THEN DO;
17783 +        _NODE_  =                   29;
17784 +        _LEAF_  =                   48;
17785 +        P_Total_Actions  =     102068.222222222;
17786 +        V_Total_Actions  =               100576;
17787 +        END;
17788 +      ELSE DO;
17789 +        IF  NOT MISSING(TextCluster_SVD39 ) AND
17790 +          TextCluster_SVD39  <    -0.01650754330562 THEN DO;
17791 +          _NODE_  =                   54;
17792 +          _LEAF_  =                   45;
17793 +          P_Total_Actions  =     86650.8571428571;
17794 +          V_Total_Actions  =              80876.5;
17795 +          END;
17796 +        ELSE DO;
17797 +          IF  NOT MISSING(Like_Count ) AND
17798 +            Like_Count  <              65336.5 THEN DO;
17799 +            _NODE_  =                  104;
17800 +            _LEAF_  =                   46;
17801 +            P_Total_Actions  =                76800;
17802 +            V_Total_Actions  =                76985;
17803 +            END;
17804 +          ELSE DO;
17805 +            _NODE_  =                  105;
17806 +            _LEAF_  =                   47;
17807 +            P_Total_Actions  =                83134;
17808 +            V_Total_Actions  =                78421;
17809 +            END;
17810 +          END;
17811 +        END;
17812 +      END;
17813 +    END;
17814 +  ELSE DO;
17815 +    IF  NOT MISSING(Like_Count ) AND
17816 +                   42625.5 <= Like_Count  THEN DO;
17817 +      IF  NOT MISSING(Like_Count ) AND
17818 +                     50758.5 <= Like_Count  THEN DO;
17819 +        IF  NOT MISSING(Like_Count ) AND
17820 +          Like_Count  <              54811.5 THEN DO;
17821 +          _NODE_  =                   52;
17822 +          _LEAF_  =                   42;
17823 +          P_Total_Actions  =     64541.7272727272;
17824 +          V_Total_Actions  =     65511.7142857142;
17825 +          END;
17826 +        ELSE DO;
17827 +          IF  NOT MISSING(Retweet_Count ) AND
17828 +            Retweet_Count  <                 9768 THEN DO;
17829 +            _NODE_  =                  102;
17830 +            _LEAF_  =                   43;
17831 +            P_Total_Actions  =              65888.6;
17832 +            V_Total_Actions  =              68721.5;
17833 +            END;
17834 +          ELSE DO;
17835 +            _NODE_  =                  103;
17836 +            _LEAF_  =                   44;
17837 +            P_Total_Actions  =     71534.9411764706;
17838 +            V_Total_Actions  =     73987.2857142857;
17839 +            END;
17840 +          END;
17841 +        END;
17842 +      ELSE DO;
17843 +        IF  NOT MISSING(Like_Count ) AND
17844 +                       47978.5 <= Like_Count  THEN DO;
17845 +          IF  NOT MISSING(Retweet_Count ) AND
17846 +                         10851.5 <= Retweet_Count  THEN DO;
17847 +            _NODE_  =                   99;
17848 +            _LEAF_  =                   41;
17849 +            P_Total_Actions  =                62895;
17850 +            V_Total_Actions  =                66275;
17851 +            END;
17852 +          ELSE DO;
17853 +            _NODE_  =                   98;
17854 +            _LEAF_  =                   40;
17855 +            P_Total_Actions  =                58360;
17856 +            V_Total_Actions  =                58556;
17857 +            END;
17858 +          END;
17859 +        ELSE DO;
17860 +          _NODE_  =                   50;
17861 +          _LEAF_  =                   39;
17862 +          P_Total_Actions  =     54199.6551724138;
17863 +          V_Total_Actions  =     55754.8333333333;
17864 +          END;
17865 +        END;
17866 +      END;
17867 +    ELSE DO;
17868 +      IF  NOT MISSING(Like_Count ) AND
17869 +                       32578 <= Like_Count  THEN DO;
17870 +        IF  NOT MISSING(Like_Count ) AND
17871 +                         36968 <= Like_Count  THEN DO;
17872 +          _NODE_  =                   49;
17873 +          _LEAF_  =                   38;
17874 +          P_Total_Actions  =     47490.1282051282;
17875 +          V_Total_Actions  =     46893.8235294117;
17876 +          END;
17877 +        ELSE DO;
17878 +          IF  NOT MISSING(Retweet_Count ) AND
17879 +                          7815.5 <= Retweet_Count  THEN DO;
17880 +            _NODE_  =                   93;
17881 +            _LEAF_  =                   37;
17882 +            P_Total_Actions  =              44662.4;
17883 +            V_Total_Actions  =     43629.6666666666;
17884 +            END;
17885 +          ELSE DO;
17886 +            _NODE_  =                   92;
17887 +            _LEAF_  =                   36;
17888 +            P_Total_Actions  =     40920.8214285714;
17889 +            V_Total_Actions  =     41169.5714285714;
17890 +            END;
17891 +          END;
17892 +        END;
17893 +      ELSE DO;
17894 +        IF  NOT MISSING(Like_Count ) AND
17895 +                       29255.5 <= Like_Count  THEN DO;
17896 +          IF  NOT MISSING(Retweet_Count ) AND
17897 +                            6613 <= Retweet_Count  THEN DO;
17898 +            _NODE_  =                   91;
17899 +            _LEAF_  =                   35;
17900 +            P_Total_Actions  =             39058.25;
17901 +            V_Total_Actions  =     37837.3333333333;
17902 +            END;
17903 +          ELSE DO;
17904 +            _NODE_  =                   90;
17905 +            _LEAF_  =                   34;
17906 +            P_Total_Actions  =     36632.7619047619;
17907 +            V_Total_Actions  =     35467.7777777777;
17908 +            END;
17909 +          END;
17910 +        ELSE DO;
17911 +          IF  NOT MISSING(Retweet_Count ) AND
17912 +                          5334.5 <= Retweet_Count  THEN DO;
17913 +            _NODE_  =                   89;
17914 +            _LEAF_  =                   33;
17915 +            P_Total_Actions  =     34467.4583333333;
17916 +            V_Total_Actions  =             33810.25;
17917 +            END;
17918 +          ELSE DO;
17919 +            _NODE_  =                   88;
17920 +            _LEAF_  =                   32;
17921 +            P_Total_Actions  =     32084.9285714285;
17922 +            V_Total_Actions  =                31388;
17923 +            END;
17924 +          END;
17925 +        END;
17926 +      END;
17927 +    END;
17928 +  END;
17929 +ELSE DO;
17930 +  IF  NOT MISSING(Like_Count ) AND
17931 +                   10555 <= Like_Count  THEN DO;
17932 +    IF  NOT MISSING(Like_Count ) AND
17933 +                   17187.5 <= Like_Count  THEN DO;
17934 +      IF  NOT MISSING(Like_Count ) AND
17935 +                     21711.5 <= Like_Count  THEN DO;
17936 +        IF  NOT MISSING(Like_Count ) AND
17937 +                       24117.5 <= Like_Count  THEN DO;
17938 +          IF  NOT MISSING(Retweet_Count ) AND
17939 +                            5562 <= Retweet_Count  THEN DO;
17940 +            _NODE_  =                   87;
17941 +            _LEAF_  =                   31;
17942 +            P_Total_Actions  =              31488.5;
17943 +            V_Total_Actions  =     31188.3333333333;
17944 +            END;
17945 +          ELSE DO;
17946 +            _NODE_  =                   86;
17947 +            _LEAF_  =                   30;
17948 +            P_Total_Actions  =          29660.96875;
17949 +            V_Total_Actions  =                29453;
17950 +            END;
17951 +          END;
17952 +        ELSE DO;
17953 +          IF  NOT MISSING(Retweet_Count ) AND
17954 +                            4904 <= Retweet_Count  THEN DO;
17955 +            _NODE_  =                   85;
17956 +            _LEAF_  =                   29;
17957 +            P_Total_Actions  =     28146.0666666666;
17958 +            V_Total_Actions  =              28982.2;
17959 +            END;
17960 +          ELSE DO;
17961 +            _NODE_  =                   84;
17962 +            _LEAF_  =                   28;
17963 +            P_Total_Actions  =          26633.65625;
17964 +            V_Total_Actions  =     26452.1538461538;
17965 +            END;
17966 +          END;
17967 +        END;
17968 +      ELSE DO;
17969 +        IF  NOT MISSING(Like_Count ) AND
17970 +          Like_Count  <              18993.5 THEN DO;
17971 +          _NODE_  =                   42;
17972 +          _LEAF_  =                   25;
17973 +          P_Total_Actions  =     21422.7540983606;
17974 +          V_Total_Actions  =     21518.3636363636;
17975 +          END;
17976 +        ELSE DO;
17977 +          IF  NOT MISSING(Like_Count ) AND
17978 +                         20317.5 <= Like_Count  THEN DO;
17979 +            _NODE_  =                   83;
17980 +            _LEAF_  =                   27;
17981 +            P_Total_Actions  =     24651.3225806451;
17982 +            V_Total_Actions  =            24647.375;
17983 +            END;
17984 +          ELSE DO;
17985 +            _NODE_  =                   82;
17986 +            _LEAF_  =                   26;
17987 +            P_Total_Actions  =     23186.9428571428;
17988 +            V_Total_Actions  =     22820.5454545454;
17989 +            END;
17990 +          END;
17991 +        END;
17992 +      END;
17993 +    ELSE DO;
17994 +      IF  NOT MISSING(Like_Count ) AND
17995 +                     13795.5 <= Like_Count  THEN DO;
17996 +        IF  NOT MISSING(Like_Count ) AND
17997 +                       15594.5 <= Like_Count  THEN DO;
17998 +          IF  NOT MISSING(Retweet_Count ) AND
17999 +                            3274 <= Retweet_Count  THEN DO;
18000 +            _NODE_  =                   79;
18001 +            _LEAF_  =                   24;
18002 +            P_Total_Actions  =     20228.3181818181;
18003 +            V_Total_Actions  =              19983.2;
18004 +            END;
18005 +          ELSE DO;
18006 +            _NODE_  =                   78;
18007 +            _LEAF_  =                   23;
18008 +            P_Total_Actions  =           18886.5625;
18009 +            V_Total_Actions  =     18883.8571428571;
18010 +            END;
18011 +          END;
18012 +        ELSE DO;
18013 +          IF  NOT MISSING(Retweet_Count ) AND
18014 +                          2779.5 <= Retweet_Count  THEN DO;
18015 +            _NODE_  =                   77;
18016 +            _LEAF_  =                   22;
18017 +            P_Total_Actions  =                18106;
18018 +            V_Total_Actions  =     18179.3636363636;
18019 +            END;
18020 +          ELSE DO;
18021 +            _NODE_  =                   76;
18022 +            _LEAF_  =                   21;
18023 +            P_Total_Actions  =     16885.9183673469;
18024 +            V_Total_Actions  =              16810.2;
18025 +            END;
18026 +          END;
18027 +        END;
18028 +      ELSE DO;
18029 +        IF  NOT MISSING(Like_Count ) AND
18030 +                         12214 <= Like_Count  THEN DO;
18031 +          IF  NOT MISSING(Retweet_Count ) AND
18032 +            Retweet_Count  <                 2136 THEN DO;
18033 +            _NODE_  =                   74;
18034 +            _LEAF_  =                   19;
18035 +            P_Total_Actions  =     14740.9756097561;
18036 +            V_Total_Actions  =     14768.6666666666;
18037 +            END;
18038 +          ELSE DO;
18039 +            _NODE_  =                   75;
18040 +            _LEAF_  =                   20;
18041 +            P_Total_Actions  =     15928.8620689655;
18042 +            V_Total_Actions  =     15902.6153846153;
18043 +            END;
18044 +          END;
18045 +        ELSE DO;
18046 +          IF  NOT MISSING(Retweet_Count ) AND
18047 +            Retweet_Count  <               1943.5 THEN DO;
18048 +            _NODE_  =                   72;
18049 +            _LEAF_  =                   17;
18050 +            P_Total_Actions  =            12852.625;
18051 +            V_Total_Actions  =      12938.909090909;
18052 +            END;
18053 +          ELSE DO;
18054 +            _NODE_  =                   73;
18055 +            _LEAF_  =                   18;
18056 +            P_Total_Actions  =      14001.536231884;
18057 +            V_Total_Actions  =     14223.5416666666;
18058 +            END;
18059 +          END;
18060 +        END;
18061 +      END;
18062 +    END;
18063 +  ELSE DO;
18064 +    IF  NOT MISSING(Like_Count ) AND
18065 +                    5354.5 <= Like_Count  THEN DO;
18066 +      IF  NOT MISSING(Like_Count ) AND
18067 +                      7849.5 <= Like_Count  THEN DO;
18068 +        IF  NOT MISSING(Like_Count ) AND
18069 +                          9086 <= Like_Count  THEN DO;
18070 +          IF  NOT MISSING(Retweet_Count ) AND
18071 +                          1738.5 <= Retweet_Count  THEN DO;
18072 +            _NODE_  =                   71;
18073 +            _LEAF_  =                   16;
18074 +            P_Total_Actions  =     12079.9516129032;
18075 +            V_Total_Actions  =     11995.5714285714;
18076 +            END;
18077 +          ELSE DO;
18078 +            _NODE_  =                   70;
18079 +            _LEAF_  =                   15;
18080 +            P_Total_Actions  =     11125.4054054054;
18081 +            V_Total_Actions  =     11061.3928571428;
18082 +            END;
18083 +          END;
18084 +        ELSE DO;
18085 +          IF  NOT MISSING(Retweet_Count ) AND
18086 +                            1714 <= Retweet_Count  THEN DO;
18087 +            _NODE_  =                   69;
18088 +            _LEAF_  =                   14;
18089 +            P_Total_Actions  =     10624.2857142857;
18090 +            V_Total_Actions  =      10373.923076923;
18091 +            END;
18092 +          ELSE DO;
18093 +            _NODE_  =                   68;
18094 +            _LEAF_  =                   13;
18095 +            P_Total_Actions  =     9763.95726495726;
18096 +            V_Total_Actions  =               9545.2;
18097 +            END;
18098 +          END;
18099 +        END;
18100 +      ELSE DO;
18101 +        IF  NOT MISSING(Like_Count ) AND
18102 +          Like_Count  <               6503.5 THEN DO;
18103 +          IF  NOT MISSING(Like_Count ) AND
18104 +                          6042.5 <= Like_Count  THEN DO;
18105 +            _NODE_  =                   65;
18106 +            _LEAF_  =                   10;
18107 +            P_Total_Actions  =     7309.08860759493;
18108 +            V_Total_Actions  =     7526.45833333333;
18109 +            END;
18110 +          ELSE DO;
18111 +            _NODE_  =                   64;
18112 +            _LEAF_  =                    9;
18113 +            P_Total_Actions  =     6633.57272727272;
18114 +            V_Total_Actions  =     6593.03703703703;
18115 +            END;
18116 +          END;
18117 +        ELSE DO;
18118 +          IF  NOT MISSING(Like_Count ) AND
18119 +                          7226.5 <= Like_Count  THEN DO;
18120 +            _NODE_  =                   67;
18121 +            _LEAF_  =                   12;
18122 +            P_Total_Actions  =     8777.48979591836;
18123 +            V_Total_Actions  =              8906.25;
18124 +            END;
18125 +          ELSE DO;
18126 +            _NODE_  =                   66;
18127 +            _LEAF_  =                   11;
18128 +            P_Total_Actions  =     8068.19379844961;
18129 +            V_Total_Actions  =               7890.5;
18130 +            END;
18131 +          END;
18132 +        END;
18133 +      END;
18134 +    ELSE DO;
18135 +      IF  NOT MISSING(Like_Count ) AND
18136 +        Like_Count  <               2944.5 THEN DO;
18137 +        IF  NOT MISSING(Like_Count ) AND
18138 +          Like_Count  <                 1744 THEN DO;
18139 +          IF  NOT MISSING(Like_Count ) AND
18140 +            Like_Count  <                 1003 THEN DO;
18141 +            _NODE_  =                   56;
18142 +            _LEAF_  =                    1;
18143 +            P_Total_Actions  =      681.48623853211;
18144 +            V_Total_Actions  =     816.085714285714;
18145 +            END;
18146 +          ELSE DO;
18147 +            _NODE_  =                   57;
18148 +            _LEAF_  =                    2;
18149 +            P_Total_Actions  =            1606.6625;
18150 +            V_Total_Actions  =     1590.79245283018;
18151 +            END;
18152 +          END;
18153 +        ELSE DO;
18154 +          IF  NOT MISSING(Like_Count ) AND
18155 +            Like_Count  <               2366.5 THEN DO;
18156 +            _NODE_  =                   58;
18157 +            _LEAF_  =                    3;
18158 +            P_Total_Actions  =       2372.700729927;
18159 +            V_Total_Actions  =           2423.46875;
18160 +            END;
18161 +          ELSE DO;
18162 +            _NODE_  =                   59;
18163 +            _LEAF_  =                    4;
18164 +            P_Total_Actions  =     3088.34666666666;
18165 +            V_Total_Actions  =               3053.5;
18166 +            END;
18167 +          END;
18168 +        END;
18169 +      ELSE DO;
18170 +        IF  NOT MISSING(Like_Count ) AND
18171 +          Like_Count  <               4050.5 THEN DO;
18172 +          IF  NOT MISSING(Like_Count ) AND
18173 +            Like_Count  <               3480.5 THEN DO;
18174 +            _NODE_  =                   60;
18175 +            _LEAF_  =                    5;
18176 +            P_Total_Actions  =             3693.928;
18177 +            V_Total_Actions  =     3687.02222222222;
18178 +            END;
18179 +          ELSE DO;
18180 +            _NODE_  =                   61;
18181 +            _LEAF_  =                    6;
18182 +            P_Total_Actions  =     4424.82191780821;
18183 +            V_Total_Actions  =     4348.74193548387;
18184 +            END;
18185 +          END;
18186 +        ELSE DO;
18187 +          IF  NOT MISSING(Like_Count ) AND
18188 +                            4674 <= Like_Count  THEN DO;
18189 +            _NODE_  =                   63;
18190 +            _LEAF_  =                    8;
18191 +            P_Total_Actions  =     5833.82442748091;
18192 +            V_Total_Actions  =     5768.81818181818;
18193 +            END;
18194 +          ELSE DO;
18195 +            _NODE_  =                   62;
18196 +            _LEAF_  =                    7;
18197 +            P_Total_Actions  =     5067.40782122905;
18198 +            V_Total_Actions  =             5136.825;
18199 +            END;
18200 +          END;
18201 +        END;
18202 +      END;
18203 +    END;
18204 +  END;
18205 +
18206 +*****  RESIDUALS R_ *************;
18207 +IF MISSING( Total_Actions ) THEN R_Total_Actions  = .;
18208 +ELSE R_Total_Actions  = Total_Actions  - P_Total_Actions ;
18209 +
18210 +****************************************************************;
18211 +******          END OF DECISION TREE SCORING CODE         ******;
18212 +****************************************************************;
18213 +
18214 +drop _LEAF_;
NOTE: %INCLUDE (level 1) ending.
18215  run;
 
NOTE: DATA STEP view saved on file EMWS5.TREE_VALIDATE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.05 seconds
      cpu time            0.03 seconds
 
 
18216  quit;
18217  filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
 
18218  filename emflow "P:\DMBI_Project\Twitter_Insta_Content_Engineering\Workspaces\EMWS5\Tree\EMFLOWSCORE.sas";
18219  *------------------------------------------------------------*;
18220  * Tree: Scoring TEST data;
18221  *------------------------------------------------------------*;
18222  data EMWS5.Tree_TEST
18223  / view=EMWS5.Tree_TEST
18224  ;
18225  set EMWS5.TextTopic_TEST
18226  ;
18227  %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file P:\DMBI_Project\Twitter_Insta_Content_Engineering\Workspaces\EMWS5\Tree\EMFLOWSCORE.sas.
18228 +****************************************************************;
18229 +******             DECISION TREE SCORING CODE             ******;
18230 +****************************************************************;
18231 +
18232 +******         LENGTHS OF NEW CHARACTER VARIABLES         ******;
18233 +LENGTH _WARN_  $    4;
18234 +
18235 +******              LABELS FOR NEW VARIABLES              ******;
18236 +label _NODE_ = 'Node' ;
18237 +label _LEAF_ = 'Leaf' ;
18238 +label P_Total_Actions = 'Predicted: Total_Actions' ;
18239 +label V_Total_Actions = 'Validated: Total_Actions' ;
18240 +label R_Total_Actions = 'Residual: Total_Actions' ;
18241 +label _WARN_ = 'Warnings' ;
18242 +
18243 +
18244 +
18245 +******             ASSIGN OBSERVATION TO NODE             ******;
18246 +IF  NOT MISSING(Like_Count ) AND
18247 +                 26244 <= Like_Count  THEN DO;
18248 +  IF  NOT MISSING(Like_Count ) AND
18249 +                   61279 <= Like_Count  THEN DO;
18250 +    IF  NOT MISSING(Like_Count ) AND
18251 +                   94861.5 <= Like_Count  THEN DO;
18252 +      _NODE_  =                   15;
18253 +      _LEAF_  =                   49;
18254 +      P_Total_Actions  =     158441.857142857;
18255 +      V_Total_Actions  =               176878;
18256 +      END;
18257 +    ELSE DO;
18258 +      IF  NOT MISSING(Like_Count ) AND
18259 +                     73445.5 <= Like_Count  THEN DO;
18260 +        _NODE_  =                   29;
18261 +        _LEAF_  =                   48;
18262 +        P_Total_Actions  =     102068.222222222;
18263 +        V_Total_Actions  =               100576;
18264 +        END;
18265 +      ELSE DO;
18266 +        IF  NOT MISSING(TextCluster_SVD39 ) AND
18267 +          TextCluster_SVD39  <    -0.01650754330562 THEN DO;
18268 +          _NODE_  =                   54;
18269 +          _LEAF_  =                   45;
18270 +          P_Total_Actions  =     86650.8571428571;
18271 +          V_Total_Actions  =              80876.5;
18272 +          END;
18273 +        ELSE DO;
18274 +          IF  NOT MISSING(Like_Count ) AND
18275 +            Like_Count  <              65336.5 THEN DO;
18276 +            _NODE_  =                  104;
18277 +            _LEAF_  =                   46;
18278 +            P_Total_Actions  =                76800;
18279 +            V_Total_Actions  =                76985;
18280 +            END;
18281 +          ELSE DO;
18282 +            _NODE_  =                  105;
18283 +            _LEAF_  =                   47;
18284 +            P_Total_Actions  =                83134;
18285 +            V_Total_Actions  =                78421;
18286 +            END;
18287 +          END;
18288 +        END;
18289 +      END;
18290 +    END;
18291 +  ELSE DO;
18292 +    IF  NOT MISSING(Like_Count ) AND
18293 +                   42625.5 <= Like_Count  THEN DO;
18294 +      IF  NOT MISSING(Like_Count ) AND
18295 +                     50758.5 <= Like_Count  THEN DO;
18296 +        IF  NOT MISSING(Like_Count ) AND
18297 +          Like_Count  <              54811.5 THEN DO;
18298 +          _NODE_  =                   52;
18299 +          _LEAF_  =                   42;
18300 +          P_Total_Actions  =     64541.7272727272;
18301 +          V_Total_Actions  =     65511.7142857142;
18302 +          END;
18303 +        ELSE DO;
18304 +          IF  NOT MISSING(Retweet_Count ) AND
18305 +            Retweet_Count  <                 9768 THEN DO;
18306 +            _NODE_  =                  102;
18307 +            _LEAF_  =                   43;
18308 +            P_Total_Actions  =              65888.6;
18309 +            V_Total_Actions  =              68721.5;
18310 +            END;
18311 +          ELSE DO;
18312 +            _NODE_  =                  103;
18313 +            _LEAF_  =                   44;
18314 +            P_Total_Actions  =     71534.9411764706;
18315 +            V_Total_Actions  =     73987.2857142857;
18316 +            END;
18317 +          END;
18318 +        END;
18319 +      ELSE DO;
18320 +        IF  NOT MISSING(Like_Count ) AND
18321 +                       47978.5 <= Like_Count  THEN DO;
18322 +          IF  NOT MISSING(Retweet_Count ) AND
18323 +                         10851.5 <= Retweet_Count  THEN DO;
18324 +            _NODE_  =                   99;
18325 +            _LEAF_  =                   41;
18326 +            P_Total_Actions  =                62895;
18327 +            V_Total_Actions  =                66275;
18328 +            END;
18329 +          ELSE DO;
18330 +            _NODE_  =                   98;
18331 +            _LEAF_  =                   40;
18332 +            P_Total_Actions  =                58360;
18333 +            V_Total_Actions  =                58556;
18334 +            END;
18335 +          END;
18336 +        ELSE DO;
18337 +          _NODE_  =                   50;
18338 +          _LEAF_  =                   39;
18339 +          P_Total_Actions  =     54199.6551724138;
18340 +          V_Total_Actions  =     55754.8333333333;
18341 +          END;
18342 +        END;
18343 +      END;
18344 +    ELSE DO;
18345 +      IF  NOT MISSING(Like_Count ) AND
18346 +                       32578 <= Like_Count  THEN DO;
18347 +        IF  NOT MISSING(Like_Count ) AND
18348 +                         36968 <= Like_Count  THEN DO;
18349 +          _NODE_  =                   49;
18350 +          _LEAF_  =                   38;
18351 +          P_Total_Actions  =     47490.1282051282;
18352 +          V_Total_Actions  =     46893.8235294117;
18353 +          END;
18354 +        ELSE DO;
18355 +          IF  NOT MISSING(Retweet_Count ) AND
18356 +                          7815.5 <= Retweet_Count  THEN DO;
18357 +            _NODE_  =                   93;
18358 +            _LEAF_  =                   37;
18359 +            P_Total_Actions  =              44662.4;
18360 +            V_Total_Actions  =     43629.6666666666;
18361 +            END;
18362 +          ELSE DO;
18363 +            _NODE_  =                   92;
18364 +            _LEAF_  =                   36;
18365 +            P_Total_Actions  =     40920.8214285714;
18366 +            V_Total_Actions  =     41169.5714285714;
18367 +            END;
18368 +          END;
18369 +        END;
18370 +      ELSE DO;
18371 +        IF  NOT MISSING(Like_Count ) AND
18372 +                       29255.5 <= Like_Count  THEN DO;
18373 +          IF  NOT MISSING(Retweet_Count ) AND
18374 +                            6613 <= Retweet_Count  THEN DO;
18375 +            _NODE_  =                   91;
18376 +            _LEAF_  =                   35;
18377 +            P_Total_Actions  =             39058.25;
18378 +            V_Total_Actions  =     37837.3333333333;
18379 +            END;
18380 +          ELSE DO;
18381 +            _NODE_  =                   90;
18382 +            _LEAF_  =                   34;
18383 +            P_Total_Actions  =     36632.7619047619;
18384 +            V_Total_Actions  =     35467.7777777777;
18385 +            END;
18386 +          END;
18387 +        ELSE DO;
18388 +          IF  NOT MISSING(Retweet_Count ) AND
18389 +                          5334.5 <= Retweet_Count  THEN DO;
18390 +            _NODE_  =                   89;
18391 +            _LEAF_  =                   33;
18392 +            P_Total_Actions  =     34467.4583333333;
18393 +            V_Total_Actions  =             33810.25;
18394 +            END;
18395 +          ELSE DO;
18396 +            _NODE_  =                   88;
18397 +            _LEAF_  =                   32;
18398 +            P_Total_Actions  =     32084.9285714285;
18399 +            V_Total_Actions  =                31388;
18400 +            END;
18401 +          END;
18402 +        END;
18403 +      END;
18404 +    END;
18405 +  END;
18406 +ELSE DO;
18407 +  IF  NOT MISSING(Like_Count ) AND
18408 +                   10555 <= Like_Count  THEN DO;
18409 +    IF  NOT MISSING(Like_Count ) AND
18410 +                   17187.5 <= Like_Count  THEN DO;
18411 +      IF  NOT MISSING(Like_Count ) AND
18412 +                     21711.5 <= Like_Count  THEN DO;
18413 +        IF  NOT MISSING(Like_Count ) AND
18414 +                       24117.5 <= Like_Count  THEN DO;
18415 +          IF  NOT MISSING(Retweet_Count ) AND
18416 +                            5562 <= Retweet_Count  THEN DO;
18417 +            _NODE_  =                   87;
18418 +            _LEAF_  =                   31;
18419 +            P_Total_Actions  =              31488.5;
18420 +            V_Total_Actions  =     31188.3333333333;
18421 +            END;
18422 +          ELSE DO;
18423 +            _NODE_  =                   86;
18424 +            _LEAF_  =                   30;
18425 +            P_Total_Actions  =          29660.96875;
18426 +            V_Total_Actions  =                29453;
18427 +            END;
18428 +          END;
18429 +        ELSE DO;
18430 +          IF  NOT MISSING(Retweet_Count ) AND
18431 +                            4904 <= Retweet_Count  THEN DO;
18432 +            _NODE_  =                   85;
18433 +            _LEAF_  =                   29;
18434 +            P_Total_Actions  =     28146.0666666666;
18435 +            V_Total_Actions  =              28982.2;
18436 +            END;
18437 +          ELSE DO;
18438 +            _NODE_  =                   84;
18439 +            _LEAF_  =                   28;
18440 +            P_Total_Actions  =          26633.65625;
18441 +            V_Total_Actions  =     26452.1538461538;
18442 +            END;
18443 +          END;
18444 +        END;
18445 +      ELSE DO;
18446 +        IF  NOT MISSING(Like_Count ) AND
18447 +          Like_Count  <              18993.5 THEN DO;
18448 +          _NODE_  =                   42;
18449 +          _LEAF_  =                   25;
18450 +          P_Total_Actions  =     21422.7540983606;
18451 +          V_Total_Actions  =     21518.3636363636;
18452 +          END;
18453 +        ELSE DO;
18454 +          IF  NOT MISSING(Like_Count ) AND
18455 +                         20317.5 <= Like_Count  THEN DO;
18456 +            _NODE_  =                   83;
18457 +            _LEAF_  =                   27;
18458 +            P_Total_Actions  =     24651.3225806451;
18459 +            V_Total_Actions  =            24647.375;
18460 +            END;
18461 +          ELSE DO;
18462 +            _NODE_  =                   82;
18463 +            _LEAF_  =                   26;
18464 +            P_Total_Actions  =     23186.9428571428;
18465 +            V_Total_Actions  =     22820.5454545454;
18466 +            END;
18467 +          END;
18468 +        END;
18469 +      END;
18470 +    ELSE DO;
18471 +      IF  NOT MISSING(Like_Count ) AND
18472 +                     13795.5 <= Like_Count  THEN DO;
18473 +        IF  NOT MISSING(Like_Count ) AND
18474 +                       15594.5 <= Like_Count  THEN DO;
18475 +          IF  NOT MISSING(Retweet_Count ) AND
18476 +                            3274 <= Retweet_Count  THEN DO;
18477 +            _NODE_  =                   79;
18478 +            _LEAF_  =                   24;
18479 +            P_Total_Actions  =     20228.3181818181;
18480 +            V_Total_Actions  =              19983.2;
18481 +            END;
18482 +          ELSE DO;
18483 +            _NODE_  =                   78;
18484 +            _LEAF_  =                   23;
18485 +            P_Total_Actions  =           18886.5625;
18486 +            V_Total_Actions  =     18883.8571428571;
18487 +            END;
18488 +          END;
18489 +        ELSE DO;
18490 +          IF  NOT MISSING(Retweet_Count ) AND
18491 +                          2779.5 <= Retweet_Count  THEN DO;
18492 +            _NODE_  =                   77;
18493 +            _LEAF_  =                   22;
18494 +            P_Total_Actions  =                18106;
18495 +            V_Total_Actions  =     18179.3636363636;
18496 +            END;
18497 +          ELSE DO;
18498 +            _NODE_  =                   76;
18499 +            _LEAF_  =                   21;
18500 +            P_Total_Actions  =     16885.9183673469;
18501 +            V_Total_Actions  =              16810.2;
18502 +            END;
18503 +          END;
18504 +        END;
18505 +      ELSE DO;
18506 +        IF  NOT MISSING(Like_Count ) AND
18507 +                         12214 <= Like_Count  THEN DO;
18508 +          IF  NOT MISSING(Retweet_Count ) AND
18509 +            Retweet_Count  <                 2136 THEN DO;
18510 +            _NODE_  =                   74;
18511 +            _LEAF_  =                   19;
18512 +            P_Total_Actions  =     14740.9756097561;
18513 +            V_Total_Actions  =     14768.6666666666;
18514 +            END;
18515 +          ELSE DO;
18516 +            _NODE_  =                   75;
18517 +            _LEAF_  =                   20;
18518 +            P_Total_Actions  =     15928.8620689655;
18519 +            V_Total_Actions  =     15902.6153846153;
18520 +            END;
18521 +          END;
18522 +        ELSE DO;
18523 +          IF  NOT MISSING(Retweet_Count ) AND
18524 +            Retweet_Count  <               1943.5 THEN DO;
18525 +            _NODE_  =                   72;
18526 +            _LEAF_  =                   17;
18527 +            P_Total_Actions  =            12852.625;
18528 +            V_Total_Actions  =      12938.909090909;
18529 +            END;
18530 +          ELSE DO;
18531 +            _NODE_  =                   73;
18532 +            _LEAF_  =                   18;
18533 +            P_Total_Actions  =      14001.536231884;
18534 +            V_Total_Actions  =     14223.5416666666;
18535 +            END;
18536 +          END;
18537 +        END;
18538 +      END;
18539 +    END;
18540 +  ELSE DO;
18541 +    IF  NOT MISSING(Like_Count ) AND
18542 +                    5354.5 <= Like_Count  THEN DO;
18543 +      IF  NOT MISSING(Like_Count ) AND
18544 +                      7849.5 <= Like_Count  THEN DO;
18545 +        IF  NOT MISSING(Like_Count ) AND
18546 +                          9086 <= Like_Count  THEN DO;
18547 +          IF  NOT MISSING(Retweet_Count ) AND
18548 +                          1738.5 <= Retweet_Count  THEN DO;
18549 +            _NODE_  =                   71;
18550 +            _LEAF_  =                   16;
18551 +            P_Total_Actions  =     12079.9516129032;
18552 +            V_Total_Actions  =     11995.5714285714;
18553 +            END;
18554 +          ELSE DO;
18555 +            _NODE_  =                   70;
18556 +            _LEAF_  =                   15;
18557 +            P_Total_Actions  =     11125.4054054054;
18558 +            V_Total_Actions  =     11061.3928571428;
18559 +            END;
18560 +          END;
18561 +        ELSE DO;
18562 +          IF  NOT MISSING(Retweet_Count ) AND
18563 +                            1714 <= Retweet_Count  THEN DO;
18564 +            _NODE_  =                   69;
18565 +            _LEAF_  =                   14;
18566 +            P_Total_Actions  =     10624.2857142857;
18567 +            V_Total_Actions  =      10373.923076923;
18568 +            END;
18569 +          ELSE DO;
18570 +            _NODE_  =                   68;
18571 +            _LEAF_  =                   13;
18572 +            P_Total_Actions  =     9763.95726495726;
18573 +            V_Total_Actions  =               9545.2;
18574 +            END;
18575 +          END;
18576 +        END;
18577 +      ELSE DO;
18578 +        IF  NOT MISSING(Like_Count ) AND
18579 +          Like_Count  <               6503.5 THEN DO;
18580 +          IF  NOT MISSING(Like_Count ) AND
18581 +                          6042.5 <= Like_Count  THEN DO;
18582 +            _NODE_  =                   65;
18583 +            _LEAF_  =                   10;
18584 +            P_Total_Actions  =     7309.08860759493;
18585 +            V_Total_Actions  =     7526.45833333333;
18586 +            END;
18587 +          ELSE DO;
18588 +            _NODE_  =                   64;
18589 +            _LEAF_  =                    9;
18590 +            P_Total_Actions  =     6633.57272727272;
18591 +            V_Total_Actions  =     6593.03703703703;
18592 +            END;
18593 +          END;
18594 +        ELSE DO;
18595 +          IF  NOT MISSING(Like_Count ) AND
18596 +                          7226.5 <= Like_Count  THEN DO;
18597 +            _NODE_  =                   67;
18598 +            _LEAF_  =                   12;
18599 +            P_Total_Actions  =     8777.48979591836;
18600 +            V_Total_Actions  =              8906.25;
18601 +            END;
18602 +          ELSE DO;
18603 +            _NODE_  =                   66;
18604 +            _LEAF_  =                   11;
18605 +            P_Total_Actions  =     8068.19379844961;
18606 +            V_Total_Actions  =               7890.5;
18607 +            END;
18608 +          END;
18609 +        END;
18610 +      END;
18611 +    ELSE DO;
18612 +      IF  NOT MISSING(Like_Count ) AND
18613 +        Like_Count  <               2944.5 THEN DO;
18614 +        IF  NOT MISSING(Like_Count ) AND
18615 +          Like_Count  <                 1744 THEN DO;
18616 +          IF  NOT MISSING(Like_Count ) AND
18617 +            Like_Count  <                 1003 THEN DO;
18618 +            _NODE_  =                   56;
18619 +            _LEAF_  =                    1;
18620 +            P_Total_Actions  =      681.48623853211;
18621 +            V_Total_Actions  =     816.085714285714;
18622 +            END;
18623 +          ELSE DO;
18624 +            _NODE_  =                   57;
18625 +            _LEAF_  =                    2;
18626 +            P_Total_Actions  =            1606.6625;
18627 +            V_Total_Actions  =     1590.79245283018;
18628 +            END;
18629 +          END;
18630 +        ELSE DO;
18631 +          IF  NOT MISSING(Like_Count ) AND
18632 +            Like_Count  <               2366.5 THEN DO;
18633 +            _NODE_  =                   58;
18634 +            _LEAF_  =                    3;
18635 +            P_Total_Actions  =       2372.700729927;
18636 +            V_Total_Actions  =           2423.46875;
18637 +            END;
18638 +          ELSE DO;
18639 +            _NODE_  =                   59;
18640 +            _LEAF_  =                    4;
18641 +            P_Total_Actions  =     3088.34666666666;
18642 +            V_Total_Actions  =               3053.5;
18643 +            END;
18644 +          END;
18645 +        END;
18646 +      ELSE DO;
18647 +        IF  NOT MISSING(Like_Count ) AND
18648 +          Like_Count  <               4050.5 THEN DO;
18649 +          IF  NOT MISSING(Like_Count ) AND
18650 +            Like_Count  <               3480.5 THEN DO;
18651 +            _NODE_  =                   60;
18652 +            _LEAF_  =                    5;
18653 +            P_Total_Actions  =             3693.928;
18654 +            V_Total_Actions  =     3687.02222222222;
18655 +            END;
18656 +          ELSE DO;
18657 +            _NODE_  =                   61;
18658 +            _LEAF_  =                    6;
18659 +            P_Total_Actions  =     4424.82191780821;
18660 +            V_Total_Actions  =     4348.74193548387;
18661 +            END;
18662 +          END;
18663 +        ELSE DO;
18664 +          IF  NOT MISSING(Like_Count ) AND
18665 +                            4674 <= Like_Count  THEN DO;
18666 +            _NODE_  =                   63;
18667 +            _LEAF_  =                    8;
18668 +            P_Total_Actions  =     5833.82442748091;
18669 +            V_Total_Actions  =     5768.81818181818;
18670 +            END;
18671 +          ELSE DO;
18672 +            _NODE_  =                   62;
18673 +            _LEAF_  =                    7;
18674 +            P_Total_Actions  =     5067.40782122905;
18675 +            V_Total_Actions  =             5136.825;
18676 +            END;
18677 +          END;
18678 +        END;
18679 +      END;
18680 +    END;
18681 +  END;
18682 +
18683 +*****  RESIDUALS R_ *************;
18684 +IF MISSING( Total_Actions ) THEN R_Total_Actions  = .;
18685 +ELSE R_Total_Actions  = Total_Actions  - P_Total_Actions ;
18686 +
18687 +****************************************************************;
18688 +******          END OF DECISION TREE SCORING CODE         ******;
18689 +****************************************************************;
18690 +
18691 +drop _LEAF_;
NOTE: %INCLUDE (level 1) ending.
18692  run;
 
NOTE: DATA STEP view saved on file EMWS5.TREE_TEST.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.10 seconds
      cpu time            0.03 seconds
 
 
18693  quit;
18694  filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
 
NOTE: View EMWS5.TREE_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.04 seconds
 
18696  proc sort data=WORK.EM_USER_REPORT;
18697  by ID VIEW;
18698  run;
 
NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
18699  *------------------------------------------------------------*;
18700  * Tree: Computing metadata for TRAIN data;
18701  *------------------------------------------------------------*;
 
NOTE: View EMWS5.TREE_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
19344  data WORK.MODELTEMP_INFO;
19345  set EMWS5.Tree_EMINFO;
19346  where DATA='Tree' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
19347  run;
 
NOTE: There were 0 observations read from the data set EMWS5.TREE_EMINFO.
      WHERE (DATA='Tree') and KEY not in ('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
NOTE: The data set WORK.MODELTEMP_INFO has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
19348  data EMWS5.Tree_EMINFO;
19349  length TARGET KEY $32 DATA $43;
19350  input TARGET KEY DATA $;
19351  cards;
 
NOTE: The data set EMWS5.TREE_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.07 seconds
      cpu time            0.03 seconds
 
 
19355  run;
19356  data EMWS5.Tree_EMINFO;
19357  set EMWS5.Tree_EMINFO WORK.MODELTEMP_INFO;
19358  run;
 
NOTE: There were 3 observations read from the data set EMWS5.TREE_EMINFO.
NOTE: There were 0 observations read from the data set WORK.MODELTEMP_INFO.
NOTE: The data set EMWS5.TREE_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.09 seconds
      cpu time            0.01 seconds
 
 
19359  proc sort data = EMWS5.Tree_EMINFO NOTHREADS;
19360  by TARGET KEY;
19361  run;
 
NOTE: There were 3 observations read from the data set EMWS5.TREE_EMINFO.
NOTE: The data set EMWS5.TREE_EMINFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.05 seconds
      cpu time            0.04 seconds
 
 
19362  proc sort data = EMWS5.TextTopic_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
19363  by TARGET KEY;
19364  run;
 
NOTE: There were 8 observations read from the data set EMWS5.TEXTTOPIC_EMINFO.
NOTE: The data set WORK.SORTEDEMINFO has 8 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
19365  proc sort data = EMWS5.Tree_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
19366  by TARGET KEY;
19367  run;
 
NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 3 observations read from the data set EMWS5.TREE_EMINFO.
NOTE: The data set WORK.TEMP_INFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
19368  data EMWS5.Tree_EMINFO;
19369  merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
19370  by TARGET KEY;
19371  run;
 
NOTE: There were 8 observations read from the data set WORK.SORTEDEMINFO.
NOTE: There were 3 observations read from the data set WORK.TEMP_INFO.
NOTE: The data set EMWS5.TREE_EMINFO has 11 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
 
 
19372  proc datasets lib=work nolist;
19373  delete TEMP_INFO SORTEDEMINFO;
19374  run;
 
NOTE: Deleting WORK.TEMP_INFO (memtype=DATA).
NOTE: Deleting WORK.SORTEDEMINFO (memtype=DATA).
19375  quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
NOTE: View EMWS5.TREE_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
NOTE: View EMWS5.TREE_VALIDATE.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
NOTE: View EMWS5.TREE_TEST.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
*------------------------------------------------------------*
* Report Log
Date:                May 06, 2020
Time:                18:33:38
*------------------------------------------------------------*
19399  data EMWS5.Tree_EMOUTFIT;
19400  set EMWS5.Tree_EMOUTFIT;
19401  length TargetLabel $200;
19402  label targetLabel = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))";
19403  if upcase(TARGET) eq "TOTAL_ACTIONS" then TargetLabel = 'Total Actions';
19404  run;
 
NOTE: There were 1 observations read from the data set EMWS5.TREE_EMOUTFIT.
NOTE: The data set EMWS5.TREE_EMOUTFIT has 1 observations and 22 variables.
NOTE: DATA statement used (Total process time):
      real time           0.07 seconds
      cpu time            0.01 seconds
 
 
19405  proc sort data=EMWS5.Tree_EMREPORTFIT nothreads;
19406  by TARGET;
19407  run;
 
NOTE: There were 7 observations read from the data set EMWS5.TREE_EMREPORTFIT.
NOTE: The data set EMWS5.TREE_EMREPORTFIT has 7 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.06 seconds
      cpu time            0.00 seconds
 
 
19408  %let _EMwarndup = 0;
19409  %let _EMtargetdup =;
19410  %let _EMASEtargetdup =;
19411  data _null_;
19412  set EMWS5.Tree_EMOUTFIT;
19413  if .<_ASE_<0.000001 then do;
19414  call symput('_EMwarndup', '1');
19415  call symput('_EMtargetdup', target);
19416  call symput('_EMASEtargetdup', put(_ASE_, best.));
19417  end;
19418  run;
 
NOTE: There were 1 observations read from the data set EMWS5.TREE_EMOUTFIT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
19419  %let EMEXCEPTIONSTRING=;
19420  *------------------------------------------------------------*;
19421  * REPORT: Tree;
19422  *------------------------------------------------------------*;
19423  %let EM_ACTION = REPORT;
19424  %let syscc = 0;
19425  %macro main;
19426
19427    %if %upcase(&EM_ACTION) = CREATE %then %do;
19428      filename temp catalog 'sashelp.emmodl.tree_create.source';
19429      %include temp;
19430      filename temp;
19431
19432      %em_tree_create;
19433    %end;
19434
19435     %else
19436     %if %upcase(&EM_ACTION) = TRAIN %then %do;
19437
19438         filename temp catalog 'sashelp.emmodl.tree_train.source';
19439         %include temp;
19440         filename temp;
19441         %em_tree_train;
19442     %end;
19443
19444    %else
19445    %if %upcase(&EM_ACTION) = SCORE %then %do;
19446      filename temp catalog 'sashelp.emmodl.tree_score.source';
19447      %include temp;
19448      filename temp;
19449
19450      %em_tree_score;
19451
19452    %end;
19453
19454    %else
19455    %if %upcase(&EM_ACTION) = REPORT %then %do;
19456
19457         filename temp catalog 'sashelp.emmodl.tree_report.source';
19458         %include temp;
19459         filename temp;
19460
19461         %em_tree_report;
19462     %end;
19463
19464    %else
19465    %if %upcase(&EM_ACTION) = OPENINT %then %do;
19466
19467         filename temp catalog 'sashelp.emmodl.tree_actions.source';
19468         %include temp;
19469         filename temp;
19470         %EM_TREE_OPENTREEVIEWER;
19471
19472     %end;
19473
19474    %else
19475    %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
19476
19477         filename temp catalog 'sashelp.emmodl.tree_actions.source';
19478         %include temp;
19479         filename temp;
19480         %EM_TREE_CLOSETREEVIEWER;
19481
19482     %end;
19483
19484
19485     %doendm:
19486  %mend main;
19487
19488  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_REPORT.SOURCE.
19490 +%macro em_tree_makePlotDs( multipleTar= );
19492 +  %EM_GETNAME(key=OUTSTATS, type=DATA);
19493 +  %EM_GETNAME(key=OUTNODES, type=DATA);
19494 +  %EM_GETNAME(key=TREE_PLOT, type=DATA);
19495 +  %EM_GETNAME(key=OUTRULES, type=DATA);
19497 +  /* determine if validation statistics will be displayed */
19498 +  %let validflag=N;
19499 +  %if "&EM_PROPERTY_SHOWVALID" eq "Y" %then %do;
19500 +    /* determine if validation data exists */
19501 +    %if &validexist AND ("&EM_PROPERTY_CV" ne "Y") %then %do;
19502 +      %let validflag=Y;
19503 +    %end;
19504 +  %end;
19506 +   /* retrieve name of decmeta even in presence of multiple targets */
19507 +   %let decmeta = ;
19508 +   %if &EM_DEC_DECMETA eq %then %do;
19509 +     data _Target;
19510 +       set &em_data_variableset;
19511 +       where ROLE='TARGET' and USE in('D', 'Y');
19512 +       keep NAME;
19513 +     run;
19514 +     proc sort data=_Target;
19515 +       by NAME;
19516 +     run;
19517 +     proc sort data=EM_TARGETDECINFO;
19518 +       by TARGET;
19519 +     run;
19520 +     data _Target;
19521 +       merge _Target(in=_a) EM_TARGETDECINFO(rename=(TARGET=NAME) );
19522 +       by NAME;
19523 +       if _a then do;
19524 +         call symput('decmeta', trim(DECMETA));
19525 +       end;
19526 +     run;
19527 +     proc delete data=_Target;run;
19528 +   %end;
19529 +   %else %let decmeta = &EM_DEC_DECMETA;
19532 +  /* retrieve targetEvent from decmeta */
19533 +  %let targetEvent=;
19534 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19535 +    %if %sysfunc(exist(&DECMETA)) %then %do;
19536 +      data _null_;
19537 +       set &DECMETA(where=(_TYPE_="TARGET"));
19538 +       call symput('targetEvent', strip(tranwrd(EVENT,'"','""')));
19539 +      run;
19540 +    %end;
19541 +  %end;
19543 +  /* retrieve predicted var for targetEvent from decmeta */
19544 +  %let predTarget=;
19545 +  %let predLvl=;
19546 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19547 +    %if %sysfunc(exist(&DECMETA)) %then %do;
19548 +      data _null_;
19549 +       set &DECMETA(where=(_TYPE_="PREDICTED" AND LEVEL="&targetEvent"));
19550 +       call symput('predTarget', strip(VARIABLE));
19551 +       call symput('predLvl', strip(LEVEL));
19552 +      run;
19553 +    %end;
19554 +  %end;
19555 +  %else %do;
19556 +    %if %sysfunc(exist(&DECMETA)) %then %do;
19557 +      data _null_;
19558 +       set &DECMETA(where=(_TYPE_="PREDICTED"));
19559 +       call symput('predTarget', strip(VARIABLE));
19560 +      run;
19561 +    %end;
19562 +  %end;
19564 +  /* create BelowText value */
19565 +  data belowtext;
19566 +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT="VARIABLE") rename=(character_value=belowtext));
19567 +    keep node belowtext;
19568 +  run;
19570 +  /* relace belowtext with variable label if it exists */
19571 +  data belowtext2;
19572 +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT="LABEL") rename=(character_value=belowtextlbl));
19573 +    keep node belowtextlbl;
19574 +  run;
19576 +  proc sort data=belowtext; by node; run;
19577 +  proc sort data=belowtext2; by node; run;
19579 +  data belowtext;
19580 +    merge belowtext belowtext2(in=_a);
19581 +    by node;
19582 +    if _a then belowtext=belowtextlbl;
19583 +    keep node belowtext;
19584 +  run;
19586 +  /* create AboveText value */
19587 +  data abovetext;
19588 +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT in ("INTERVAL", "ORDINAL", "NOMINAL")) );
19589 +  run;
19590 +  proc sort data=abovetext; by node numeric_value; run;
19592 +  %let sp_precision = %sysevalf(1 / 10**&EM_PROPERTY_SPLITPRECISION);
19593 +  data abovetext;
19594 +    set abovetext(rename=(node=parent));
19595 +    by parent numeric_value;
19596 +    retain abovetext tempstring flag branch origval origchar ;
19597 +    length abovetext $256;
19598 +    length tempstring origchar $64;
19600 +    if STAT in ("INTERVAL", "ORDINAL") then do;
19601 +      if first.parent then do;
19602 +        if missing(character_value) then do;
19603 +          numeric_value = round(numeric_value, &sp_precision);
19604 +          abovetext = "< "||strip(NUMERIC_VALUE);
19605 +          branch = 1;
19606 +          origval = numeric_value;
19607 +          output;
19608 +        end;
19609 +        else do;
19610 +          abovetext = "< "||strip(CHARACTER_VALUE);
19611 +          branch = 1;
19612 +          origchar = character_value;
19613 +          output;
19614 +        end;
19616 +        if first.parent AND last.parent then do;
19617 +          if missing(character_value) then do;
19618 +            numeric_value = round(numeric_value, &sp_precision);
19619 +            branch = branch + 1;
19620 +            abovetext = ">= "||strip(NUMERIC_VALUE);
19621 +            output;
19622 +          end;
19623 +          else do;
19624 +            branch = branch + 1;
19625 +            abovetext = ">= "||strip(CHARACTER_VALUE);
19626 +            output;
19627 +          end;
19628 +        end;
19629 +      end;
19630 +      else if last.parent then do;
19631 +        if ( missing(character_value) AND (origval ne numeric_value)) or ( ^missing(character_value) AND (origchar ne character_value)) then do;
19632 +          if missing(character_value) then do;
19633 +            numeric_value = round(numeric_value, &sp_precision);
19634 +            abovetext= "[ "||strip(origval)||", "|| strip(numeric_value)||" )";
19635 +          end;
19636 +          else do;
19637 +            abovetext= ">= "||strip(origchar)||" AND < "|| strip(character_value);
19638 +          end;
19639 +          branch = branch + 1;
19640 +          output;
19642 +          if missing(character_value) then do;
19643 +            numeric_value = round(numeric_value, &sp_precision);
19644 +            abovetext = ">= "||strip(NUMERIC_VALUE);
19645 +          end;
19646 +          else do;
19647 +            abovetext = ">= "||strip(CHARACTER_VALUE);
19648 +          end;
19649 +          branch = branch + 1;
19650 +          output;
19651 +        end;
19652 +        else do;
19653 +          if missing(character_value) then do;
19654 +            numeric_value = round(numeric_value, &sp_precision);
19655 +            abovetext = ">= "||strip(NUMERIC_VALUE);
19656 +          end;
19657 +          else do;
19658 +            abovetext = ">= "||strip(CHARACTER_VALUE);
19659 +          end;
19660 +          branch = branch + 1;
19661 +          output;
19662 +        end;
19663 +      end;
19664 +      else do;
19665 +        if ( missing(character_value) AND (origval ne numeric_value)) or ( ^missing(character_value) AND (origchar ne character_value)) then do;
19666 +          if missing(character_value) then do;
19667 +            numeric_value = round(numeric_value,&sp_precision);
19668 +            abovetext= "[ "||strip(origval)||", "|| strip(numeric_value)||" )";
19669 +            origval = numeric_value;
19670 +          end;
19671 +          else do;
19672 +            abovetext= ">= "||strip(origchar)||" AND < "|| strip(character_value);
19673 +            origchar = character_value;
19674 +          end;
19675 +          branch = branch + 1;
19676 +          output;
19678 +        end;
19679 +        else do;
19680 +          if missing(character_value) then do;
19681 +            numeric_value = round(numeric_value, &sp_precision);
19682 +            abovetext = ">= "||strip(NUMERIC_VALUE);
19683 +            origval = numeric_value;
19684 +          end;
19685 +          else do;
19686 +            abovetext = ">= "||strip(CHARACTER_VALUE);
19687 +            origval = character_value;
19688 +          end;
19689 +          branch = branch + 1;
19690 +          output;
19691 +        end;
19692 +      end;
19693 +    end;
19694 +    else do;
19695 +       if first.numeric_value then do;
19696 +         flag = 0;
19697 +         abovetext = strip(CHARACTER_VALUE);
19698 +         branch = numeric_value;
19699 +         if first.numeric_value AND last.numeric_value then do;
19700 +           output;
19701 +         end;
19702 +       end;
19703 +       else if last.numeric_value then do;
19704 +         if flag=0 then do;
19705 +           tempstring = strip(abovetext)||", "||strip(CHARACTER_VALUE);
19706 +           length = length(strip(tempstring));
19707 +           if length < 32 then do;
19708 +             abovetext = strip(tempstring);
19709 +           end;
19710 +           else do;
19711 +             abovetext = strip(abovetext)||", ...";
19712 +             flag = 1;
19713 +           end;
19714 +         end;
19715 +         branch = numeric_value;
19716 +         output;
19717 +       end;
19718 +       else do;
19719 +         if flag=0 then do;
19720 +           tempstring = strip(abovetext)||", "||strip(CHARACTER_VALUE);
19721 +           length = length(strip(tempstring));
19722 +           if length < 32 then do;
19723 +             abovetext = strip(tempstring);
19724 +           end;
19725 +           else do;
19726 +             abovetext = strip(abovetext)||", ...";
19727 +             flag=1;
19728 +           end;
19729 +         end;
19730 +         branch = numeric_value;
19731 +       end;
19732 +    end;
19733 +    keep parent branch abovetext;
19734 +  run;
19736 +  /* MIssing value to abovetext */
19737 +  data tempmissing;
19738 +    set &EM_USER_OUTRULES;
19739 +    if ((ROLE="PRIMARY") AND (STAT in ("MISSING")));
19740 +    rename node=parent numeric_value=branch character_value=misschar;
19741 +  run;
19744 +  proc sort data=abovetext; by parent branch; run;
19745 +  proc sort data=tempmissing; by parent branch; run;
19746 +  proc sort data=&EM_USER_OUTNODES out=tempoutnodes; by parent branch; run;
19748 +  data tempoutnodes;
19749 +    merge abovetext tempoutNodes(drop=abovetext) tempmissing(in=_a);
19750 +    by parent branch;
19751 +    length traintotal validtotal 8;
19752 +    retain traintotal validtotal;
19754 +    if _a then do;
19755 +      if ^MISSING(abovetext) then do;
19756 +        abovetext= strip(abovetext)||" %sysfunc(sasmsg(sashelp.dmine, tree_ormiss_vlabel, noquote))";
19757 +      end;
19758 +      else do;
19759 +        abovetext = " %sysfunc(sasmsg(sashelp.dmine, tree_missonly_vlabel, noquote))";
19760 +      end;
19761 +    end;
19762 +    if MISSING(abovetext) then abovetext="%sysfunc(sasmsg(sashelp.dmine, tree_nonmiss_vlabel, noquote))";
19764 +    if node=1 then do;
19765 +      traintotal = N;
19766 +      validtotal=VN;
19767 +    end;
19769 +    drop role rank stat misschar belowtext;
19770 +  run;
19771 +  proc sort data=tempoutnodes; by node; run;
19772 +  proc sort data=belowtext; by node; run;
19774 +  data tempoutnodes;
19775 +    merge tempoutnodes belowtext;
19776 +    by node;
19778 +  run;
19780 +  /* determine if adjusted counts exists; if so, use these vs true counts */
19781 +  %let adjusted = N;
19782 +  %let npriors = 0;
19783 +  data _null_ ;
19784 +    set &EM_USER_outstats(where=(STATNAME="NPRIORS")) end=eof ;
19785 +    if eof then do ;
19786 +      call symput("npriors" , strip(put(_N_,best.))) ;
19787 +    end;
19788 +  run;
19789 +  %if &npriors gt 0 %then %let adjusted=Y;
19792 +  /* create a table with targetUsed and targetLevel columns for each node */
19793 +  data temptarmeta;
19794 +    set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL'
19795 +    %if &multipleTar eq N %then %do;
19796 +      AND USE in ('D', 'Y')
19797 +    %end;
19798 +    ));
19799 +    length TARGET $32;
19800 +    Target=name;
19801 +    keep target level;
19802 +  run;
19804 +  %if &multipleTar eq Y %then %do;
19805 +    data temptargetused;
19806 +      set &EM_USER_OUTSTATS(where=(STATNAME="TARGET"));
19807 +      keep node target;
19808 +    run;
19809 +    proc sort data=temptargetused; by target; run;
19810 +    proc sort data=temptarmeta; by target; run;
19811 +    data temptargetused;
19812 +      merge temptargetused(in=_a) temptarmeta(in=_b rename=(level=tarlevel));
19813 +      by target;
19814 +      if _a and _b;
19815 +    run;
19816 +  %end;
19817 +  %else %do;
19818 +    data temptargetused;
19819 +      set &EM_USER_OUTSTATS;
19820 +      length target $32 tarlevel $10;
19821 +      target="%EM_TARGET";
19822 +      tarlevel="%EM_TARGET_LEVEL";
19823 +      keep node target tarlevel;
19824 +    run;
19825 +    proc sort data=temptargetused nodupkey; by node; run;
19826 +  %end;
19828 +  /* merge this infomration back into outstats, keeping only stats for the target used in the tree */
19829 +  proc sort data=&EM_USER_OUTSTATS out=tempoutstats; by node; run;
19830 +  proc sort data=temptargetused; by node; run;
19833 +  /* create tables for all interval targets as well as all class targets */
19834 +  data tempinterval tempclass;
19835 +    merge tempoutstats temptargetused( rename=(target=targetused));
19836 +    by node;
19837 +    %if "&multipleTar" eq "Y" %then %do;
19838 +      if ((missing(Target)) OR (target=targetused ));
19839 +    %end;
19841 +    if tarlevel="INTERVAL" then output tempinterval;
19842 +    else output tempclass;
19843 +  run;
19845 +  /* iniitalize intTarget and classTarget flags */
19846 +  %let em_intNobs =0;
19847 +  %let em_classNobs = 0;
19848 +  %let em_intTarget= N;
19849 +  %let em_classTarget= N;
19851 +  proc sql;
19852 +    reset noprint;
19853 +    select count(*) into :em_intNobs from tempinterval;
19854 +  quit;
19855 +  proc sql;
19856 +    reset noprint;
19857 +    select count(*) into :em_classNobs from tempclass;
19858 +  quit;
19860 +  %if &em_intNobs gt 0 %then %let em_intTarget=Y;
19861 +  %if &em_classNobs gt 0 %then %let em_classTarget=Y;
19863 +  /* retrieve all information for interval targets */
19864 +  %if &em_intTarget eq Y %then %do;
19866 +    /* determine if leaf variable exists */
19867 +    %let dsid=%sysfunc(open(tempinterval,i));
19868 +    %let leafexists=%sysfunc(varnum(&dsid,LEAF));
19869 +    %let rc=%sysfunc(close(&dsid));
19871 +    proc transpose data=tempinterval
19872 +      %if &leafexists %then %do;
19873 +        (drop=leaf)
19874 +      %end;
19875 +      %if &validexist %then %do;
19876 +       out=tempinterval(keep=NODE N VALID: N PREDICTION VALID: PREDICTION RASE VALID: RASE rename=(VALID__N=VN VALID__PREDICTION=VPREDICTION VALID__RASE=VRASE)) ;
19877 +      %end;
19878 +      %else %do;
19879 +         out=tempinterval(keep=NODE N PREDICTION RASE ) ;
19880 +      %end;
19881 +      by node;
19882 +      id statname;
19883 +    run;
19884 +    data tempinterval;
19885 +      set tempinterval;
19886 +      if missing(N) then delete;
19887 +    run;
19888 +  %end;
19890 +  /* retrieve all information for class targets */
19891 +  %if &em_classTarget eq Y %then %do;
19892 +    proc sort data=tempclass; by node category; run;
19893 +    %if &validflag eq N %then %do;
19894 +      data tempn(keep=NODE STATVALUE) temppredict(Keep=NODE CATEGORY) tempprob(keep=NODE STATVALUE CATEGORY TARGET )
19895 +           tempprofit(KEEP=NODE STATVALUE CATEGORY  ) temploss(KEEP=NODE STATVALUE CATEGORY  );
19896 +    %end;
19897 +    %else %do;
19898 +     data tempn(keep=NODE STATVALUE STATNAME) temppredict(Keep=NODE CATEGORY) tempprob(keep=NODE STATVALUE CATEGORY TARGET ) tempvprob(keep=NODE STATVALUE CATEGORY TARGET )
19899 +          tempprofit(KEEP=NODE STATVALUE STATNAME CATEGORY ) temploss(KEEP=NODE STATVALUE STATNAME CATEGORY );
19900 +    %end;
19901 +      set tempclass;
19903 +      %if &validflag eq N %then %do;
19904 +        %if "&adjusted" eq "N" %then %do;
19905 +          if statname="N" then output tempn;
19906 +        %end;
19907 +        %else %do;
19908 +          if statname="NPRIORS" then output tempn;
19909 +        %end;
19910 +        else if statname="PREDICTION" then output temppredict;
19911 +        else if statname="PROBABILITY" then output tempprob;
19912 +        else if statname="ALTERNATIVE PROFIT" then output tempprofit;
19913 +        else if statname="ALTERNATIVE LOSS" then output temploss;
19914 +      %end;
19915 +      %else %do;
19916 +        %if "&adjusted" eq "N" %then %do;
19917 +          if ((statname="N") OR (statname="VALID: N")) then output tempn;
19918 +        %end;
19919 +        %else %do;
19920 +          if ((statname="NPRIORS") or (statname="VALID: NPRIORS") ) then output tempn;
19921 +        %end;
19922 +        else if statname="PREDICTION" then output temppredict;
19923 +        else if statname="PROBABILITY" then output tempprob;
19924 +        else if statname="VALID: PROBABILITY" then output tempvprob;
19925 +        else if ((statname="ALTERNATIVE PROFIT") or (statname="VALID: ALTERNATIVE PROFIT")) then output tempprofit;
19926 +        else if ((statname="ALTERNATIVE LOSS") OR (statname="VALID: ALTERNATIVE LOSS")) then output temploss;
19927 +      %end;
19928 +    run;
19931 +    /* determine if profit/loss exists in tempprofit */
19932 +    %let em_profitflag=0;
19933 +    %let em_lossflag=0;
19934 +    proc sql;
19935 +      reset noprint;
19936 +      select count(*) into :em_profitflag from tempprofit;
19937 +    quit;
19938 +    proc sql;
19939 +      reset noprint;
19940 +      select count(*) into :em_lossflag from temploss;
19941 +    quit;
19943 +    %if &validFlag eq Y %then %do;
19944 +      proc transpose data=tempn
19945 +        %if "&adjusted" eq "N" %then %do;
19946 +           out=tempn(keep=node N VALID__N rename=(VALID__N=VN));
19947 +        %end;
19948 +        %else %do;
19949 +           out=tempn(keep=node NPRIORS VALID__NPRIORS rename=( VALID__NPRIORS=VNPRIORS));
19950 +        %end;
19951 +        by node;
19952 +        id statname;
19953 +      run;
19954 +      %if &em_profitflag ne 0 %then %do;
19955 +        proc transpose data=tempprofit out=tempprofit;
19956 +          by node category;
19957 +          id statname ;
19958 +        run;
19959 +      %end;
19960 +      %if &em_lossflag ne 0 %then %do;
19961 +        proc transpose data=temploss out=temploss;
19962 +          by node category;
19963 +          id statname ;
19964 +        run;
19965 +      %end;
19966 +      data tempprob;
19967 +        merge tempprob tempvprob(rename=(statvalue=vstatvalue));
19968 +        by node
19969 +        %if &multipleTar eq Y %then %do;
19970 +          target
19971 +        %end;
19972 +        category;
19973 +      run;
19974 +    %end;
19976 +    /* store percentcorrect value */
19977 +    data temppredict;
19978 +      merge tempprob temppredict(in=_a);
19979 +      by node category;
19980 +      if _a then do;
19981 +        percentCorrect = statvalue;
19982 +        %if &validFlag eq Y %then %do;
19983 +          vpercentCorrect= vstatvalue;
19984 +        %end;
19985 +      end;
19986 +      label percentCorrect="%sysfunc(sasmsg(sashelp.dmine, rpt_percentcorrect_vlabel, noquote))"
19987 +      %if &validFlag eq Y %then %do;
19988 +         vpercentCorrect="%sysfunc(sasmsg(sashelp.dmine, rpt_vpercentcorrect_vlabel, noquote))"
19989 +      %end;
19990 +      ;
19991 +      if missing(percentCorrect) then delete;
19992 +      drop target;
19993 +    run;
19995 +    /* build profittext */
19996 +    %if ((&em_profitflag ne 0) OR (&em_lossflag ne 0)) %then %do;
19997 +      data tempprofittext(keep= node profittext profitloss);
19998 +        length profittext $800 profitloss 8.;
19999 +        retain profittext profitloss;
20001 +        merge tempprob
20002 +        %if &em_profitflag ne 0 %then %do;
20003 +          tempprofit
20004 +        %end;
20005 +        %else %if &em_lossflag ne 0 %then %do;
20006 +          temploss
20007 +        %end;
20008 +        ;
20009 +        by node category;
20011 +        /* EVENT ONLY IS NOT AVAILALBE FOR MULTIPLE TARGETS AS ONLY PRIMARY TARGET IS IN EM_TARGETDECINFO TO RETRIEVE EVENT LEVEL */
20012 +        %let profittype = &EM_PROPERTY_PROFITLOSS;
20013 +        %if ((&multipleTar eq Y) AND ("&EM_PROPERTY_PROFITLOSS" eq "EVENT"))  %then %do;
20014 +          %let profittype = ALL;
20015 +        %end;
20017 +        /* create the profitloss variable for nodecolor if selected */
20018 +        label profitloss="%sysfunc(sasmsg(sashelp.dmine, rpt_profitloss_vlabel, noquote))";
20020 +        %if "&profittype" eq "ALL" %then %do;
20021 +          if strip(CATEGORY)="&targetEvent" then do;
20022 +            profitloss=statvalue;
20023 +          end;
20024 +          if first.node then do;
20025 +            %if &validFlag eq N %then %do;
20026 +             %if &em_profitflag ne 0 %then %do;
20027 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
20028 +             %end;
20029 +             %if &em_lossflag ne 0 %then %do;
20030 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
20031 +             %end;
20032 +            %end;
20033 +            %else %do;
20034 +             %if &em_profitflag ne 0 %then %do;
20035 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)
20035!+;
20036 +             %end;
20037 +             %if &em_lossflag ne 0 %then %do;
20038 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION);
20039 +             %end;
20040 +            %end;
20041 +          end;
20042 +          else if last.node then do;
20043 +            %if &validFlag eq N %then %do;
20044 +             %if &em_profitflag ne 0 %then %do;
20045 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
20046 +             %end;
20047 +             %if &em_lossflag ne 0 %then %do;
20048 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
20049 +             %end;
20050 +             /*if CATEGORY="&targetEvent" then do;
20051 +               profitloss=statvalue;
20052 +             end;*/
20053 +            %end;
20054 +            %else %do;
20055 +             %if &em_profitflag ne 0 %then %do;
20056 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT,
20056!+14.&EM_PROPERTY_SPLITPRECISION);
20057 +                if CATEGORY="&targetEvent" then do;
20058 +                 profitloss=ALTERNATIVE_PROFIT;
20059 +                end;
20060 +             %end;
20061 +             %if &em_lossflag ne 0 %then %do;
20062 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS,
20062!+14.&EM_PROPERTY_SPLITPRECISION);
20063 +                if CATEGORY="&targetEvent" then do;
20064 +                  profitloss=ALTERNATIVE_LOSS;
20065 +                end;
20066 +             %end;
20067 +            %end;
20068 +            output;
20069 +          end;
20070 +          else do;
20071 +            %if &validFlag eq N %then %do;
20072 +             %if &em_profitflag ne 0 %then %do;
20073 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
20074 +             %end;
20075 +             %if &em_lossflag ne 0 %then %do;
20076 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
20077 +             %end;
20078 +            %end;
20079 +            %else %do;
20080 +             %if &em_profitflag ne 0 %then %do;
20081 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT,
20081!+14.&EM_PROPERTY_SPLITPRECISION);
20082 +             %end;
20083 +             %if &em_lossflag ne 0 %then %do;
20084 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS,
20084!+14.&EM_PROPERTY_SPLITPRECISION);
20085 +             %end;
20086 +            %end;
20087 +          end;
20088 +        %end;
20089 +        %else %if (("&profittype" eq "EVENT") AND ("&targetEvent" ne "" )) %then %do;
20090 +          if strip(CATEGORY) = "&targetevent" then do;
20091 +            %if &validFlag eq N %then %do;
20092 +             %if &em_profitflag ne 0 %then %do;
20093 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
20094 +             %end;
20095 +             %if &em_lossflag ne 0 %then %do;
20096 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
20097 +             %end;
20098 +             profitloss=statvalue;
20099 +            %end;
20100 +            %else %do;
20101 +             %if &em_profitflag ne 0 %then %do;
20102 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)
20102!+;
20103 +                profitloss=ALTERNATIVE_PROFIT;
20104 +             %end;
20105 +             %if &em_lossflag ne 0 %then %do;
20106 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION);
20107 +                profitloss=ALTERNATIVE_LOSS;
20108 +             %end;
20109 +            %end;
20110 +            output;
20111 +          end;
20112 +        %end;
20113 +        %else %if (("&profittype" eq "NONE") AND ("&targetEvent" ne "" )) %then %do;
20114 +          if strip(CATEGORY) = "&targetevent" then do;
20115 +            %if &validFlag eq N %then %do;
20116 +             profitloss=statvalue;
20117 +            %end;
20118 +            %else %do;
20119 +             %if &em_profitflag ne 0 %then %do;
20120 +                profitloss=ALTERNATIVE_PROFIT;
20121 +             %end;
20122 +             %if &em_lossflag ne 0 %then %do;
20123 +                profitloss=ALTERNATIVE_LOSS;
20124 +             %end;
20125 +            %end;
20126 +            output;
20127 +          end;
20128 +        %end;
20129 +      run;
20130 +    %end;
20132 +    data tempprob(keep= node probtext);
20133 +      length probtext $800;
20134 +      retain probtext;
20135 +      set tempprob ;
20136 +      by node;
20138 +      /* EVENT ONLY IS NOT AVAILALBE FOR MULTIPLE TARGETS AS ONLY PRIMARY TARGET IS IN EM_TARGETDECINFO TO RETRIEVE EVENT LEVEL */
20139 +      %let probtype = &EM_PROPERTY_TARGET;
20140 +      %if ((&multipleTar eq Y) AND ("&EM_PROPERTY_TARGET" eq "EVENT"))  %then %do;
20141 +        %let probtype = ALL;
20142 +      %end;
20144 +      %if "&probtype" eq "ALL" %then %do;
20145 +        if first.node then do;
20146 +          %if &validFlag eq N %then %do;
20147 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
20148 +          %end;
20149 +          %else %do;
20150 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
20151 +          %end;
20152 +        end;
20153 +        else if last.node then do;
20154 +          %if &validFlag eq N %then %do;
20155 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
20156 +          %end;
20157 +          %else %do;
20158 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
20159 +          %end;
20160 +          output;
20161 +        end;
20162 +        else do;
20163 +          %if &validFlag eq N %then %do;
20164 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
20165 +          %end;
20166 +          %else %do;
20167 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
20168 +          %end;
20169 +        end;
20170 +      %end;
20171 +      %else %if (("&probtype" eq "EVENT") AND ("&targetEvent" ne "" )) %then %do;
20172 +        if strip(CATEGORY) = "&targetevent" then do;
20173 +          %if &validFlag eq N %then %do;
20174 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
20175 +          %end;
20176 +          %else %do;
20177 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
20178 +          %end;
20179 +          output;
20180 +        end;
20181 +      %end;
20182 +      %else %if "&probtype" eq "NONE" %then %do;
20183 +        if last.node then do;
20184 +          output;
20185 +        end;
20186 +      %end;
20187 +    run;
20188 +  %end;
20190 +  proc sort data=tempoutnodes out=tempoutnodes; by node; run;
20192 +  %let oldexists=0;
20193 +  %if %sysfunc(exist(&EM_USER_TREE_PLOT)) %then %do;
20194 +     data old_tree_plot;
20195 +        set &EM_USER_TREE_PLOT(keep=node nodecolor);
20196 +        rename nodecolor=oldnodecolor;
20197 +     run;
20199 +     proc sort data=old_tree_plot;
20200 +        by node;
20201 +     run;
20203 +     %let oldexists=1;
20204 +  %end;
20206 +  data &EM_USER_TREE_PLOT;
20207 +    length textall $800;
20208 +    merge tempoutnodes temptargetused
20210 +    %if &em_intTarget eq Y %then %do;
20211 +      tempinterval
20212 +    %end;
20214 +    %if &em_classTarget eq Y %then %do;
20216 +      %if &validFlag eq N %then %do;
20217 +        tempn(rename=(statvalue=N))
20218 +      %end;
20219 +      %else %do;
20220 +        tempn
20221 +      %end;
20223 +      temppredict tempprob
20225 +      %if ((&em_profitflag ne 0) OR (&em_lossflag ne 0)) %then %do;
20226 +        tempprofittext
20227 +      %end;
20228 +    %end;
20229 +    ;
20230 +    by node;
20232 +    /* build nodetext based on user selection */
20233 +    textall="";
20235 +    %if &em_intTarget eq Y %then %do;
20236 +    if tarlevel="INTERVAL" then do;
20237 +      /* Nodeid */
20238 +      %if "&EM_PROPERTY_SHOWNODEID" eq "Y" %then %do;
20239 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_nodeId_vlabel, noquote )): "||"09"x||strip(Node);
20240 +      %end;
20242 +      /* Target identifier if multiple targets are used */
20243 +      %if "&multipleTar" eq "Y" %then %do;
20244 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_target_title, noquote, )) "||"09"x||strip(target);
20245 +      %end;
20247 +      %if &validFlag eq Y %then %do;
20248 +         /* Column labels displayed in validflag eq Y only */
20249 +         %if (("&EM_PROPERTY_AVG" eq "Y") OR ("&EM_PROPERTY_RASE" eq "Y") OR ("&EM_PROPERTY_COUNT" eq "Y")) %then %do;
20250 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rptstatistic_vlabel, noquote)) "||"09"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_train_vlabel , noquote ))" ||"09"x|| "%sysfunc(sasmsg(sashelp.dmine, rpt_validate_vlabel ,
20250!+noquote ))";
20251 +         %end;
20253 +         /* Average values */
20254 +         %if "&EM_PROPERTY_AVG" eq "Y" %then %do;
20255 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote)): "||"09"x||put(PREDICTION, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VPREDICTION, 14.&EM_PROPERTY_SPLITPRECISION);
20256 +         %end;
20258 +         /* RASE */
20259 +         %if "&EM_PROPERTY_RASE" eq "Y" %then %do;
20260 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rase_vlabel, noquote)): "||"09"x||put(RASE, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VRASE, 14.&EM_PROPERTY_SPLITPRECISION);
20261 +         %end;
20263 +         /* Count */
20264 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
20265 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(N)||"09"x||strip(VN);
20266 +         %end;
20267 +      %end;
20268 +      %else %do;
20269 +         /* Average values */
20270 +         %if "&EM_PROPERTY_AVG" eq "Y" %then %do;
20271 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote)): "||"09"x||put(PREDICTION, 14.&EM_PROPERTY_SPLITPRECISION);
20272 +         %end;
20274 +         /* RASE */
20275 +         %if "&EM_PROPERTY_RASE" eq "Y" %then %do;
20276 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rase_vlabel, noquote)): "||"09"x||put(RASE, 14.&EM_PROPERTY_SPLITPRECISION);
20277 +         %end;
20279 +         /* Count */
20280 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
20281 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(N);
20282 +         %end;
20283 +      %end;
20285 +      /* nodecolor */
20286 +      %if "&EM_PROPERTY_INTCOLORBY" eq "AVG" %then %do;
20287 +        nodecolor=PREDICTION;
20288 +      %end;
20289 +      %else %if "&EM_PROPERTY_INTCOLORBY" eq "RASE" %then %do;
20290 +        nodecolor=RASE;
20291 +      %end;
20292 +      %else %if "&EM_PROPERTY_INTCOLORBY" eq "SINGLE" %then %do;
20293 +        nodecolor=1;
20294 +      %end;
20296 +    end;
20297 +    %end;
20298 +    %if &em_classTarget eq Y %then %do;
20299 +    if tarlevel^="INTERVAL" then  do;
20301 +      /* Nodeid */
20302 +      %if "&EM_PROPERTY_SHOWNODEID" eq "Y" %then %do;
20303 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_nodeId_vlabel, noquote )): "||"09"x||strip(Node);
20304 +      %end;
20305 +      /* Target identifier if multiple targets are used */
20306 +      %if "&multipleTar" eq "Y" %then %do;
20307 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_target_title, noquote, )) "||"09"x||strip(target);
20308 +      %end;
20310 +      /* Predicted values */
20311 +      %if "&EM_PROPERTY_PRED" eq "Y" %then %do;
20312 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_pls_score_predvalue, noquote, )): "||"09"x||strip(CATEGORY);
20313 +      %end;
20315 +      /* Column labels displayed in validflag eq Y only */
20316 +      %if "&ValidFlag" eq "Y" %then %do;
20317 +        %if (("&EM_PROPERTY_TARGET" ne "NONE") OR ("&EM_PROPERTY_PROFITLOSS" ne "NONE") OR ("&EM_PROPERTY_PERCENTCORRECT" eq "Y") OR ("&EM_PROPERTY_COUNT" eq "Y")) %then %do;
20318 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rptstatistic_vlabel, noquote)) "||"09"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_train_vlabel , noquote ))" ||"09"x|| "%sysfunc(sasmsg(sashelp.dmine, rpt_validate_vlabel ,
20318!+noquote ))";
20319 +        %end;
20320 +      %end;
20322 +      /* Target Values */
20323 +      %if "&EM_PROPERTY_TARGET" ne "NONE" %then %do;
20324 +        textall=strip(textall)||"0A"x||strip(probtext);
20325 +      %end;
20327 +      /* include profit or loss for all target levels */
20328 +      %if ( "&EM_PROPERTY_PROFITLOSS" ne "NONE" AND ((&em_profitflag ne 0) OR (&em_lossflag ne 0))) %then %do;
20329 +        textall=strip(textall)||"0A"x||strip(profittext);
20330 +      %end;
20332 +      %if &validFlag eq N %then %do;
20333 +        /* Percent Correct */
20334 +        %if "&EM_PROPERTY_PERCENTCORRECT" eq "Y" %then %do;
20335 +          textall=strip(textall)||"0A"x||"Percent Correct: "||"09"x||strip(put(percentcorrect, percent10.2));
20336 +        %end;
20338 +         /* Count */
20339 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
20340 +          %if "&adjusted" eq "N" %then %do;
20341 +            textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(N, best12.));
20342 +          %end;
20343 +          %else %do;
20344 +            textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(NPRIORS, 15.&EM_PROPERTY_SPLITPRECISION));
20345 +          %end;
20346 +         %end;
20347 +      %end;
20348 +      %else %do;
20349 +        /* Percent Correct */
20350 +        %if "&EM_PROPERTY_PERCENTCORRECT" eq "Y" %then %do;
20351 +          textall=strip(textall)||"0A"x||"Percent Correct: "||"09"x||strip(put(percentcorrect, percent10.2))||"09"x||strip(put(vpercentcorrect, percent10.2));
20352 +        %end;
20354 +         /* Count */
20355 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
20356 +          %if "&adjusted" eq "N" %then %do;
20357 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(N, best12.))||"09"x||strip(put(VN, best12.));
20358 +          %end;
20359 +          %else %do;
20360 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(NPRIORS,15.&EM_PROPERTY_SPLITPRECISION))||"09"x||strip(put(VNPRIORS,15.&EM_PROPERTY_SPLITPRECISION));
20361 +          %end;
20362 +         %end;
20363 +      %end;
20365 +      /* nodecolor */
20366 +      %if "&EM_PROPERTY_CLASSCOLORBY" eq "PERCENTEVENT" %then %do;
20367 +       %if &multipleTar ne Y %then %do;
20368 +        nodecolor=&predTarget;
20369 +       %end;
20370 +       %else %do;
20371 +         nodecolor=percentcorrect;
20372 +       %end;
20373 +      %end;
20374 +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "PERCENTCORRECT" %then %do;
20375 +        nodecolor=percentcorrect;
20376 +      %end;
20377 +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "SINGLE" %then %do;
20378 +        nodecolor=1;
20379 +      %end;
20380 +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "PROFITLOSS" %then %do;
20381 +        %if ((&em_profitflag eq 0) AND (&em_lossflag eq 0)) %then %do;
20382 +          nodecolor=percentcorrect;
20383 +        %end;
20384 +        %else %do;
20385 +          nodecolor=profitloss;
20386 +        %end;
20387 +      %end;
20389 +    end;
20390 +    %end;
20391 +    %if &em_intTarget eq Y %then %do;
20392 +     drop  PREDICTION  TARGET TARLEVEL
20393 +     %if &ValidFlag eq Y %then %do;
20394 +         VPREDICTION
20395 +     %end;
20396 +     ;
20397 +    %end;
20398 +    %if &em_classTarget eq Y %then %do;
20399 +     drop CATEGORY PROBTEXT  TARGET TARLEVEL STATVALUE
20400 +     %if &ValidFlag eq Y %then %do;
20401 +         VSTATVALUE
20402 +     %end;
20403 +     ;
20404 +    %end;
20406 +  run;
20408 +  /* add leaf index information to plotds - based on primary target only*/
20409 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
20410 +    data tempprob(keep=node statname statvalue rename=(statvalue=&predTarget));
20411 +      set &EM_USER_OUTSTATS;
20412 +      if ((statname="PROBABILITY"
20413 +      %if &validexist %then %do;
20414 +       or statname="VALID: PROBABILITY"
20415 +      %end;
20416 +      ) AND (CATEGORY="&TARGETEVENT")
20417 +      %if "&multipleTar" eq "Y" %then %do;
20418 +        AND (Target="%EM_TARGET")
20419 +      %end;
20420 +      );
20421 +    run;
20423 +    %if &validexist %then %do;
20424 +      proc sort data=tempprob; by node; run;
20425 +      %let vpredTarget = V%substr(&predTarget, 2);
20426 +      proc transpose data=tempprob out=tempprob(keep=NODE PROBABILITY VALID__PROBABILITY rename=(PROBABILITY=&predTarget VALID__PROBABILITY=&vpredTarget));
20427 +         by node;
20428 +         id statname;
20429 +      run;
20430 +    %end;
20431 +  %end;
20432 +  %else %do;
20433 +    data tempprob(keep=node statname statvalue rename=(statvalue=&predTarget));
20434 +      set &EM_USER_OUTSTATS;
20435 +      if ((statname="PREDICTION"
20436 +      %if &validexist %then %do;
20437 +       or statname="VALID: PREDICTION"
20438 +      %end;
20439 +      )
20440 +      %if "&multipleTar" eq "Y" %then %do;
20441 +        AND (Target="%EM_TARGET")
20442 +      %end;
20443 +      );
20444 +    run;
20445 +    %if &validexist %then %do;
20446 +      proc sort data=tempprob; by node; run;
20447 +      %let vpredTarget = V%substr(&predTarget, 2);
20448 +      proc transpose data=tempprob out=tempprob(keep=NODE PREDICTION VALID__PREDICTION rename=(PREDICTION=&predTarget VALID__PREDICTION=&vpredTarget));
20449 +         by node;
20450 +         id statname;
20451 +      run;
20452 +    %end;
20453 +  %end;
20455 +  proc sort data=tempprob; by node; run;
20456 +  data tempoutnodes;
20457 +    merge tempoutnodes tempprob;
20458 +    by node;
20459 +  run;
20461 +  proc sort data=tempoutnodes out=tempnodes; by descending &predTarget; run;
20462 +  data tempnodes;
20463 +    retain traintotal validtotal;
20464 +    set tempnodes(where=(leaf ne . ));
20465 +    tprob=round(&predTarget, .01);
20466 +    %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
20467 +      percevent_train=round(tprob*100, .01);
20468 +    %end;
20469 +    %else %do;
20470 +      percevent_train=tprob;
20471 +    %end;
20473 +    perc_train=round((n/traintotal)*100, 0.01);
20474 +    /* leafwidth already has a *10 multiplier */
20475 +    if missing(perc_train) then perc_train = round(linkwidth*10, 0.01);
20477 +    %if &validexist %then %do;
20478 +      %let vpredTarget = V%substr(&predTarget,2);
20479 +      vprob=round(&vpredTarget, .01);
20480 +      %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
20481 +        percevent_valid=round(vprob*100, .01);
20482 +      %end;
20483 +      %else %do;
20484 +        percevent_valid=vprob;
20485 +      %end;
20486 +      perc_valid=round((vn/validtotal)*100, .01);
20487 +    %end;
20489 +    index=_N_;
20490 +    keep node index tprob perc_train percevent_train
20491 +    %if &validexist %then %do;
20492 +        vprob percevent_valid perc_valid
20493 +    %end;
20494 +    ;
20495 +  run;
20496 +  proc sort data=tempnodes; by node; run;
20497 +  data &EM_USER_TREE_PLOT;
20498 +    merge &EM_USER_TREE_PLOT tempnodes %if &oldexists %then old_tree_plot;;
20499 +    by node;
20500 +    if missing(node) then delete;
20501 +    %if &oldexists %then %do;
20502 +      if missing(nodecolor) then nodecolor=oldnodecolor;
20503 +      drop oldnodecolor;
20504 +    %end;
20505 +    abovetext = compbl(abovetext);
20507 +    /* add variable labels */
20508 +    label textall      = "%sysfunc(sasmsg(sashelp.dmine, rpt_textall_vlabel, noquote))"
20509 +          parent       = "%sysfunc(sasmsg(sashelp.dmine, rpt_parentId_vlabel, noquote))"
20510 +          node         = "%sysfunc(sasmsg(sashelp.dmine, rpt_nodeid_vlabel, noquote))"
20511 +          abovetext    = "%sysfunc(sasmsg(sashelp.dmine, rpt_abovetext_vlabel, noquote))"
20512 +          traintotal   = "%sysfunc(sasmsg(sashelp.dmine, rpt_traintotal_vlabel, noquote))"
20513 +          nodecolor    = "%sysfunc(sasmsg(sashelp.dmine, rpt_nodecolor_vlabel, noquote))"
20515 +          %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
20516 +            tprob        = "%sysfunc(sasmsg(sashelp.dmine, rpt_prob_vlabel, noquote, %nrbquote(&targetEvent)))"
20517 +            percevent_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_percevent_train_vlabel, noquote))"
20518 +            perc_train      = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_train_vlabel, noquote))"
20519 +          %end;
20520 +          %else %do;
20521 +            tprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote))"
20522 +            percevent_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_int_train_vlabel, noquote))"
20523 +            perc_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_train_vlabel, noquote))"
20524 +          %end;
20525 +          index           = "%sysfunc(sasmsg(sashelp.dmine, meta_index_vlabel, noquote))"
20527 +          validtotal      = "%sysfunc(sasmsg(sashelp.dmine, rpt_validtotal_vlabel, noquote))"
20528 +          VN              = "%sysfunc(sasmsg(sashelp.dmine, rpt_validn_vlabel, noquote))"
20529 +          %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
20530 +            vprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_vprob_vlabel, noquote, %nrbquote(&targetEvent)))"
20531 +            perc_valid      = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_valid_vlabel, noquote))"
20532 +            percevent_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_percevent_valid_vlabel, noquote))"
20533 +          %end;
20534 +          %else %do;
20535 +            vprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_validaverage_vlabel, noquote))"
20536 +            perc_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_valid_vlabel, noquote))"
20537 +            percevent_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_int_valid_vlabel, noquote))"
20538 +          %end;
20539 +    ;
20540 +  run;
20542 +  /* delete temporary tables */
20543 +  proc datasets lib=work nolist;
20544 +    delete abovetext belowtext tempoutnodes tempmissing temp tempnodes tempstats;
20545 +  run;
20547 +%mend em_tree_makePlotDs;
20551 +%macro em_tree_report;
20553 +   /* report properties */
20554 +   %em_checkmacro(name=EM_PROPERTY_Precision, value=4, global=Y);
20555 +   %em_checkmacro(name=EM_PROPERTY_SplitPrecision, value=4, global=Y);
20556 +   %em_checkmacro(name=EM_PROPERTY_ClassColorBy, value=PERCENTCORRECT, global=Y);
20557 +   %em_checkmacro(name=EM_PROPERTY_IntColorBy, value=AVG, global=Y);
20558 +   %em_checkmacro(name=EM_PROPERTY_ShowNodeId, value=Y, global=Y);
20559 +   %em_checkmacro(name=EM_PROPERTY_ShowValid, value=Y, global=Y);
20560 +   %em_checkmacro(name=EM_PROPERTY_Pred, value=N, global=Y);
20561 +   %em_checkmacro(name=EM_PROPERTY_Target, value=ALL, global=Y);
20562 +   %em_checkmacro(name=EM_PROPERTY_Count, value=Y, global=Y);
20563 +   %em_checkmacro(name=EM_PROPERTY_PercentCorrect, value=N, global=Y);
20564 +   %em_checkmacro(name=EM_PROPERTY_ProfitLoss, value=NONE, global=Y);
20565 +   %em_checkmacro(name=EM_PROPERTY_AVG, value=Y, global=Y);
20566 +   %em_checkmacro(name=EM_PROPERTY_RASE, value=N, global=Y);
20568 +   %let validexist=0;
20569 +   %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)))) %then %do;
20570 +     %let validexist=1;
20571 +   %end;
20573 +   /* determine if multiple targets will be processed */
20574 +   %let em_tree_multipleTargets=N;
20575 +   %let em_tree_numTarget=1;
20576 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
20577 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
20578 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
20579 +         %let em_tree_multipleTargets=N;
20580 +      %end;
20581 +      %else %do;
20582 +        data _null_;
20583 +          set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
20584 +          if eof then
20585 +            call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
20586 +        run;
20588 +        %if &em_tree_numTarget gt 1 %then %do;
20589 +           %let em_tree_multipleTargets=Y;
20590 +        %end;
20591 +     %end;
20592 +   %end;
20594 +  %if "&em_tree_multipleTargets" eq "N" %then %do;
20596 +   /* variable importance */
20597 +   %EM_GETNAME(key=OUTIMPORT, type=DATA);
20598 +   %if %sysfunc(exist(&EM_USER_OUTIMPORT)) eq 1 %then %do;
20600 +     /* determine if vars exists - properties could indicate they are they but freeze=Y would mean the node wasn't retrained */
20601 +     /* and the columns may not be generated                                                                                 */
20602 +     %let em_tree_cvexists=;
20603 +     %let em_tree_surrexists=.;
20604 +     data _null_;
20605 +       set &EM_USER_OUTIMPORT (obs=2) end=eof;
20606 +       if eof then do ;
20607 +        call symput("em_tree_cvexists" , strip(put(cvimportance,best.))) ;
20608 +        call symput("em_tree_surrexists", strip(put(nsurrogates, best.)));
20609 +       end;
20610 +     run;
20612 +     data &EM_USER_OUTIMPORT;
20613 +         set &EM_USER_OUTIMPORT;
20614 +         /* format columns based on Precison value specified */
20615 +         format importance 15.&EM_PROPERTY_PRECISION
20616 +              %if &validexist %then %do;
20617 +                vimportance ratio 15.&EM_PROPERTY_PRECISION
20618 +              %end;
20619 +              %if "&EM_TREE_CVEXISTS" ne "." %then %do;
20620 +                cvimportance vimportance ratio 15.&EM_PROPERTY_PRECISION
20621 +              %end;
20622 +         ;
20623 +     run;
20625 +     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_variableImportance_title  , NOQUOTE))";
20626 +     proc print data=&EM_USER_OUTIMPORT
20627 +        %if "&EM_TREE_SURREXISTS" ne "." %then %do;
20628 +          (where=((nrules>0) OR (nsurrogates>0)))
20629 +        %end;
20630 +        %else %do;
20631 +           (where=(nrules>0))
20632 +        %end;
20633 +        label noobs
20634 +        ;
20635 +     run;
20636 +     title10;
20638 +   %end;
20640 +   /* Sequence */
20641 +   %EM_GETNAME(key=OUTSEQ, type=DATA);
20642 +   %EM_GETNAME(key=OUTOBSIMP, type=DATA);
20643 +   data _null_ ;
20644 +      set &EM_USER_outseq (obs=2) end=eof ;
20645 +      if eof then do ;
20646 +        call symput("em_tree_xase" , strip(put(_XASE_,best.))) ;
20647 +        call symput("em_tree_vase" , strip(put(_VASE_, best.)));
20648 +        call symput("em_tree_seq"  , strip(put(_SEQUENCE_, best.)));
20649 +        call symput("em_tree_vseq"  , strip(put(_VSEQUENCE_, best.)));
20650 +        call symput("em_tree_aprof" , strip(put(_APROF_, best.)));
20651 +        call symput("em_tree_aloss" , strip(put(_ALOSS_, best.)));
20652 +        call symput("em_tree_prior" , strip(put(_PASE_, best.)));
20653 +      end;
20654 +    run;
20656 +   %if %sysfunc(exist(&EM_USER_OUTSEQ)) eq 1 %then %do;
20657 +      data &EM_USER_OUTSEQ;
20658 +      %if (("&EM_PROPERTY_CV" eq "Y") AND ("&em_tree_xase" ne ".")) %then %do;
20659 +        set &EM_USER_OUTSEQ(rename=(_XASE_=_VASE_ _XMAX_=_VMAX_ _XSSE_=_VSSE_ _XRASE_=_VRASE_
20660 +        %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
20661 +           _XMISC_=_VMISC_
20662 +        %end;
20663 +        %if "&em_tree_aprof" ne "."  %then %do;
20664 +           _XAPROF_=_VAPROF_
20665 +           _XPROF_ = _VPROF_
20666 +        %end;
20667 +        %if "&em_tree_aloss" ne "."  %then %do;
20668 +           _XALOSS_=_VALOSS_
20669 +        %end;
20670 +        %if "&EM_TREE_PRIOR" ne "." %then %do;
20671 +           _XPASE_ = _VPASE_
20672 +           _XPMISC_ = _VPMISC_
20673 +        %end;
20675 +        ));
20676 +     %end;
20677 +     %else %do;
20678 +        set &EM_USER_OUTSEQ;
20679 +     %end;
20681 +     format _ASE_  _ASSESS_ _MAX_ _SSE_ _RASE_  15.&EM_PROPERTY_PRECISION
20682 +         %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
20683 +            _MISC_   15.&EM_PROPERTY_PRECISION
20684 +         %end;
20685 +         %if "&EM_TREE_PRIOR" ne "." %then %do;
20686 +            _PASE_  15.&EM_PROPERTY_PRECISION
20687 +            _PMISC_ 15.&EM_PROPERTY_PRECISION
20688 +         %end;
20689 +         %if (("&EM_PROPERTY_CV" eq "Y") AND (("&em_tree_xase" ne ".") or ("&em_tree_vase" ne "."))) %then %do;
20690 +            _VASE_  _VASSESS_ _VMAX_ _VSSE_ _VRASE_ _COST_COMPLEXITY_ 15.&EM_PROPERTY_PRECISION
20691 +            %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
20692 +               _VMISC_ 15.&EM_PROPERTY_PRECISION
20693 +            %end;
20694 +            %if "&EM_TREE_PRIOR" ne "." %then %do;
20695 +              _VPASE_  15.&EM_PROPERTY_PRECISION
20696 +              _VPMISC_ 15.&EM_PROPERTY_PRECISION
20697 +            %end;
20698 +         %end;
20699 +         %if (("&EM_PROPERTY_CV" eq "N") AND &validexist) %then %do;
20700 +            _VASE_  _VASSESS_ _VMAX_ _VSSE_ _VRASE_  15.&EM_PROPERTY_PRECISION
20701 +            %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
20702 +               _VMISC_ 15.&EM_PROPERTY_PRECISION
20703 +            %end;
20704 +         %end;
20705 +         %if "&em_tree_seq" ne "." %then %do;
20706 +           _SEQUENCE_ 15.&EM_PROPERTY_PRECISION
20707 +         %end;
20708 +         %if "&em_tree_vseq" ne "." %then %do;
20709 +           _VSEQUENCE_  15.&EM_PROPERTY_PRECISION
20710 +         %end;
20711 +         %if "&em_tree_aprof" ne "." %then %do;
20712 +           _APROF_ 15.&EM_PROPERTY_PRECISION
20713 +           _PROF_ 15.&EM_PROPERTY_PRECISION
20714 +           %if (("&EM_PROPERTY_CV" eq "Y") OR &validexist) %then %do;
20715 +             _VAPROF_ 15.&EM_PROPERTY_PRECISION
20716 +             _VPROF_ 15.&EM_PROPERTY_PRECISION
20717 +           %end;
20718 +         %end;
20719 +         %else %if "&em_tree_aloss" ne "." %then %do;
20720 +           _ALOSS_  15.&EM_PROPERTY_PRECISION
20721 +           %if (("&EM_PROPERTY_CV" eq "Y") OR &validexist) %then %do;
20722 +             _VALOSS_ 15.&EM_PROPERTY_PRECISION
20723 +           %end;
20724 +         %end;
20725 +      ;
20726 +    run;
20727 +   %end;
20729 +   /* Observation Based Importance */
20730 +   %if (  ("&EM_PROPERTY_OBSIMPORTANCE" eq "Y") AND ( %sysfunc(exist(&EM_USER_OUTOBSIMP)) eq 1)) %then %do;
20732 +      /* need to check for 0 obs */
20733 +      %let dsid = %sysfunc(open(&EM_USER_OUTOBSIMP));
20734 +      %let onobs=%sysfunc(attrn(&dsid,NOBS));
20735 +      %let rc=%sysfunc(close(&dsid));
20737 +      %if &onobs %then %do;
20738 +         proc sort data=&EM_USER_OUTOBSIMP; by _INPUT1_; run;
20739 +         proc sort data=&em_data_variableset out=_tempvars; by NAME; run;
20741 +         data &EM_USER_OUTOBSIMP;
20742 +           merge _tempvars(rename=(NAME=_INPUT1_) keep=NAME LABEL) &EM_USER_OUTOBSIMP(in=_a)  ;
20743 +           if _a;
20744 +           by _INPUT1_;
20745 +           format  _ASE_ _MAX_ _SSE_ _RASE_ 15.&EM_PROPERTY_PRECISION
20746 +                   %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
20747 +                     _MISC_ 15.&EM_PROPERTY_PRECISION
20748 +                   %end;
20749 +                   ;
20750 +         run;
20751 +         %EM_REPORT(key=OUTOBSIMP, viewtype=DATA, block=MODEL, description=OBSIMPFIT, autodisplay=N);
20752 +      %end;
20753 +   %end;
20755 +  %end;
20757 +  /* create dataset to support tree diagram and icicle plot */
20758 +  %EM_GETNAME(key=TREE_PLOT, type=DATA);
20759 +  %em_tree_makePlotDs(multipleTar = &em_tree_multipleTargets);
20761 +  /* display tree diagram */
20762 +  %em_report(key=TREE_PLOT, viewtype=DTree, id=NODE, parent=PARENT, nodetext=NODETEXT, tipText=TEXTALL, abovetext=ABOVETEXT, belowText=BELOWTEXT,
20763 +             nodesize=N, nodecolor=NODECOLOR, linkwidth=LINKWIDTH,  block=MODEL, description=TREE, autodisplay=Y);
20765 +  /* display icicle diagram */
20766 +  %em_report(key=TREE_PLOT, viewtype=Icicle, id=NODE, parent=PARENT, nodetext=NODETEXT, tipText=TEXTALL,
20767 +             nodesize=N, nodecolor=NODECOLOR, block=MODEL, description=ICICLE, autodisplay=Y);
20769 +  /* Leaf Statistics Plot */
20770 +  %em_report(key=TREE_PLOT, viewtype=AREABAR, x=NODE, y=PERCEVENT_TRAIN, WIDTH=PERC_TRAIN,block=MODEL, description=VARWIDTH, autodisplay=N);
20772 +  /* print leaf information to output window */
20773 +  %if %sysfunc(exist(&EM_USER_TREE_PLOT)) eq 1 %then %do;
20775 +     proc sort data=&EM_USER_TREE_PLOT out=t;
20776 +       by descending N;
20777 +     run;
20779 +     /* determine if vn is present in the data -- combinations of decisions/partition/cv cause the proc not to generate this stat */
20780 +     %local vn;
20781 +     data _null_;
20782 +       set t (obs=2) end=eof;
20783 +       if eof then do;
20784 +         call symput("vn", strip(put(vn, best.)));
20785 +       end;
20786 +     run;
20788 +     data t;
20789 +       set t;
20790 +       label N="%sysfunc(sasmsg(sashelp.dmine, rpt_trainingobs_vlabel  , NOQUOTE))"
20791 +             DEPTH="%sysfunc(sasmsg(sashelp.dmine, rpt_depth_vlabel  , NOQUOTE))"
20792 +       %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
20793 +            tprob = "%sysfunc(sasmsg(sashelp.dmine, rpt_trainaverage_vlabel  , NOQUOTE))"
20794 +            RASE="%sysfunc(sasmsg(sashelp.dmine, rpt_trainrase_vlabel  , NOQUOTE))"
20795 +       %end;
20796 +       %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1)) %then %do;
20797 +            VN="%sysfunc(sasmsg(sashelp.dmine, rpt_validobs_vlabel  , NOQUOTE))"
20798 +           %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
20799 +              vprob = "%sysfunc(sasmsg(sashelp.dmine, rpt_validaverage_vlabel  , NOQUOTE))"
20800 +              VRASE="%sysfunc(sasmsg(sashelp.dmine, rpt_validrase_vlabel  , NOQUOTE))"
20801 +          %end;
20802 +       %end;
20803 +       ;
20804 +     run;
20806 +     /* determine if rase is found in t */
20807 +    %let dsid=%sysfunc(open(t,i));
20808 +    %let raseexists=%sysfunc(varnum(&dsid,RASE));
20809 +    %let rc=%sysfunc(close(&dsid));
20811 +     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_treeleafreport_title  , NOQUOTE))";
20812 +     proc print data=t noobs label;
20813 +       where tprob ne .;
20814 +       var node depth N tprob
20815 +       %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1)) %then %do;
20816 +         %if "&vn" ne "." %then %do;
20817 +           VN
20818 +         %end;
20819 +         vprob
20820 +       %end;
20821 +       %if &raseexists %then %do;
20822 +            RASE
20823 +            %if ( ("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1) AND ("&EM_PROPERTY_CV" eq "N")) %then %do;
20824 +              VRASE
20825 +            %end;
20826 +       %end;
20827 +       ;
20828 +     run;
20829 +     title10;
20830 +  %end;
20832 +  /* create plots that are done during training of node */
20833 +  /* display iterative plot, including reference line */
20834 +  %if "&em_Tree_multipleTargets" eq "N" %then %do;
20835 +   /* %if &nleaves eq  %then %do; */
20836 +      %EM_GETNAME(key=OUTTOPOLOGY, type=DATA);
20837 +      data _null_;
20838 +        set &EM_USER_OUTTOPOLOGY end=eof;
20839 +        if eof then do;
20840 +          call symput('nleaves', LEAF);
20841 +        end;
20842 +      run;
20843 +   /* %end; */
20845 +    %EM_REPORT(KEY=OUTSEQ, VIEWTYPE=ITERATIONPLOT, block=MODEL,  X=_NW_, XRef=&Nleaves, autodisplay=N, Description=SUBTREE);
20846 +    /*%EM_REPORT(view=1, Y=_ASE_); */
20847 +  %end;
20849 +  /* display leaf statistics */
20850 +  %EM_REPORT(KEY=TREE_PLOT, VIEWTYPE=RESPONSEBAR, block=MODEL, view=1, X=INDEX, Y1=tprob, y2=vprob, where=%nrbquote(INDEX ne .), autodisplay=Y, Description=LEAFSTATS);
20852 +  /* stats by node if multiple targets = Y */
20853 +  %EM_GETNAME(key=OUTSTATS, type=DATA);
20854 +  %if "&em_tree_multipleTargets" eq "Y" %then %do;
20855 +    data &EM_USER_OUTSTATS;
20856 +      set &EM_USER_OUTSTATS;
20858 +     * if STATNAME="TARGET" then delete;
20859 +     * if STATNAME="PREDICTION" and STATVALUE=. then delete;
20860 +      drop leaf;
20861 +    run;
20862 +    %EM_REPORT(key=OUTSTATS, viewtype=DATA, block=MODEL, description=OUTSTATS, autodisplay=N);
20864 +  %end;
20865 +  %else %do;
20866 +    /* add outstats and outdescribe to spk but not results */
20867 +    %EM_REPORT(viewtype=, key=OUTSTATS);
20868 +  %end;
20870 +%mend em_tree_report;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: Variable cvimportance is uninitialized.
NOTE: Variable nsurrogates is uninitialized.
NOTE: There were 2 observations read from the data set EMWS5.TREE_OUTIMPORT.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 73 observations read from the data set EMWS5.TREE_OUTIMPORT.
NOTE: The data set EMWS5.TREE_OUTIMPORT has 73 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.05 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 3 observations read from the data set EMWS5.TREE_OUTIMPORT.
      WHERE nrules>0;
NOTE: The PROCEDURE PRINT printed page 3.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Variable _XASE_ is uninitialized.
NOTE: Variable _SEQUENCE_ is uninitialized.
NOTE: Variable _VSEQUENCE_ is uninitialized.
NOTE: Variable _APROF_ is uninitialized.
NOTE: Variable _ALOSS_ is uninitialized.
NOTE: Variable _PASE_ is uninitialized.
NOTE: There were 2 observations read from the data set EMWS5.TREE_OUTSEQ.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 53 observations read from the data set EMWS5.TREE_OUTSEQ.
NOTE: The data set EMWS5.TREE_OUTSEQ has 53 observations and 18 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS5.TREE_TOTAL_ACTIONS_DM.
      WHERE _TYPE_='PREDICTED';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 48 observations read from the data set EMWS5.TREE_OUTRULES.
      WHERE (ROLE='PRIMARY') and (STAT='VARIABLE');
NOTE: The data set WORK.BELOWTEXT has 48 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 47 observations read from the data set EMWS5.TREE_OUTRULES.
      WHERE (ROLE='PRIMARY') and (STAT='LABEL');
NOTE: The data set WORK.BELOWTEXT2 has 47 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 48 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.BELOWTEXT has 48 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 47 observations read from the data set WORK.BELOWTEXT2.
NOTE: The data set WORK.BELOWTEXT2 has 47 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 48 observations read from the data set WORK.BELOWTEXT.
NOTE: There were 47 observations read from the data set WORK.BELOWTEXT2.
NOTE: The data set WORK.BELOWTEXT has 48 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 48 observations read from the data set EMWS5.TREE_OUTRULES.
      WHERE (ROLE='PRIMARY') and STAT in ('INTERVAL', 'NOMINAL', 'ORDINAL');
NOTE: The data set WORK.ABOVETEXT has 48 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 48 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 48 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      155:103   204:136   247:102   247:125   279:104   313:104   355:103   355:126   398:104
NOTE: Character values have been converted to numeric values at the places given by: (Line):(Column).
      414:99
NOTE: There were 48 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 96 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1078 observations read from the data set EMWS5.TREE_OUTRULES.
NOTE: The data set WORK.TEMPMISSING has 48 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 96 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 96 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 48 observations read from the data set WORK.TEMPMISSING.
NOTE: The data set WORK.TEMPMISSING has 48 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 97 observations read from the data set EMWS5.TREE_OUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 97 observations and 16 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 96 observations read from the data set WORK.ABOVETEXT.
NOTE: There were 97 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 48 observations read from the data set WORK.TEMPMISSING.
NOTE: The data set WORK.TEMPOUTNODES has 97 observations and 17 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 97 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 97 observations and 17 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 48 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.BELOWTEXT has 48 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 97 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 48 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.TEMPOUTNODES has 97 observations and 18 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 0 observations read from the data set EMWS5.TREE_OUTSTATS.
      WHERE STATNAME='NPRIORS';
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS5.TREE_VARIABLESET.
      WHERE (ROLE='TARGET') and (LEVEL not = 'ORDINAL') and USE in ('D', 'Y');
NOTE: The data set WORK.TEMPTARMETA has 1 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 582 observations read from the data set EMWS5.TREE_OUTSTATS.
NOTE: The data set WORK.TEMPTARGETUSED has 582 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 582 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: 485 observations with duplicate key values were deleted.
NOTE: The data set WORK.TEMPTARGETUSED has 97 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 582 observations read from the data set EMWS5.TREE_OUTSTATS.
NOTE: The data set WORK.TEMPOUTSTATS has 582 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Input data set is already sorted, no sorting done.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 582 observations read from the data set WORK.TEMPOUTSTATS.
NOTE: There were 97 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: The data set WORK.TEMPINTERVAL has 582 observations and 6 variables.
NOTE: The data set WORK.TEMPCLASS has 0 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 582 observations read from the data set WORK.TEMPINTERVAL.
NOTE: The data set WORK.TEMPINTERVAL has 97 observations and 7 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 97 observations read from the data set WORK.TEMPINTERVAL.
NOTE: The data set WORK.TEMPINTERVAL has 97 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 97 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 97 observations and 18 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      942:196   958:204   958:221
NOTE: There were 97 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 97 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: There were 97 observations read from the data set WORK.TEMPINTERVAL.
NOTE: The data set EMWS5.TREE_TREE_PLOT has 97 observations and 22 variables.
NOTE: DATA statement used (Total process time):
      real time           0.05 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 582 observations read from the data set EMWS5.TREE_OUTSTATS.
NOTE: The data set WORK.TEMPPROB has 194 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 194 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 194 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 194 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 97 observations and 3 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 97 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 97 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 97 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 97 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPOUTNODES has 97 observations and 18 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 97 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPNODES has 97 observations and 18 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 49 observations read from the data set WORK.TEMPNODES.
      WHERE leaf not = .;
NOTE: The data set WORK.TEMPNODES has 49 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 49 observations read from the data set WORK.TEMPNODES.
NOTE: The data set WORK.TEMPNODES has 49 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 97 observations read from the data set EMWS5.TREE_TREE_PLOT.
NOTE: There were 49 observations read from the data set WORK.TEMPNODES.
NOTE: The data set EMWS5.TREE_TREE_PLOT has 97 observations and 29 variables.
NOTE: DATA statement used (Total process time):
      real time           0.10 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: The file WORK.TEMP (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: The file WORK.TEMPSTATS (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: Deleting WORK.ABOVETEXT (memtype=DATA).
NOTE: Deleting WORK.BELOWTEXT (memtype=DATA).
NOTE: Deleting WORK.TEMPOUTNODES (memtype=DATA).
NOTE: Deleting WORK.TEMPMISSING (memtype=DATA).
NOTE: Deleting WORK.TEMPNODES (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 264 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 264 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 397 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 97 observations read from the data set EMWS5.TREE_TREE_PLOT.
NOTE: The data set WORK.T has 97 observations and 29 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 2 observations read from the data set WORK.T.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 97 observations read from the data set WORK.T.
NOTE: The data set WORK.T has 97 observations and 29 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 49 observations read from the data set WORK.T.
      WHERE tprob not = .;
NOTE: The PROCEDURE PRINT printed page 4.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      316:141
NOTE: There were 97 observations read from the data set EMWS5.TREE_OUTTOPOLOGY.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 397 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 529 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
 
NOTE: There were 529 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 662 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.04 seconds
 
 
 
NOTE: There were 662 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 794 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
20871
20872  *------------------------------------------------------------*;
20873  * End REPORT: Tree;
20874  *------------------------------------------------------------*;
 
20875  /* Reset EM Options */
20876  options formchar="|----|+|---+=|-/\<>*";
20877  options nocenter ls=256 ps=10000;
20878  goptions reset=all device=GIF NODISPLAY;
 
20879  proc sort data=WORK.EM_USER_REPORT;
20880  by ID VIEW;
20881  run;
 
NOTE: There were 794 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 794 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
20882  proc sort data=EMWS5.TextTopic_CMeta_TRAIN out=WORK.SUBSETINMETA;
20883  by NAME;
20884  run;
 
NOTE: There were 106 observations read from the data set EMWS5.TEXTTOPIC_CMETA_TRAIN.
NOTE: The data set WORK.SUBSETINMETA has 106 observations and 20 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
20885  proc sort data=EMWS5.Tree_VariableSet out=WORK.SUBSETVARSET(keep=NAME REPORT);
20886  by NAME;
20887  run;
 
NOTE: There were 106 observations read from the data set EMWS5.TREE_VARIABLESET.
NOTE: The data set WORK.SUBSETVARSET has 106 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
20888  data WORK.ASSESS_META;
20889  merge WORK.SUBSETINMETA WORK.SUBSETVARSET;
20890  by NAME;
20891  run;
 
NOTE: There were 106 observations read from the data set WORK.SUBSETINMETA.
NOTE: There were 106 observations read from the data set WORK.SUBSETVARSET.
NOTE: The data set WORK.ASSESS_META has 106 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
20892  data EM_temp_assessMeta;
20893  set EMWS5.Tree_CMeta_TRAIN;
20894  where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST');
20895  run;
 
NOTE: There were 4 observations read from the data set EMWS5.TREE_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 4 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
20896  data EM_temp_assessdata;
20897  set EMWS5.Tree_TRAIN(keep=
20898  P_Total_Actions
20899  R_Total_Actions
20900  V_Total_Actions
20901  _WARN_
20902  Total_Actions
20903  );
20904  run;
 
NOTE: Variable _WARN_ is uninitialized.
NOTE: View EMWS5.TREE_TRAIN.VIEW used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
 
NOTE: There were 2694 observations read from the data set EMWS5.TEXTTOPIC_TRAIN.
NOTE: There were 2694 observations read from the data set EMWS5.TREE_TRAIN.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 2694 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.37 seconds
      cpu time            0.03 seconds
 
 
 
 
 
 
 
 
 
25238   data EM_temp_assessMeta;
25239   set EMWS5.Tree_CMeta_TRAIN;
25240   where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST');
25241   run;
 
NOTE: There were 4 observations read from the data set EMWS5.TREE_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 4 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
25242   data EM_temp_assessdata;
25243   set EMWS5.Tree_VALIDATE(keep=
25244   P_Total_Actions
25245   R_Total_Actions
25246   V_Total_Actions
25247   _WARN_
25248   Total_Actions
25249   );
25250   run;
 
NOTE: Variable _WARN_ is uninitialized.
NOTE: View EMWS5.TREE_VALIDATE.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.04 seconds
 
NOTE: There were 770 observations read from the data set EMWS5.TEXTTOPIC_VALIDATE.
NOTE: There were 770 observations read from the data set EMWS5.TREE_VALIDATE.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 770 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.05 seconds
      cpu time            0.04 seconds
 
 
 
 
 
 
 
 
 
29594   %let _cn = %sysfunc(getoption(CENTER));
29595   options nocenter;
29596   proc print data=EMWS5.Tree_EMREPORTFIT noobs label;
29597   var STAT LABEL TRAIN
29598   VALIDATE
29599   TEST
29600   ;
29601   by TARGET TARGETLABEL;
29602   title9 ' ';
29603   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_fitstat_title  , NOQUOTE))";
29604   run;
 
NOTE: There were 7 observations read from the data set EMWS5.TREE_EMREPORTFIT.
NOTE: The PROCEDURE PRINT printed page 5.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
29605   title10;
29606   options &_cn;
 
29607   proc datasets library=EMWS5 nolist;
29608   modify Tree_EMRANK;
29609   label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,   NOQUOTE))";
29610   label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))";
29611   run;
 
NOTE: MODIFY was successful for EMWS5.TREE_EMRANK.DATA.
29612   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.10 seconds
      cpu time            0.06 seconds
 
 
29613   %let _cn = %sysfunc(getoption(CENTER));
29614   options nocenter;
29615   proc print data=EMWS5.Tree_EMRANK label noobs;
29616   var
29617   decile N _targetMean_ _meanP_;
29618   by
29619   notsorted DATAROLE
29620   notsorted TARGET
29621   notsorted TARGETLABEL
29622   ;
29623   title9 ' ';
29624   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_scoreranking_title , NOQUOTE))";
29625   run;
 
NOTE: There were 38 observations read from the data set EMWS5.TREE_EMRANK.
NOTE: The PROCEDURE PRINT printed page 6.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
29626   title10;
29627   options &_cn;
 
29628   proc datasets library=EMWS5 nolist;
29629   modify Tree_EMSCOREDIST;
29630   label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,      NOQUOTE))";
29631   label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))";
29632   run;
 
NOTE: MODIFY was successful for EMWS5.TREE_EMSCOREDIST.DATA.
29633   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.11 seconds
      cpu time            0.07 seconds
 
 
