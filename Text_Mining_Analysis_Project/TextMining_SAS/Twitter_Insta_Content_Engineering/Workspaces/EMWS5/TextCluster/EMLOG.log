*------------------------------------------------------------*
User:                yas19006
Date:                May 06, 2020
Time:                18:33:00
Site:                70085622
Platform:            X64_8PRO
Maintenance Release: 9.04.01M3P062415
EM Version:          14.1
* 
*------------------------------------------------------------*
* Training Log
Date:                May 06, 2020
Time:                18:32:44
*------------------------------------------------------------*
14714  proc freq data=EMWS5.TextCluster_VariableSet noprint;
14715  table ROLE*LEVEL/out=WORK.TextClusterMETA;
14716  run;
 
NOTE: There were 2 observations read from the data set EMWS5.TEXTCLUSTER_VARIABLESET.
NOTE: The data set WORK.TEXTCLUSTERMETA has 2 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.06 seconds
      cpu time            0.01 seconds
 
 
14717  proc print data=WORK.TextClusterMETA label noobs;
14718  var ROLE LEVEL COUNT;
14719  label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL = "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
14720  title9 ' ';
14721  title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
14722  run;
 
NOTE: There were 2 observations read from the data set WORK.TEXTCLUSTERMETA.
NOTE: The PROCEDURE PRINT printed page 1.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
14723  title10;
 
14724  %let EMEXCEPTIONSTRING=;
PERFORMANCE  DETAILS
15051  *------------------------------------------------------------*;
15052  * TextCluster: Generation of macros and macro variables;
15053  * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
15054  *------------------------------------------------------------*;
 
15055  %let EMEXCEPTIONSTRING=;
15056  *------------------------------------------------------------*;
15057  * TRAIN: TextCluster;
15058  *------------------------------------------------------------*;
15059  %let EM_ACTION = TRAIN;
15060  %let syscc = 0;
15061  %macro main();
15062
15063     %if %upcase(&EM_ACTION) eq CREATE %then %do;
15064        filename temp catalog 'sashelp.emtxtext.cluster_create.source';
15065        %include temp;
15066        %create();
15067     %end;
15068     %if %upcase(&EM_ACTION) eq TRAIN %then %do;
15069        filename temp catalog 'sashelp.emtxtext.cluster_train.source';
15070        %include temp;
15071        %train();
15072     %end;
15073     %if %upcase(&EM_ACTION) eq REPORT %then %do;
15074        filename temp catalog 'sashelp.emtxtext.cluster_report.source';
15075        %include temp;
15076        %report();
15077     %end;
15078     %if %upcase(&EM_ACTION) eq SCORE %then %do;
15079        filename temp catalog 'sashelp.emtxtext.cluster_score.source';
15080        %include temp;
15081        %score();
15082     %end;
15083  %mend main;
15084
15085  %main();
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMTXTEXT.CLUSTER_TRAIN.SOURCE.
15086 +%macro train();
15087 +
15088 +    %global last_parse_node last_filter_node last_prescore_node server_err
15089 +      parsevar EM_SASMSG;
15090 +    %if ^%symexist(tm_debug) %then %let tm_debug=0;
15091 +    %let EM_SASMSG=TMINE;
15092 +    %let syscc=0;
15093 +
15094 +    filename temp catalog 'sashelp.emtxtext.tm_get_last_filter.source';
15095 +    %include temp;
15096 +    filename temp catalog 'sashelp.emtxtext.tm_cluster.source';
15097 +    %include temp;
15098 +    filename temp catalog 'sashelp.emtxtext.tm_apply_tmutil.source';
15099 +    %include temp;
15100 +    filename temp catalog 'sashelp.emtxtext.tm_svd_do_samp.source';
15101 +    %include temp;
15102 +    filename temp;
15103 +
15104 +    %tm_get_last_filter(eminfo=&EM_IMPORT_DATA_EMINFO,em_lib=&em_lib,
15105 +                        em_variableset=&em_data_variableset);
15106 +    %if &EMEXCEPTIONSTRING ne %then %goto end_cluster_train;
15107 +    %let lastparsenode=&last_parse_node;
15108 +    %let lastfilternode=&last_filter_node;
15109 +    %let lastprescore=&last_prescore_node;
15110 +    %if &lastfilternode=&lastparsenode %then %do;
15111 +        %let EMEXCEPTIONSTRING = EMTOOL.NOFILTERNODE;
15112 +        %goto end_cluster_train;
15113 +    %end;
15114 +
15115 +    /*populate last tm node dataset so tm_get_last_filter is not called in score*/
15116 +    %em_getname(key=last_tm_nodes, type=data);
15117 +    data &em_user_last_tm_nodes;
15118 +        set &EM_IMPORT_DATA_EMINFO;
15119 +    run;
15120 +
15121 +
15122 +    %em_getname(key=tmconfig, type=data);
15123 +    %em_getname(key=terms, type=data);
15124 +    %em_getname(key=docs, type=data);
15125 +    %em_getname(key=clusters, type=data);
15126 +    %em_getname(key=graph_table, type=data);
15127 +    %em_getname(key=svd_u, type=data);
15128 +    %em_getname(key=tmconfig, type=data);
15129 +    %em_getname(key=svd_s, type=data);
15130 +    %em_getname(key=emoutstat, type=data);
15131 +    %em_getname(key=hierds, type=data);
15132 +
15133 +
15134 +
15135 +    /* get target variable info */
15136 +    %let targetvar = ;
15137 +    data _null_;
15138 +       set &em_data_variableset(where=(ROLE='TARGET' and USE in('Y' 'D')
15139 +                                       and LEVEL ne 'INTERVAL'));
15140 +       if _N_=1 then call symput('targetvar', strip(NAME));
15141 +    run;
15142 +
15143 +
15144 +
15145 +    /* set up terms strings and initial config table */
15146 +    proc sql noprint;
15147 +      create table &EM_USER_tmconfig as
15148 +         select *
15149 +         from &EM_LIB..&last_filter_node._tmconfig;
15150 +    quit;
15151 +
15152 +
15153 +    proc sql noprint;
15154 +       select  cellwgt into: _cellweight
15155 +       from &em_user_tmconfig;
15156 +       select termwgt into: _termwgt
15157 +       from &em_user_tmconfig;
15158 +    quit;
15159 +
15160 +    data _keepdocs (keep=_DOCUMENT_ %if &targetvar ne %then &targetvar; );
15161 +        set &EM_IMPORT_DATA;
15162 +    run;
15163 +
15164 +    %tm_apply_tmutil(data=&EM_LIB..&last_filter_node._tmout,
15165 +                       terms=&EM_LIB..&last_filter_node._terms,
15166 +                       docs=&EM_IMPORT_DATA,
15167 +                       keepdocs=_keepdocs,
15168 +                       reduceF=2,
15169 +                       termweight=&_termwgt,
15170 +                       cellweight=&_cellweight,
15171 +                       outdata=_outtmutil_,
15172 +                       outterms=_newkey,
15173 +                       outweights=_weights,
15174 +                       targetvar=&targetvar,
15175 +                       memloc=_tmmem);
15176 +
15177 +                       /* get the svd dimensions on the documents */
15178 +    %tm_svd_do_samp(data=_outtmutil_,docs=_keepdocs, maxK=&em_property_maxK, res=&em_property_resolution,cellwgt=&_cellweight,in_global=_weights,
15179 +                     rowVar=_termnum_,colVar=_document_,entryVar=_count_,u=&EM_USER_SVD_U,v=_svdv,s=&EM_USER_svd_S,
15180 +                     colpro=_svdcolpro,rowpro=_svdrowpro, normcol=normcol, normrow=normrow,prefix=&EM_NODEID);
15181 +
15182 +    %if(&syscc >4 ) %then %do;
15183 +        %goto end_cluster_train;
15184 +    %end;
15185 +
15186 +    proc sql noprint;
15187 +       create table &EM_USER_TERMS(drop=index) as
15188 +       select a.*,b.*
15189 +       from &EM_LIB..&last_filter_node._terms a left join _svdrowpro b
15190 +       on a.key = b.index;
15191 +    quit;
15192 +
15193 +    %tm_cluster(data=&EM_LIB..&last_filter_node._tmout,
15194 +        terms=&EM_LIB..&last_filter_node._terms,
15195 +        docs=&EM_IMPORT_DATA,
15196 +        svdColPro=_svdcolpro,
15197 +        maxNumTerms=&em_property_ndescterms,
15198 +        numClus=&em_property_nclusters,
15199 +        numType=&em_property_exactormaximum,
15200 +        algorithm=&em_property_algorithm,
15201 +        outdocs=&EM_USER_DOCS,
15202 +        outclusters=&EM_USER_CLUSTERS,
15203 +        hierds=&EM_USER_HIERDS,
15204 +        emoutstat=&EM_USER_emoutstat,
15205 +        prefixstring= &EM_NODEID);
15206 +
15207 +    %if &emexceptionstring ne %then %goto end_cluster_train;
15208 +
15209 +    %if &em_property_algorithm=2.0 %then %do;
15210 +
15211 +        data &em_user_hierds(drop=plus);
15212 +            set &em_user_hierds;
15213 +            plus='';
15214 +            if substr(CLUS_DESC, 1, 1) = "+" then plus="+ ";
15215 +            graphdesc=_CLUSTER_ || ': ' || plus || scan(CLUS_DESC, 1);
15216 +        run;
15217 +    %end;
15218 +
15219 +
15220 +    * add the info to EMINFO to forward on to other nodes ;
15221 +   data &EM_DATA_EMINFO;
15222 +      length TARGET KEY $32 DATA $43;
15223 +
15224 +      key="LastTMNode";
15225 +      data="&EM_NODEID";
15226 +      output;
15227 +
15228 +      key="LastTMNodeType";
15229 +      data="TextCluster";
15230 +      output;
15231 +
15232 +      key="LastTextCluster";
15233 +      data="&EM_NODEID";
15234 +      output;
15235 +
15236 +      key="PRESCORECODE";
15237 +      data="&EM_NODEID";
15238 +      output;
15239 +   run;
15240 +
15241 +    proc sql noprint;
15242 +        select count(*) into :svdkeep
15243 +            from &em_user_svd_s
15244 +            where keep=1;
15245 +        select count(*) into :cluscnt
15246 +            from &em_user_clusters;
15247 +    quit;
15248 +   data &EM_USER_tmconfig;
15249 +         set &EM_USER_TMCONFIG;
15250 +         clus_alg = "&em_property_algorithm";
15251 +         maxsvd = &em_property_maxk;
15252 +         svdkeep=&svdkeep;
15253 +         last_prescore = "&last_prescore_node";
15254 +      run;
15255 +
15256 +    %em_metachange(name=&EM_NODEID._CLUSTER_, role=SEGMENT, level=NOMINAL);
15257 +    %do i=1 %to &svdkeep;
15258 +         %em_metachange(name=&EM_NODEID._SVD&i, role=INPUT, level=INTERVAL);
15259 +    %end;
15260 +    %do i=1 %to &cluscnt;
15261 +         %em_metachange(name=&EM_NODEID._PROB&i, role=REJECTED);
15262 +    %end;
15263 +
15264 +%end_cluster_train:
15265 +    filename temp;
15266 +    %if &tm_debug =0 %then %do;
15267 +        proc sql noprint;
15268 +              drop table _svdcolpro;
15269 +              drop table _svdrowpro;
15270 +              drop table _newkey ;
15271 +              drop table _keepdocs ;
15272 +        quit;
15273 +    %end;
15274 +
15275 +%mend train;
15276 +
NOTE: %INCLUDE (level 1) ending.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMTXTEXT.TM_GET_LAST_FILTER.SOURCE.
15277 +/* ****************************************************************
15278 + * Copyright (C) 2009 by SAS Institute Inc., Cary, NC 27513
15279 + *
15280 + * Name:             tm_get_last_filter.sas
15281 + * Product:          SAS Text Miner
15282 + * Language:         Sas
15283 + * Script:
15284 + *
15285 + * Usage:
15286 + *
15287 + * Purpose:  macro to get the last filter node and the last parse node in the
15288 + *   diagram that corresponds to the current parse variable.  If there is no filter
15289 + *   node, the filter node is set to the last parse node.
15290 + *
15291 + *
15292 + *
15293 + * History:
15294 + * 14Aug09 Initial Coding
15295 + *
15296 + * Notes:
15297 + *    Returns an error in the following cases:
15298 + *      1. There is no preceding parse node.
15299 + *      2. There is no parse node with the current parse variable.
15300 + *
15301 + * Last Modified By:
15302 + * Last Modified On: Wed Sep 23 15:35:04 2009
15303 + *
15304 + * End
15305 + * ************************************************************** */
15306 +%macro tm_get_last_filter(eminfo=,em_lib=, em_variableset=);
15307 +   %let last_parse_node=;
15308 +   %let last_filter_node=;
15309 +   %let last_prescore_node=;
15310 +   %let server_err=;
15311 +   %let EMEXCEPTIONSTRING=;
15312 +   %let syscc=0;
15313 +
15314 +    /* verify that setinit for SAS Text Miner is currently active */
15315 +    %if %sysfunc(sysprod(PRODNUM107)) ne 1 %then %do;
15316 +       %let EMEXCEPTIONSTRING = EMTOOL.NOTMLICENSE;
15317 +        %goto end_macro;
15318 +        %end;
15319 +
15320 +
15321 +    * find last filter or text parse node if no filter node. ;
15322 +   %if %sysfunc(exist(&eminfo)) %then %do;
15323 +      proc sql noprint;
15324 +      select data into :last_parse_node from &eminfo where key="LastTextParsing";
15325 +         select data into :last_filter_node from &eminfo where key="LastTextFilter";
15326 +         select data into :last_prescore_node from &eminfo where kupcase(key)="PRESCORECODE";
15327 +      quit;
15328 +
15329 +   %end;
15330 +
15331 +   %if &last_parse_node= %then %do;
15332 +      %let EMEXCEPTIONSTRING = EMTOOL.NOPARSINGNODE;
15333 +      %goto end_macro;
15334 +      %end;
15335 +
15336 +   %else %if &last_filter_node= %then %let last_filter_node = %ktrim(&last_parse_node);
15337 +   %else %let last_filter_node = %ktrim(&last_filter_node);
15338 +   %let last_parse_node = %ktrim(&last_parse_node);
15339 +
15340 +   * Check to make sure parse variable is present and still exists;
15341 +   %let parsevar = ;
15342 +   proc sql noprint;
15343 +    select parsevar into :parsevar
15344 +    from &em_lib..&last_filter_node._tmconfig;
15345 +    quit;
15346 +
15347 +    *check for dropped parsevar on input dataset;
15348 +       %let parsevarOK= ;
15349 +       %let parsevarN=%kupcase(%ktrim(&parsevar));
15350 +       data _null_;
15351 +         set &em_variableset(where=(kupcase(NAME)="&parsevarN" and USE in('Y' 'D')));
15352 +         if (ROLE='TEXT' or ROLE='TEXTLOC') then call symput('parsevarOK', strip(ROLE));
15353 +         run;
15354 +       %if(&parsevarOK eq ) %then %do;
15355 +          %let EMEXCEPTIONSTRING = EMTOOL.NOPARSINGVAR;
15356 +          %goto end_macro;
15357 +          %end;
15358 +%end_macro:
15359 +
15360 +%mend tm_get_last_filter;
NOTE: %INCLUDE (level 1) ending.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMTXTEXT.TM_CLUSTER.SOURCE.
15362 +   /* ****************************************************************
15363 + * Copyright (C) 2009 by SAS Institute Inc., Cary, NC 27513
15364 + *
15365 + * Name:             tm_cluster.sas
15366 + * Support:          rualbr Russell Albright
15367 + * Product:
15368 + * Language:         Sas
15369 + * Script:
15370 + *
15371 + * Usage:
15373 + !Inputs into %tm_train_cluster
15374 + * doc = doc datset from a tm node
15375 + * data =  out datset from a tm node
15376 + * terms = terms dataset from  tm node
15377 + * svdcolpro = column projections data set
15378 + * cellweight setting
15379 + * termweight setting
15380 + * maxSvddim = Maximum number of dimension to calculate
15381 + * svdres= <HIGH, MED, or LOW>
15382 + * maxNumTerms - maximum number of term to use for descriptive terms
15383 + * numClus = number of clusters to use
15384 + * numType=<MAXIMUM or EXACT> Max means that <= maximum will actually be used.
15385 + * threads = the number of threads you would like emclus to use
15388 + !Outputs from %tm_train_cluster
15389 + * outdocs - a doc table with the cluster restults on it.
15390 + * outclusters- an output cluster table with the descriptive terms on it (future story)
15391 + *
15392 + * Example call
15393 + *
15394 + *%tm_cluster(data=tmn.text_out_t,
15395 + *             terms=tmn.terms,
15396 + *             docs=testdata._train,
15397 + *             svdcolpro=tmn._svdcolpro,
15398 + *             maxNumTerms=5,
15399 + *             numClus=40,
15400 + *             numType=MAXIMUM,
15401 + *             outdocs=docsresult,
15402 + *             hierds=_hierds,
15403 + *             emoutstat=_emoutstat,
15404 + *             outclusters= clusterResult);
15405 + *
15406 + *
15407 + * Purpose: Perform the clustering on out,term, doc from parse or filter node
15408 + *
15409 + * History:
15410 + *
15411 + *
15412 + * Notes:
15413 + *
15414 + * Last Modified By:
15415 + * Last Modified On: Thu Jan 08 17:22:43 2009
15416 + *
15417 + * End
15418 + * ************************************************************** */
15420 +%macro tm_cluster(data=,
15421 +                     terms=,
15422 +                     docs=,
15423 +                     svdColPro=,
15424 +                     maxNumTerms=,
15425 +                     numClus=,
15426 +                     numType=MAXIMUM,
15427 +                     algorithm=,
15428 +                     outdocs=,
15429 +                     hierds=_hierds,
15430 +                     emoutstat=_emoutstat,
15431 +                     outclusters=,
15432 +                     prefixString=,
15433 +                     threads=);
15436 +    %local _cleanedout ;
15437 +    %local _numRepDocs;
15438 +    %global systmutil;
15439 +    %let systmutil = ;
15440 +    %if ^%symexist(tm_debug) %then %let tm_debug=0;
15442 +    filename temp catalog 'sashelp.emtext.tmgetncl.source';
15443 +    %include temp;
15444 +    filename temp catalog 'sashelp.emtext.tmfast.source';
15445 +    %include temp;
15447 +    filename temp catalog 'sashelp.emtext.tmemclus.source';
15448 +    %include temp;
15450 +    filename temp catalog 'sashelp.emtext.tmpred.source';
15451 +    %include temp;
15453 +    filename temp catalog 'sashelp.emtext.tmsort.source';
15454 +    %include temp;
15456 +    %let tmdata=&data;
15457 +    %let tmterms=&terms;
15458 +    %let tmdocs=&docs;
15459 +    %let emexceptionstring=;
15462 +    /* check some basic size requirements to proceed.*/
15463 +    proc sql noprint;
15464 +       select count(*) into: numTerms
15465 +       from &terms a
15466 +       where a.numdocs>=2 and _ispar in('+',' ')
15467 +       ;
15468 +       select count (*) into: numdocs
15469 +       from &docs a;
15470 +    quit;
15472 +    %if (&numterms < 10)  OR (&numdocs< 8) %then %do;
15473 +        %let emexceptionstring=EMTOOL.INSUFFICIENTDATA;
15474 +        %goto end_train_cluster;
15475 +    %end;
15477 +    /* Get number of kept svd variables */
15478 +    %let pid = %sysfunc(open(&svdcolpro));
15479 +    %let svdkeep=%eval(%sysfunc(attrn(&pid,nvars))-1);
15480 +    %let rc = %sysfunc(close(&pid));
15483 +   /************************ Find clusters *************************************/
15485 +   %if %upcase(&numType) = MAXIMUM %then %do;   /* numClus = MAXIMUM */
15487 +      /* Call tmgetncl to find the recommended number of clusters. */
15489 +      %tmGetNcl(data=&svdcolpro,
15490 +               maxclusters=&numClus,
15491 +               vars=%str(&prefixstring._SVD1 - &prefixstring._SVD&svdkeep),
15492 +               tempDS=_clusTemp1,
15493 +               clusDS=_clusTemp,
15494 +               threads=
15495 +            );
15497 +      /* error returned in above macro */
15498 +      %if (&syscc >4 ) %then %do;
15499 +         %let emexceptionstring= &SYSERRORTEXT;
15500 +         %goto end_train_cluster;
15501 +      %end;
15503 +      /* Store the recommended number into a macro variable. */
15505 +      proc sql noprint;
15506 +         select max(nclus) into: numClus
15507 +         from _clusTemp
15508 +         ;
15509 +      quit;
15512 +      %if not (&numClus > 1) %then %do;
15513 +        %let numClus = 2;
15514 +      %end;
15517 +       %if &tm_debug =0  %then %do;
15518 +          proc sql nowarn noprint;
15519 +              drop table _clustemp;
15520 +              drop table _clustemp1;
15521 +           quit;
15522 +       %end;
15524 +   %end;  /* &numtype = MAXIMUM */
15526 +   %else  %do;
15527 +       %let numClus = %left(&numClus);/*&numtype=EXACT*/
15528 +   %end;
15530 +    proc sql noprint;
15531 +        select count(*) into: nobs
15532 +        from &svdcolpro;
15533 +    quit;
15535 +   %if %left(&algorithm)=2.0 %then %do; /* Hierarchical clustering */
15536 +        filename temp catalog 'sashelp.emtxtext.tmgethclus.source';
15537 +        %include temp;
15539 +        filename temp catalog 'sashelp.emtext.tmhclus.source';
15540 +        %include temp;
15541 +        filename temp catalog 'sashelp.emtext.tmtree.source';
15542 +        %include temp;
15544 +        %if &nobs < &numClus and  %upcase(&numType) = EXACT %then %do;
15545 +            %let emexceptionstring=EMTOOL.TOOFEWOBSTOCLUS;
15546 +            %goto end_train_cluster;
15547 +        %end;
15549 +        %tmgethclus(outtree=_outtree,
15550 +                    idvar=index,
15551 +                    inDS=&svdcolpro,
15552 +                    outDS=&outdocs,
15553 +                    fastOut=_fastclusstat,
15554 +                    textClusDS=_clusstat,
15555 +                    vars=%str(&prefixstring._SVD1 - &prefixstring._SVD&svdkeep),
15556 +                    nobs=&nobs,
15557 +                    nclus=&numClus,
15558 +                    hierds=&hierds,
15559 +                    svdkeep=&svdkeep,
15560 +                    prefix=&prefixString);
15561 +        %if &EMEXCEPTIONSTRING ne %then %goto end_train_cluster;
15563 +        data _clusstat;
15564 +            set _clusstat(rename=(&prefixstring._SVD1 - &prefixstring._SVD&svdkeep.=_mean1-_mean&svdkeep.));
15565 +        run;
15567 +        data _clustermean;
15568 +          set _clusstat(keep=_cluster_ _mean1-_mean&svdkeep. rename=(_cluster_=cluster));
15569 +        run;
15571 +        proc sql noprint;
15572 +            drop table _outtree;
15573 +        quit;
15574 +   %end;
15575 +   %else %do; /* Expectation-maximization */
15576 +       /* Call %anl_tmfast to create cluster stat data set that will be used as an input for %anl_tmemclus. */
15577 +          %tmFast(data=&svdcolpro,
15578 +             clusters=&numClus,
15579 +             outstat=_fastclusstat,
15580 +             outseed=,
15581 +                id=,
15582 +             out=,
15583 +             vars=%str(&prefixstring._SVD1 - &prefixstring._SVD&svdkeep)
15584 +             );
15585 +          run;
15587 +          /* If some of the clusters are too small (frequency less than 5) and &g_numClusFlag=MAXIMUM, */
15588 +          /* reassign value for &cluster macro var from WORK.&s_reportID._fastclusstat data set. */
15590 +       %if %upcase(&numType) = MAXIMUM %then
15591 +       %do;   /* &ClusType = MAXIMUM */
15593 +          proc sql noprint;
15594 +             select max(CLUSTER) into :numClus
15595 +             from _fastclusstat
15596 +             where upcase(_TYPE_)='SEED'
15597 +             ;
15598 +          quit;
15600 +          %let numClus = %left(&numClus);
15602 +       %end;  /* &ClusType = MAXIMUM */
15603 +       %else %do; /* &ClusType = EXACT */
15604 +          %if &nobs < &numClus %then %do;
15605 +            %let emexceptionstring=EMTOOL.TOOFEWOBSTOCLUS;
15606 +            %goto end_train_cluster;
15607 +          %end;
15608 +       %end;
15610 +       %tmEMClus(data=&svdcolpro,
15611 +                role=TRAIN,
15612 +                clusters=&numClus,
15613 +                seed=_fastclusstat,
15614 +                outstat=&emoutstat,
15615 +                out=_tmutildoc,
15616 +                vars=%str(&prefixstring._SVD1 - &prefixstring._SVD&svdkeep),
15617 +                cov=,
15618 +                iter=5,
15619 +                secclus=,
15620 +                seciter=,
15621 +                min=,
15622 +                method=,
15623 +                eps=.1,
15624 +                init=FASTCLUS,
15625 +                print=NONE,
15626 +                p=,
15627 +                outliers=,
15628 +                decvar=0,
15629 +                initstd=,
15630 +                dist=,
15631 +                secstd=,
15632 +                nobs=,
15633 +                threads=&threads.
15634 +             );
15635 +       run;
15638 +       /* Run %anl_tmpred macro to assign documents to clusters with the largest posterior probability */
15639 +       /* and to calculate cluster frequency. */
15641 +       %tmPred (inds=_tmutildoc,
15642 +                outds=&outdocs,
15643 +              clusters=&numClus,
15644 +              type=max,
15645 +              freqds=_clusstat,
15646 +              compress=1
15647 +              );
15648 +        data &outdocs;
15649 +           set &outdocs;
15650 +           rename prob1-prob&numClus = &prefixString._prob1-&prefixString._prob&numclus;
15651 +        run;
15655 +       /* Transpose the output data set to contain cluster ID and cluster frequency. */
15657 +        data _clusstat;
15658 +            array c(&numClus) _c1-_c&numClus;
15659 +            set _clusstat;
15660 +            /*keep _CLUSTER_ Freq;*/
15661 +            totalobs=0;
15662 +            do _CLUSTER_ = 1 to &numClus;
15663 +                Freq = c(_CLUSTER_);
15664 +                totalobs=totalobs+c(_CLUSTER_);
15665 +                output;
15666 +            end;
15667 +            call symput ('totNumDocs', totalobs);
15668 +        run;
15670 +       %if &totNumDocs = 0 %then
15671 +       %do;   /*&totNumDocs = 0 */
15672 +           goto end_train_cluster;
15673 +       %end; /*&totNumDocs = 0 */
15675 +       /* Calculate cluster percentage. */
15676 +       data _clusstat;
15677 +          set _clusstat;
15678 +          Percent = Freq/&totNumDocs;
15679 +       run;
15681 +       data _clustermean(rename=(&prefixstring._SVD1 - &prefixstring._SVD&svdkeep. = _mean1-_mean&svdkeep.));
15682 +          set &emoutstat(keep=cluster _TYPE_ &prefixstring._SVD1 - &prefixstring._SVD&svdkeep.);
15683 +          if _TYPE_ = "MEAN";
15684 +            keep cluster &prefixstring._SVD1 - &prefixstring._SVD&svdkeep. ;
15685 +      run;
15686 +  %end;
15688 +      proc sql;
15689 +      create table _meandocs(drop=cluster) as
15690 +      select a.*, b.*
15691 +      from &outdocs a left join _clustermean b
15692 +      on a._cluster_=b.cluster
15693 +      ;
15694 +      quit;
15695 +       /*calulate residual for each doc */
15696 +      data _rmscalc;
15697 +          merge _meandocs(in=inhere) _clusstat;
15698 +          array _means(&svdkeep) _mean1-_mean&svdkeep.;
15699 +          array _svds(&svdkeep) &prefixstring._SVD1 - &prefixstring._SVD&svdkeep.;
15700 +          by _cluster_;
15701 +          error=0;
15702 +          do i = 1 to &svdkeep;
15703 +             error +( (_svds{i}-_means{i}) * (_svds{i}-_means{i}));
15704 +          end;
15705 +         /*error=sqrt(error);*/
15706 +          drop i;
15707 +       run;
15708 +    /*calc standardized residual for clusters*/
15709 +       proc summary data=_rmscalc nway;
15710 +          class _cluster_;
15711 +          var error;
15712 +          output out=_meanerr mean=meane sum=sume;
15713 +       run;
15715 +       data _rmsse;
15716 +          set _meanerr;
15717 +          /* original code divides by number of svd dims*/
15718 +          if _freq_ gt 1 then do;
15719 +              _rmsstd_=sqrt(sume/((_freq_-1)*(&svdkeep.)));
15720 +          end;
15721 +          else do;
15722 +              _rmsstd_=0;
15723 +          end;
15724 +          keep _cluster_  _rmsstd_;
15725 +       run;
15728 +       proc sql;
15729 +           create table _clusstat2(drop=cluster) as
15730 +           select a.*,b.*
15731 +           from _clustermean a left join _rmsse b
15732 +           on a.cluster=b._cluster_;
15734 +           create table &outclusters as
15735 +           select  a.*, b.freq, b.percent
15736 +           from _clusstat2(keep=_cluster_ %str(_mean1-_mean&svdkeep) _rmsstd_) a right join _clusstat b
15737 +           on a._cluster_=b._cluster_
15738 +           where b.freq>0 ;
15739 +       quit;
15742 +    filename temp catalog 'sashelp.emtext.tmterm1.source';
15743 +    %include temp / nosource2;
15745 +   /****************** Find descriptive terms for clusters ***************************/
15748 +   /* Add _term_ variable to WORK._terms data set to prepare it as an
15749 +   /* input to %tmterm1 macro. The variable is added from &EM_LIB..&last_filter_node._terms data set. */
15751 +   proc sort data=&tmterms out=_terms_;
15752 +        by key _ispar;
15753 +   run;
15755 +   data _terms_;
15756 +       set _terms_;
15757 +       by key _ispar;
15758 +       if first.key then
15759 +          output;
15760 +       else;
15761 +   run;
15763 +    /* Concatenate + to terms */
15764 +    data _terms_;
15765 +        set _terms_;
15766 +        if _ispar='+' then
15767 +            Term=_ispar || ' ' || term;
15768 +    run;
15770 +   %tmsort(data=&tmdata,
15771 +         out=_tmout_,
15772 +         by=_termnum_,
15773 +            options=,
15774 +         threads=threads);
15777 +   data _tmout_;
15778 +      merge _tmout_ (in=_A_)
15779 +            _terms_ (rename=(key=_termnum_ term=_term_) keep=key term );
15780 +      by _termnum_;
15781 +      if _A_;
15782 +   run;
15784 +   /* Create _segmnt_ variable in WORK._docs data set to prepare it to be an */
15785 +   /* input to %tmterm1 macro. Set it equal to _cluster_ variable. */
15787 +   %if &algorithm=2.0 %then %do;
15788 +        data _docs_;
15789 +            set &outdocs (rename=(index=_document_) keep=index _cluster_ _finalcluster_);
15790 +            _SEGMNT_=_finalcluster_;
15791 +        run;
15792 +        proc sql noprint;
15793 +            select max(_cluster_) into :numclus from &outclusters;
15794 +        quit;
15795 +   %end;
15796 +   %else %do;
15797 +       data _docs_;
15798 +        set &outdocs (rename=(index=_document_) keep=index _cluster_);
15799 +         _SEGMNT_=_cluster_;;
15800 +       run;
15802 +   %end;
15804 +   /* Run %tmterm1 macro to determine descriptive terms for clusters. */
15805 +   %tmterm1(DSN_TPARS=_tmout_,
15806 +        DSN_CLUS=_docs_,
15807 +        DSN_DESC=_desc_,
15808 +        N_DESC_TERMS=&maxnumterms,
15809 +        N_CLUS=&numclus,
15810 +        top_freq=%eval(&maxnumterms*2),
15811 +        key=);
15813 +    /* Add cluster descriptive terms to clusters table. */
15814 +   %tmsort(data=&outclusters,
15815 +         out=&outclusters,
15816 +         by=_cluster_,
15817 +            options=,
15818 +         threads=threads);
15820 +   %tmsort(data=_desc_,
15821 +         out=_desc_,
15822 +         by=_cluster_,
15823 +            options=,
15824 +         threads=threads);
15826 +   data _desc_;
15827 +      merge &outclusters _desc_;
15828 +      by _cluster_;
15829 +   run;
15831 +   %tmsort(data=_desc_,
15832 +         out=&outclusters,
15833 +         by=_cluster_,
15834 +            options=,
15835 +         threads=threads);
15837 +   %if &algorithm=2.0 %then %do;
15839 +        %tmsort(data=&HIERDS,
15840 +         out=&HIERDS,
15841 +         by=_cluster_,
15842 +            options=,
15843 +         threads=threads);
15845 +        data &HIERds;
15846 +            merge &outCLUSTERS &HIERds (keep=_cluster_ parent level in=P);
15847 +            by _cluster_;
15848 +            clust=_cluster_;
15849 +            drop _cluster_;
15850 +            if P;
15851 +        run;
15853 +        %let empty=1;
15855 +        /* Be sure that all parent clusters are on outclusters ds */
15856 +        proc sql noprint;
15857 +            create table &outclusters as
15858 +                select a._cluster_, b.* from &hierds (rename=(clust=_CLUSTER_)) a
15859 +                left join &outclusters b
15860 +                on a._cluster_=b._cluster_;
15861 +        quit;
15863 +        %do %while (&empty);
15864 +            proc sql noprint;
15865 +                update &outclusters set freq=
15866 +                    (select sum(freq) from &HIERDS
15867 +                    where parent=_cluster_), percent=
15868 +                    (select sum(percent) from &HIERDS
15869 +                    where parent=_cluster_)
15870 +                    where freq=. and _cluster_ not in
15871 +                    (select parent from &hierds where freq=.);
15872 +                select count(*) into :empty from &outclusters
15873 +                    where freq=.;
15874 +                update &hierds set freq=(select freq from &outclusters where _cluster_=clust);
15875 +            quit;
15876 +            data &HIERds;
15877 +                merge &OUTCLUSTERS &HIERds (
15878 +                    rename=(clust=_cluster_) keep=clust parent level in=P);
15879 +                by _cluster_;
15880 +                clust=_cluster_;
15881 +                drop _cluster_;
15882 +                if P;
15883 +            run;
15884 +        %end;
15886 +        data &hierds;
15887 +            set &hierds(rename=(CLUST=_CLUSTER_) keep=clust FREQ CLUS_DESC PARENT level);
15888 +        run;
15889 +        data &outclusters;
15890 +            set &outclusters;
15891 +            if _rmsstd_ ne .;
15892 +        run;
15894 +        data &outdocs;
15895 +            set &outdocs (drop=_FINALCLUSTER_ _SUBCLUSTER_);
15896 +            label _CLUSTER_=Cluster ID;
15897 +        run;
15899 +    %end;
15901 +   %end_train_cluster:
15903 +       filename temp;
15905 +       %if &tm_debug =0  %then %do;
15906 +          proc sql nowarn noprint;
15907 +              drop table _clusstat;
15908 +              drop table _clusstat2;
15909 +              drop table _fastclusstat;
15910 +              drop table _clustermean;
15911 +              drop table _meandocs;
15912 +              drop table _rmscalc;
15913 +              drop table _rmsse;
15914 +              drop table _meanerr;
15915 +              drop table _tmutildoc;
15916 +              drop table _desc_;
15917 +              drop table _terms_;
15918 +              drop table _docs_;
15919 +              drop table _tmout_;
15920 +           quit;
15921 +       %end;
15924 +%mend;
NOTE: %INCLUDE (level 1) ending.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMTXTEXT.TM_APPLY_TMUTIL.SOURCE.
15926 + /*****************************************************************
15927 + * Copyright (C) 2009 by SAS Institute Inc., Cary, NC 27513
15928 + *
15929 + * Name:             tm_apply_tmutil.sas
15930 + * Support:          rualbr Russell Albright
15931 + * Product:
15932 + * Language:         Sas
15933 + * Script:
15934 + *
15935 + * Usage:
15936 + *
15937 + * data= out data set from tgparse
15938 + * terms= terms from tgparse
15939 + * offsets=  addoffset data set form tgparse
15940 + * docs=  data set of document id's and potentially target, not required unless target weighting is used.
15941 + * keepdocs= list of docs to keep. This is a subset of the original docs data set. Not required.
15942 + * reduceF=defaults to log(n) if not specified, eliminates terms if not in at least that many docs
15943 + *     use reduceF=1 to retain all terms.
15944 + * termweight= none, entropy, mi,
15945 + * cellweight= none, log, bin,
15946 + * synnum= Input synonym data set of _termnum_, parent ID pairs
15947 + * synchar= Input synonym data set of term,termrole, parent, parentrole. This data set will
15948 + * get converted to synnym format by the macro tm_convert_syns.
15949 + * targetvar= name of variable on doc dataset contining targetvar.
15950 + * outdata= output out dataset with no more children on this dataset
15951 + * outterms= output terms dataset with dup terms eliminated
15952 + * outweights= weight vector for the terms
15953 + * outoffsets= subsetted outtable with childterms replaced with parents
15954 + * applyweight = , indicates if the weight settings are to be applied to the output OUT table. 0 no, 1 yes.
15955 + * memloc= string for tmutil to use to store its memory pointer. Normally the default can just be used.
15956 + * keeponly=Y  If set to Y (default), then only kept terms are output in terms table.
15957 + *
15958 + * Purpose: Massage the out and key from docparse so that they can bes used
15959 + * in data mining applications.
15960 + *
15961 + * History:
15962 + *
15963 + * Notes:
15964 + *
15965 + * Last Modified By:
15966 + * Last Modified On: Tue Mar 05 16:32:57 2013
15967 + *
15968 + * End
15969 + * ************************************************************** */
15972 +%macro tm_apply_tmutil(data=, terms=,docs=,offsets=,keepdocs=,termweight=none,
15973 +                            cellweight=none,reduceF=,outdata=,outterms=,outweights=,
15974 +                            outoffsets=, synnum=,synchar=, targetvar=, applyweight = 0,
15975 +                            memloc=tmutil_loc,keeponly=Y,repOnly=N);
15976 +     %local keepdocs tempF reduceF synnum  terms  paraExist sentExist;
15979 +    %let EMEXCEPTIONSTRING=;
15980 +    %let syscc=0;
15981 +    %let systmutil=0;
15985 +    /* Find terms to drop */
15986 +        %if &keepdocs ne %then %do;
15987 +          proc sql noprint;
15988 +                create view _keepdata as
15989 +                select * from &data where _DOCUMENT_ in
15990 +                (select _DOCUMENT_ from &keepdocs);
15991 +          quit;
15992 +        %end;
15993 +          %else %do;
15995 +             proc sql noprint;
15996 +                 create view _keepdata as
15997 +                 select * from &data;
15998 +             quit;
16000 +           %let keepdocs=&docs;
16001 +        %end;
16004 +    /* set default on reduceF*/
16005 +         %if &reduceF = %then %do;
16006 +            proc sql noprint;
16007 +           select count(*) into :numdocs from &docs;
16008 +        quit;
16009 +        %let tempF = %sysfunc(log10(%eval(&numdocs+1)));
16010 +        %let reduceF= %sysfunc(floor(&tempF));
16011 +         %end;
16014 +    /* find synnum if synchar supplied */
16016 +    %if &synchar ne %then %do;
16017 +            filename temp catalog 'sashelp.emtxtext.tm_convert_syns.source';
16018 +            %include temp;
16019 +            %tm_convert_syns(insyns= &synchar, outsyns=_myOutsyns ,
16020 +                         interms=&terms,
16021 +                          outterms=newterms );
16022 +                %let numsyns=0;
16023 +                proc sql;
16024 +                   select count(*) into: numsyns
16025 +                   from _myOutsyns;
16026 +                quit;
16027 +                %if &numsyns >0 %then %do;
16028 +                   %Let synnum=_myOutsyns;
16029 +                   %let terms=newterms;
16030 +                %end;
16031 +    %end;
16032 +    /* get the out and key in the proper format*/
16033 +    proc tmutil data=_keepdata key= &terms doc=&keepdocs
16034 +        %if &targetvar ne %then target=&targetvar;
16035 +        ;
16036 +        control init memloc="&memloc";
16037 +            %if &synnum ne %then syn syndata=&synnum force;
16038 +         ;
16039 +    run;
16040 +    %if &syscc >4 %then %goto end_tm_apply_tmutil;
16041 +    %if &reduceF>1 %then %do;
16042 +           proc tmutil;
16043 +           control memloc="&memloc";
16044 +               select reduceF=&reduceF;
16045 +        run;
16046 +   %end;
16047 +    %if &syscc >4 %then %goto end_tm_apply_tmutil;
16049 +     proc tmutil;
16050 +        control memloc="&memloc" release;
16051 +        weight termwgt=&termweight cellwgt=&cellweight;
16052 +            output key=_termstmutil  keyformat=default
16053 +               %if &keeponly eq Y %then keeponly;
16054 +               %if &applyweight  eq 0 %then unweighted ;
16055 +               out=&outdata;
16056 +    run;
16057 +    %if &syscc >4 %then %goto end_tm_apply_tmutil;
16059 +    proc sql noprint;
16060 +           create table _distinctterms as
16061 +           select distinct key,term, role, attribute
16062 +           from &terms;
16064 +       create table &outterms as
16065 +       select  b.term, b.role,b.attribute ,a.*
16066 +       from _termstmutil a left join  _distinctterms b
16067 +       on a.key=b.key;
16068 +       ;
16069 +       %if &outweights ne %then %do;
16070 +          create table &outweights as
16071 +          select distinct a.key as index, a.weight as gwgt
16072 +          from &outterms(where=(_ispar in('+',' '))) a inner join
16073 +                         _distinctterms b
16074 +          on a.key =b.key;
16075 +       %end;
16077 +     quit;
16078 +     %if &offsets ne and &outoffsets ne %then %do;
16080 +        %let paraExist=0; %let sentExist=0;
16081 +        data _null_;
16082 +          dsid=open("&offsets");
16083 +          para=varnum(dsid,'_paragraph_');
16084 +          sent=varnum(dsid,'_sentence_');
16085 +          if para ge 1 then call symput('paraExist',1);
16086 +          if sent ge 1 then call symput('sentExist',1);
16087 +          run;
16090 +        proc sql noprint;
16091 +        create table &outoffsets as
16092 +           select  a._document_,
16093 +              %if &paraExist=1 %then a._paragraph_, ;
16094 +              %if &sentExist=1 %then a._sentence_,;
16095 +              a._offset_, a._length_, b.parent_id as _termnum_
16096 +                 from &offsets a, _termstmutil (where=(_ispar ne "+" and keep="Y")) b
16097 +                 where a._termnum_ = b.key;
16098 +              quit;
16099 +       %end;
16103 +     %end_tm_apply_tmutil:
16105 +     %if ^%symexist(tm_debug) %then %let tm_debug=0;
16106 +       %if &tm_debug =0  %then %do;
16107 +          proc sql noprint;
16108 +            drop table _termstmutil;
16109 +            drop table _distinctterms;
16110 +            drop view _keepdata;
16111 +            %if &synchar ne and &synnum ne  %then drop table &synnum; ;
16112 +         quit;
16113 +     %end;
16114 +     %if &syscc >4 and &systmutil > 4 %then %do;
16115 +           %let EMEXCEPTIONSTRING = EMTOOL.TMUTIL,&systmutil;
16116 +           %put emexceptionstring= "&EMEXCEPTIONSTRING";
16117 +           %let syscc=0;
16118 +     %end;
16120 +%mend;
NOTE: %INCLUDE (level 1) ending.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMTXTEXT.TM_SVD_DO_SAMP.SOURCE.
16122 +   /* ****************************************************************
16123 + * Copyright (C) 2009 by SAS Institute Inc., Cary, NC 27513
16124 + *
16125 + * Name:             tm_svd_do_samp.sas
16126 + * Product:
16127 + * Language:         Sas
16128 + * Script:
16129 + *
16130 + * Usage:
16131 + *
16132 + * data=out dataset containing only repreentative terms
16133 + * maxK= max number of dimensions to use to computer svd
16134 + * res=<high, med, low> guidenceon what number of dims to choose
16135 + * cellwgt= <none, log, binary>
16136 + * in_global= dataset with index, weight variables
16137 + * rowVar= name of the variable representing row(term)
16138 + * colVar= name of the variable representing col
16139 + * entryVar=count for row,col
16140 + * u= name of output u matrix
16141 + * v= name of output v matrix
16142 + * s= name of output s matrix
16143 + * colpro=dataset to hold projections for terms
16144 + * rowpro= datset to hold projections for docs
16145 + * normcol=<normcol> extra option to add to normalize docs
16146 + * normrow=<normrow> extra option to add to normalize terms
16147 + * docs =<document data set of ids that are being analyzed.
16148 +*      docs needs to be input explicit since some docs may have not terms
16149 + *
16150 + * Purpose: macro to run svd and compute projections, first without mpling
16151 + * and then with sampling onon.
16152 + *
16153 + * History:
16154 + *
16155 + * Notes:
16156 + *
16157 + * Last Modified By:
16158 + * Last Modified On: Thu Jan 08 17:22:43 2009
16159 + *
16160 + * End
16161 + * ************************************************************** */
16162 +%macro tm_svd_do_samp(data=,docs=,maxK=,res=,cellwgt=,in_global=,
16163 +                     rowVar=,colVar=,entryVar=,u=,v=,s=,
16164 +                     colpro=,rowpro=,normcol=, normrow=,prefix=SVD);
16166 +   %local svdkeep;
16167 +   %let syscc=0;
16168 +   proc sort data=&data; by _termnum_; run;
16170 +   proc spsvd data=&data max_k = &maxK res = &res
16171 +       local = &cellWgt global =none in_global = &in_global;
16172 +       row _termnum_;
16173 +       col _document_;
16174 +       entry _count_;
16175 +       output  u = &U v = &V s = &s;
16176 +   run;
16178 +   /*try sampling if out of memory occurred*/
16179 +   %if(&syscc eq 1111) %then %do;
16180 +      %let syscc=0; /*reset syscc*/
16181 +      proc spsvd data = &data max_k = &maxK res = &res
16182 +          local = &cellWgt global = none in_global = &in_global ;
16183 +          row &rowVar;
16184 +          col &colVar;
16185 +          entry &entryVar;
16186 +          output u = &U v = &V s = &s;
16187 +          sample allow;
16188 +      run;
16189 +   %end;
16190 +    %if &syscc > 4 %then %do;
16191 +       %let EMEXCEPTIONSTRING = EMTOOL.SPSVDERROR;
16192 +       %goto end_svd_do_samp;
16193 +    %end;
16196 +   /* if resolution is used, the matrix U/V must be truncated to the set number of dim.*/
16197 +   proc sql noprint;
16198 +       select count(*) into: svdkeep
16199 +       from &s
16200 +       where keep=1;
16201 +    quit;
16203 +    %let svdkeep=%left(&svdkeep);
16204 +    data &U;
16205 +    set &U(keep= index col1-col&svdkeep);
16206 +    run;
16208 +    data &V;
16209 +    set &V(keep= index col1-col&svdkeep);
16210 +    run;
16211 +    %if &colpro ne %then %do;
16212 +       /* when sampling weights may have wrong dimensions*/
16213 +       proc sql noprint;
16214 +          create table new_global as
16215 +             select a.*
16216 +             from &in_global a, &U b
16217 +             where a.index = b.index;
16218 +       quit;
16221 +        proc sort data=&data; by &colVar; run;
16222 +        proc spsvd data=&data IN_U=&U
16223 +            local = &cellWgt global = none in_global = new_global ;
16224 +            row &rowVar;
16225 +            col &colVar;
16226 +            entry &entryVar;
16227 +            output colpro=&colpro bigpro normcol prefix="&prefix._SVD";
16228 +        run;
16230 +        proc sort data=&docs(keep=_document_)  out=_docids;
16231 +        by _document_;
16232 +        run;
16234 +        data &colpro;
16235 +           merge &colpro _docids(rename=(_document_=index));
16236 +        by index;
16237 +        run;
16240 +        data &colpro;
16241 +          set  &colpro;
16242 +          array svd_array &prefix._SVD1 - &prefix._SVD&SVDKEEP;
16243 +          do i = 1 to dim(svd_array);
16244 +             if svd_array(i)=. then svd_array(i)=0;
16245 +          end;
16246 +          drop i;
16247 +        run;
16248 +    %end;
16250 +    %if &syscc > 4 %then %do;
16251 +       %let EMEXCEPTIONSTRING = EMTOOL.SPSVDERROR;
16252 +       %goto end_svd_do_samp;
16253 +    %end;
16255 +    %if &rowpro ne %then %do;
16256 +        proc sort data=&data; by &rowVar; run;
16257 +        /* when sampling weights may have wrong dimensions*/
16258 +       proc sql;
16259 +          create table new_global as
16260 +             select a.*
16261 +             from &in_global a, &U b
16262 +             where a.index = b.index;
16263 +       quit;
16265 +        proc spsvd data=&data IN_V=&V
16266 +            local = &cellWgt global = none in_global = new_global ;
16267 +            row &rowVar; col &colVar; entry &entryVar;
16268 +            output wordPro = &rowpro bigpro normrow prefix="&prefix._SVD";
16269 +        run;
16270 +    %end;
16272 +    %if &syscc > 4 %then %do;
16273 +       %let EMEXCEPTIONSTRING = EMTOOL.SPSVDERROR;
16274 +       %goto end_svd_do_samp;
16275 +    %end;
16277 +   %end_svd_do_samp:
16279 +%mend;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS5.TEXTCLUSTER_VARIABLESET.
      WHERE (KUPCASE(NAME)='MESSAGE') and USE in ('D', 'Y');
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 5 observations read from the data set EMWS5.TEXTFILTER_EMINFO.
NOTE: The data set EMWS5.TEXTCLUSTER_LAST_TM_NODES has 5 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.07 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 0 observations read from the data set EMWS5.TEXTCLUSTER_VARIABLESET.
      WHERE (ROLE='TARGET') and USE in ('D', 'Y') and (LEVEL not = 'INTERVAL');
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
NOTE: Table EMWS5.TEXTCLUSTER_TMCONFIG created, with 1 rows and 29 columns.
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.07 seconds
      cpu time            0.03 seconds
 
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 2694 observations read from the data set EMWS5.TEXTPARSING_TRAIN.
NOTE: There were 2694 observations read from the data set EMWS5.TEXTFILTER_DOC_IDS.
NOTE: There were 2694 observations read from the data set EMWS5.TEXTFILTER_TRAIN.
NOTE: The data set WORK._KEEPDOCS has 2694 observations and 1 variables.
NOTE: DATA statement used (Total process time):
      real time           0.05 seconds
      cpu time            0.01 seconds
 
 
NOTE: SQL view WORK._KEEPDATA has been defined.
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
WARNING:  The input DOC data set contained documents numbered larger than those on the input DATA data set.
NOTE: There were 11913 observations read from the data set EMWS5.TEXTFILTER_TMOUT.
NOTE: There were 2693 observations read from the data set WORK._KEEPDOCS.
NOTE: There were 11913 observations read from the data set WORK._KEEPDATA.
NOTE: There were 2110 observations read from the data set EMWS5.TEXTFILTER_TERMS_DATA.
      WHERE KEEP='Y';
NOTE: There were 8167 observations read from the data set EMWS5.TEXTFILTER_TERM_STRINGS.
NOTE: There were 2694 observations read from the data set WORK._KEEPDOCS.
NOTE: PROCEDURE TMUTIL used (Total process time):
      real time           0.17 seconds
      cpu time            0.04 seconds
 
 
 
NOTE: PROCEDURE TMUTIL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: The data set WORK._TERMSTMUTIL has 2110 observations and 8 variables.
NOTE: The data set WORK._OUTTMUTIL_ has 11893 observations and 3 variables.
NOTE: PROCEDURE TMUTIL used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
NOTE: Table WORK._DISTINCTTERMS created, with 1732 rows and 4 columns.
 
NOTE: Table WORK._NEWKEY created, with 2110 rows and 11 columns.
 
NOTE: Table WORK._WEIGHTS created, with 1159 rows and 2 columns.
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.07 seconds
      cpu time            0.04 seconds
 
 
 
NOTE: There were 11893 observations read from the data set WORK._OUTTMUTIL_.
NOTE: The data set WORK._OUTTMUTIL_ has 11893 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: P has been set to 75.
NOTE: Restart 1, Converged 43
NOTE: Restart 2, Converged 66
NOTE: Restart 3, Converged 96
NOTE: Singular values have converged.  Creating data sets.
NOTE: Restarted 3 times.
NOTE: Using value of 54 for K.
NOTE: There were 11893 observations read from the data set WORK._OUTTMUTIL_.
NOTE: There were 1159 observations read from the data set WORK._WEIGHTS.
NOTE: The data set EMWS5.TEXTCLUSTER_SVD_U has 1159 observations and 101 variables.
NOTE: The data set WORK._SVDV has 2565 observations and 101 variables.
NOTE: The data set EMWS5.TEXTCLUSTER_SVD_S has 100 observations and 2 variables.
NOTE: PROCEDURE SPSVD used (Total process time):
      real time           0.55 seconds
      cpu time            0.42 seconds
 
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1159 observations read from the data set EMWS5.TEXTCLUSTER_SVD_U.
NOTE: The data set EMWS5.TEXTCLUSTER_SVD_U has 1159 observations and 55 variables.
NOTE: DATA statement used (Total process time):
      real time           0.08 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 2565 observations read from the data set WORK._SVDV.
NOTE: The data set WORK._SVDV has 2565 observations and 55 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
NOTE: Table WORK.NEW_GLOBAL created, with 1159 rows and 2 columns.
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 11893 observations read from the data set WORK._OUTTMUTIL_.
NOTE: The data set WORK._OUTTMUTIL_ has 11893 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 11893 observations read from the data set WORK._OUTTMUTIL_.
NOTE: There were 1159 observations read from the data set EMWS5.TEXTCLUSTER_SVD_U.
NOTE: There were 1159 observations read from the data set WORK.NEW_GLOBAL.
NOTE: The data set WORK._SVDCOLPRO has 2565 observations and 55 variables.
NOTE: PROCEDURE SPSVD used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 2694 observations read from the data set WORK._KEEPDOCS.
NOTE: The data set WORK._DOCIDS has 2694 observations and 1 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 2565 observations read from the data set WORK._SVDCOLPRO.
NOTE: There were 2694 observations read from the data set WORK._DOCIDS.
NOTE: The data set WORK._SVDCOLPRO has 2694 observations and 55 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 2694 observations read from the data set WORK._SVDCOLPRO.
NOTE: The data set WORK._SVDCOLPRO has 2694 observations and 55 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 11893 observations read from the data set WORK._OUTTMUTIL_.
NOTE: The data set WORK._OUTTMUTIL_ has 11893 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
NOTE: Table WORK.NEW_GLOBAL created, with 1159 rows and 2 columns.
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 11893 observations read from the data set WORK._OUTTMUTIL_.
NOTE: There were 2565 observations read from the data set WORK._SVDV.
NOTE: There were 1159 observations read from the data set WORK.NEW_GLOBAL.
NOTE: The data set WORK._SVDROWPRO has 1159 observations and 55 variables.
NOTE: PROCEDURE SPSVD used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
NOTE: Table EMWS5.TEXTCLUSTER_TERMS created, with 2110 rows and 67 columns.
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.27 seconds
      cpu time            0.06 seconds
 
 
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMTEXT.TMGETNCL.SOURCE.
16282 +
16283 + /*
16284 +  Macro:   tmgetncl.sas
16285 +  Purpose: To obtain a default number of clusters
16286 +  Syntax:  %tmgetncl(data=, maxclusters=, vars=);
16287 +
16288 +  Required Parameters:  data=      The input data set.
16289 +
16290 +  Optional Parameters:  vars=      Variables to be used
16291 +
16292 +  History:
16293 +  2001/01/23 - Bill Wheeler - Initial Coding.
16294 +
16295 +*/
16296 + %MACRO tmgetncl(data=, maxclusters=, vars=, tempDS=,
16297 +                 clusDS=, threads=THREADS);
16298 +
16299 +  %if &maxclusters= %then %let maxclusters = 40;
16300 +
16301 +  %if &vars ^= %then %let var = var &vars;
16302 +  %else %let var = ;
16303 +
16304 +  /* run PROC FASTCLUS with maxClusters clusters */
16305 +  proc fastclus data = &data noprint
16306 +    maxclusters = &maxclusters
16307 +    mean = &tempDS;
16308 +    &var
16309 +    ;
16310 +    run;
16311 +
16312 +  /* use PROC CLUSTER with the MEAN data set from FASTCLUS */
16313 +  proc cluster data = &tempDS
16314 +    method = WARD
16315 +    pseudo
16316 +    noprint
16317 +    outtree = &tempDS;
16318 +    &var;
16319 +  run;
16320 +
16321 +  %if (&SYSERR > 4) %then %do;
16322 +    data &clusDS; nclus = 0; run;
16323 +    %goto exit;
16324 +  %end;
16325 +
16326 +  /* sort and get rid of missing values in the outtree data set */
16327 +  %tmsort(data=&tempDS(where=(_ccc_ > -99999.0) keep = _ncl_ _ccc_),
16328 +        out=&tempDS, by=_ncl_, options=, threads=&threads);
16329 +
16330 +  data &clusDS; set &tempDS;
16331 +    keep nclus;
16332 +    retain loclclus -1 loclccc 0 maxccc 0 maxclus 0
16333 +   jclus -1 maxjump -1 nclus 0 jccc 0 prevjump 0 jump 0 occc 0 oncl 0;
16334 +
16335 +   if _N_ = 1 then do;
16336 +     maxccc = _ccc_;
16337 +     maxclus = _ncl_;
16338 +     nclus = _ncl_;
16339 +     occc = _ccc_;
16340 +     oncl = _ncl_;
16341 +   end;
16342 +   else if (_N_ = 2) then do;
16343 +     jump = _ccc_ - occc;
16344 +     if (jump > 0) then do;
16345 +       maxjump = jump;
16346 +       jclus = _ncl_;
16347 +     end;
16348 +     if (_ccc_ > maxccc) then do;
16349 +       maxccc = _ccc_;
16350 +       maxclus = _ncl_;
16351 +     end;
16352 +     occc = _ccc_;
16353 +     oncl = _ncl_;
16354 +   end;
16355 +
16356 +   else if (_N_ > 2) then do;
16357 +     prevjump = jump;
16358 +     jump = _ccc_ - occc;
16359 +
16360 +     if ((prevjump > 0) & (jump < 0) & (loclclus < 0)) then do;
16361 +        loclclus = oncl;
16362 +        loclccc = occc;
16363 +     end;
16364 +     if (_ccc_ > maxccc) then do;
16365 +       maxccc = _ccc_;
16366 +       maxclus = _ncl_;
16367 +     end;
16368 +     if ((jump > 0) & (jump > maxjump)) then do;
16369 +       jclus = _ncl_;
16370 +       maxjump = jump;
16371 +       jccc = _ccc_;
16372 +     end;
16373 +
16374 +     occc = _ccc_;
16375 +     oncl = _ncl_;
16376 +
16377 +     if ((loclclus > 0) & (jclus > 0)) then nclus = MIN(loclclus, jclus);
16378 +     else if (loclclus > 0) then nclus = loclclus;
16379 +     else if (jclus > 0) then nclus = jclus;
16380 +     else nclus = maxclus;
16381 +   end;
16382 +  run;
16383 +
16384 +  %exit: ;
16385 +
16386 +%MEND tmgetncl;
NOTE: %INCLUDE (level 1) ending.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMTEXT.TMFAST.SOURCE.
16387 + /*
16388 +
16389 +  Macro:   tmfast.sas
16390 +  Purpose: Call proc fastclus with given defaults and parameters.
16391 +  Syntax:  %tmfast(data=, clusters=, outstat=, vars=);
16392 +
16393 +  Required Parameters:  data=      The input data set.
16394 +                        clusters=  The maximum number of clusters
16395 +
16396 +  Optional Parameters:  vars=      Variables to be used
16397 +                        outstat=   The name of the OUTSTAT data set
16398 +                        outseed=   The name of the OUTSEED data set
16399 +
16400 +  Either outstat or outseed mut be given, but not both.
16401 +  History:
16402 +  2001/01/16 - Bill Wheeler - Initial Coding.
16403 +
16404 +*/
16405 +%MACRO tmfast(data=, clusters=, outstat=, outseed=,
16406 +                 id=, out=, vars=);
16407 + /* defaults */
16408 + %if (&id ne ) %then %let id = id &id;
16409 + %if (&out ne ) %then %let out = out = &out;
16410 + %if (&vars ne ) %then %let var = var &vars;
16411 + %else %let var = ;
16412 +
16413 + %if &outseed= %then
16414 + %do;
16415 +   proc fastclus data = &data
16416 +   maxclusters = &clusters noprint
16417 +   outstat = &outstat &out;
16418 +   &var;
16419 +   &id;
16420 + %end;
16421 + %else
16422 + %do;
16423 +   proc fastclus data = &data
16424 +   maxclusters = &clusters noprint
16425 +   outseed = &outseed &out;
16426 +   &var;
16427 +   &id;
16428 + %end;
16429 +%MEND tmfast;
NOTE: %INCLUDE (level 1) ending.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMTEXT.TMEMCLUS.SOURCE.
16430 +
16431 + /*
16432 +
16433 +  Macro:   tmemclus.sas
16434 +  Purpose: Call proc emclus with given defaults and parameters.
16435 +  Syntax:  %tmemclus(data=, role=, clusters=, seed=,
16436 +                   outstat=, out=, vars=, cov=, iter=, secclus=,
16437 +                   seciter=, min=, method=, eps=, init=, print=,
16438 +                   p=, outliers=, decvar=, initstd=, dist=,
16439 +                   secstd=, nobs=, threads=);
16440 +  Required Parameters:  data=      The input data set.
16441 +                        role=      Train or score
16442 +                        clusters=  The number of primary clusters
16443 +
16444 +  Optional Parameters:  vars=      Variables to be used
16445 +                   cov=       Type of covariance matrix
16446 +                   iter=      Number of EM iterations
16447 +                   secclus    Number of secondary clusters
16448 +                   seciter    Number of k-means iterations
16449 +                   min=       Minimum number of obs in a cluster
16450 +                   method=    Standard or scaled
16451 +                   eps=       Stopping tolerance
16452 +                   init=      Random, Fastclus, or Emclus
16453 +                   print=     All, last, or none
16454 +                   p=
16455 +                   outliers=  Keep, cluster, or ignore
16456 +                   outstat=   Name of OUTSTAT data set
16457 +                   out=       Name of OUT data set
16458 +                   seed=      Name of SEED data set
16459 +                   decvar=    Proportion to decrease variances
16460 +                   initstd=   Initial standard deviation
16461 +                   dist=      Minimum distance between clusters
16462 +                   secstd=    Secondary cluster max std dev.
16463 +                   nobs=      Number of obs read in each iteration
16464 +  History:
16465 +  2001/01/16 - Bill Wheeler - Initial Coding.
16466 +  2001/11/29 - Bill Wheeler - Updated for version 8 or 9
16467 +*/
16468 +%MACRO tmemclus(data=, role=, clusters=, seed=,
16469 + outstat=, out=, vars=, cov=, iter=, secclus=,
16470 + seciter=, min=, method=, eps=, init=, print=,
16471 + p=, outliers=, decvar=, initstd=, dist=, secstd=, nobs=, threads=);
16472 +
16473 + %local saveout saveseed op1 op2 op3 op4;
16474 +
16475 + %LET saveout = &out;
16476 + %LET saveseed = &outstat;
16477 +
16478 + /* defaults */
16479 + %if &role= %then %let role = TRAIN;
16480 + %if &seed ne %then %let seed = seed=&seed;
16481 + %if &vars= %then %let var = ;
16482 + %else %let var = var &vars;
16483 + %if &cov ne %then %let cov = cov = &cov;
16484 + %if &iter ne %then %let iter = iter = &iter;
16485 + %if &init ne %then %let init = init = &init;
16486 + %if &eps ne  %then %let eps = eps = &eps;
16487 + %if &min ne %then %let min = min = &min;
16488 + %if &seciter ne %then %let seciter = seciter = &seciter;
16489 + %if &print ne %then %let print = print = &print;
16490 + %if &p ne %then %let p = p = &p;
16491 + %if &outliers ne %then %let outliers = outliers = &outliers;
16492 + %if &method ne %then %let method = method = &method;
16493 + %if &decvar ne %then %let decvar = decvar = &decvar;
16494 + %if &outstat ne %then %let outstat = outstat = &outstat;
16495 + %if &out ne %then %let out = out = &out;
16496 + %if (&threads >= 0)  %then %let threads = threads = &threads;
16497 + %else %let threads = ;
16498 +
16499 + %LET op1 = ;
16500 + %LET op2 = ;
16501 + %LET op3 = ;
16502 + %LET op4 = ;
16503 + %if ^(&initstd=) %then %let op1 = %str(initstd = &initstd);
16504 + %if ^(&dist=) %then %let op2 = %str(dist = &dist);
16505 + %if ^(&secstd=) %then %let op3 = %str(secstd = &secstd);
16506 + %if ^(&nobs=) %then %let op4 = %str(nobs = &nobs);
16507 +
16508 +
16509 + %IF &SYSVER < 9 %THEN %DO;
16510 +    %LET cov = ;
16511 +    %LET decvar = ;
16512 +    %LET outliers = ;
16513 +    %LET out = ;
16514 + %END;
16515 +
16516 +
16517 + %if %upcase(&role) = TRAIN %then
16518 + %do;
16519 +   proc emclus data = &data
16520 +   clusters = &clusters
16521 +   &seed
16522 +   &outstat
16523 +   &out
16524 +   &init
16525 +   &eps
16526 +   &method
16527 +   &secclus
16528 +   &min
16529 +   &print
16530 +   &outliers
16531 +   &iter
16532 +   &op1 &op2
16533 +   &op3 &op4
16534 +   &decvar
16535 +   &cov
16536 +   &threads
16537 +   ;
16538 +   &var;
16539 + %end;
16540 + %else
16541 +  %do;
16542 +    proc emclus data = &data
16543 +    role = score
16544 +    clusters = &clusters
16545 +    &seed
16546 +    &out
16547 +    &cov
16548 +    ;
16549 +    &var;
16550 +  %end;
16551 +
16552 + %IF &SYSVER < 9 and &saveout ^= %THEN %DO;
16553 +   proc emclus data = &data
16554 +   role = score
16555 +   clusters = &clusters
16556 +   seed = &saveseed
16557 +   &saveout
16558 +   ;
16559 +   &var;
16560 + %END;
16561 +
16562 +
16563 +%MEND tmemclus;
NOTE: %INCLUDE (level 1) ending.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMTEXT.TMPRED.SOURCE.
16564 +
16565 +/*
16566 +  Macro: tmpred(inds,outds,clusters,type=,ignore=,freqDS=)
16567 +
16568 +  Description: This macro will take output from
16569 +     emclus and generate predicted
16570 +      predicted clusters.
16571 +
16572 +  Parms: inds - input data set, produced by emclus.
16573 +   outds - data set with clusters created by this macro.
16574 +   clusters - number of clusters that should be on this data set
16575 +   type - valid values: 'max' or 'prob'.  Max will just take the
16576 +      cluster with the highest probability as the predicted cluster.
16577 +      In the case of a tie the first cluster with that value will
16578 +       selected.
16579 +      Prob will attempt to select multiple clusters based on
16580 +      how many clusters were requested.  That is if 3 clusters
16581 +      were requested, any cluster with prob>1/3 will be selected
16582 +      as the predicted cluster. THIS OPTION IS UNTESTED.
16583 +*/
16584 +
16585 +%macro tmpred(inds,outds,clusters,type=, ignore=0, freqDS=, compress=1);
16586 +
16587 +  %local _str newfreqDS _flag;
16588 +
16589 +  * set the optional arguments;
16590 +  %if &type= %then %let type=max;
16591 +  %if &ignore = 1 %then %let
16592 +    _str = if _CLUSTER_ = &clusters then _CLUSTER_ = .;
16593 +  %else %let _str = ;
16594 +  %if %str(&freqDS) ^= %str() %then %do;
16595 +   %let newfreqDS = &freqDS(keep=_c1-_c&clusters);
16596 +   %let _flag = 1;
16597 +  %end;
16598 +  %else %let _flag = 0;
16599 +
16600 +  %if &compress = 1 %then %let compress = compress=Y;
16601 +  %else %let compress = ;
16602 +
16603 +  data &outds(&compress drop=_c1-_c&clusters)
16604 +    %if &_flag = 1 %then %do;
16605 +    &newfreqDS
16606 +    %end;
16607 +    ;
16608 +    set &inds end=eof;
16609 +   * array for holding all probabilities;
16610 +    array _p prob1--prob&clusters;
16611 +    array _c(&clusters);
16612 +    retain _c 0;
16613 +   * get rid of working columns;
16614 +    drop _max_ _i /*prob1--prob&clusters*/ _WARN_;
16615 +    /* keep the largest probability and the cluster */
16616 +    _max_ = 0;
16617 +    do _i = 1 to &clusters;
16618 +      if _p(_i) > _max_ then do;
16619 +        _max_ = _p(_i);
16620 +        _CLUSTER_ = _i;
16621 +      end;
16622 +    end;
16623 +    if (_CLUSTER_ >= 1) and (_CLUSTER_ <= &clusters) then
16624 +      _c(_CLUSTER_) = _c(_CLUSTER_) + 1;
16625 +    else _CLUSTER_ = .;
16626 +    &_str;
16627 +    %if &_flag = 1 %then %do;
16628 +      if eof then do;
16629 +        output &freqDS;
16630 +                output &outDS;
16631 +          end;
16632 +          else output &outDS;
16633 +        %end;
16634 +
16635 +    run;
16636 +%mend tmpred;
NOTE: %INCLUDE (level 1) ending.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMTEXT.TMSORT.SOURCE.
16637 + /*
16638 +PROC SORT macro
16639 +
16640 +%tmsort(data=, out=, by=);
16641 +
16642 +data=      - name of input data set (outtree data set from PROC CLUSTER)
16643 +out=       - name of the output data set
16644 +by=        - by statement
16645 +options=   - proc options
16646 +*/
16647 +
16648 +%macro tmsort(data=, out=, by=, options=, threads=THREADS);
16649 +  %if %BQUOTE(&out) ^= %then %let out = out =  &out;
16650 +  %if &SYSVER < 9 %then %let threads = ;
16651 +
16652 +  proc sort data = %STR(&data) &threads &options
16653 +    &out;
16654 +    by &by;
16655 +  run;
16656 +
16657 +%mend tmsort;
NOTE: %INCLUDE (level 1) ending.
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: The data set WORK._CLUSTEMP1 has 15 observations and 61 variables.
NOTE: PROCEDURE FASTCLUS used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: The data set WORK._CLUSTEMP1 has 29 observations and 70 variables.
NOTE: PROCEDURE CLUSTER used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 14 observations read from the data set WORK._CLUSTEMP1.
      WHERE _ccc_>-99999;
NOTE: The data set WORK._CLUSTEMP1 has 14 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 14 observations read from the data set WORK._CLUSTEMP1.
NOTE: The data set WORK._CLUSTEMP has 14 observations and 1 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: The data set WORK._FASTCLUSSTAT has 70 observations and 57 variables.
NOTE: PROCEDURE FASTCLUS used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: The standard EM algorithm will be run.
NOTE: DIST is set to 0.1299616147
NOTE: EPS is set to 0.1
NOTE: INITSTD is set to 15.270279804
NOTE: ITER is set to 5
NOTE: MAXTIME is set to 2147483647
WARNING: The maximum number of 5 iterations in the EM algorithm has been reached. Parameter estimates may not be accurate.
NOTE: There were 2694 observations read from the data set WORK._SVDCOLPRO.
NOTE: There were 70 observations read from the data set WORK._FASTCLUSSTAT.
NOTE: The data set EMWS5.TEXTCLUSTER_EMOUTSTAT has 25 observations and 61 variables.
NOTE: The data set WORK._TMUTILDOC has 2694 observations and 68 variables.
NOTE: PROCEDURE EMCLUS used (Total process time):
      real time           0.70 seconds
      cpu time            0.54 seconds
 
 
 
NOTE: There were 2694 observations read from the data set WORK._TMUTILDOC.
NOTE: The data set EMWS5.TEXTCLUSTER_DOCS has 2694 observations and 68 variables.
NOTE: Compressing data set EMWS5.TEXTCLUSTER_DOCS decreased size by 0.00 percent.
      Compressed is 23 pages; un-compressed would require 23 pages.
NOTE: The data set WORK._CLUSSTAT has 1 observations and 12 variables.
NOTE: DATA statement used (Total process time):
      real time           0.13 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 2694 observations read from the data set EMWS5.TEXTCLUSTER_DOCS.
NOTE: The data set EMWS5.TEXTCLUSTER_DOCS has 2694 observations and 68 variables.
NOTE: DATA statement used (Total process time):
      real time           0.11 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      451:154
NOTE: There were 1 observations read from the data set WORK._CLUSSTAT.
NOTE: The data set WORK._CLUSSTAT has 12 observations and 15 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 12 observations read from the data set WORK._CLUSSTAT.
NOTE: The data set WORK._CLUSSTAT has 12 observations and 16 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 25 observations read from the data set EMWS5.TEXTCLUSTER_EMOUTSTAT.
NOTE: The data set WORK._CLUSTERMEAN has 12 observations and 55 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
 
 
NOTE: Table WORK._MEANDOCS created, with 2694 rows and 122 columns.
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.06 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 2694 observations read from the data set WORK._MEANDOCS.
NOTE: There were 12 observations read from the data set WORK._CLUSSTAT.
NOTE: The data set WORK._RMSCALC has 2694 observations and 138 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 2694 observations read from the data set WORK._RMSCALC.
NOTE: The data set WORK._MEANERR has 12 observations and 5 variables.
NOTE: PROCEDURE SUMMARY used (Total process time):
      real time           0.03 seconds
      cpu time            0.04 seconds
 
 
 
NOTE: There were 12 observations read from the data set WORK._MEANERR.
NOTE: The data set WORK._RMSSE has 12 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
NOTE: Table WORK._CLUSSTAT2 created, with 12 rows and 56 columns.
 
NOTE: Table EMWS5.TEXTCLUSTER_CLUSTERS created, with 12 rows and 58 columns.
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.14 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 2110 observations read from the data set EMWS5.TEXTFILTER_TERMS_DATA.
      WHERE KEEP='Y';
NOTE: There were 8167 observations read from the data set EMWS5.TEXTFILTER_TERM_STRINGS.
NOTE: There were 2110 observations read from the data set EMWS5.TEXTFILTER_TERMS.
NOTE: The data set WORK._TERMS_ has 2110 observations and 13 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.04 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 2110 observations read from the data set WORK._TERMS_.
NOTE: The data set WORK._TERMS_ has 1732 observations and 13 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 1732 observations read from the data set WORK._TERMS_.
NOTE: The data set WORK._TERMS_ has 1732 observations and 13 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 11913 observations read from the data set EMWS5.TEXTFILTER_TMOUT.
NOTE: The data set WORK._TMOUT_ has 11913 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 11913 observations read from the data set WORK._TMOUT_.
NOTE: There were 1732 observations read from the data set WORK._TERMS_.
NOTE: The data set WORK._TMOUT_ has 11913 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 2694 observations read from the data set EMWS5.TEXTCLUSTER_DOCS.
NOTE: The data set WORK._DOCS_ has 2694 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
NOTE: SQL view WORK._CMB has been defined.
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 11913 observations read from the data set WORK._TMOUT_.
NOTE: There were 2694 observations read from the data set WORK._DOCS_.
NOTE: There were 11913 observations read from the data set WORK._CMB.
NOTE: The data set WORK._TFREQ has 4762 observations and 5 variables.
NOTE: PROCEDURE SUMMARY used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 11913 observations read from the data set WORK._TMOUT_.
NOTE: There were 2694 observations read from the data set WORK._DOCS_.
NOTE: There were 11913 observations read from the data set WORK._CMB.
NOTE: The data set WORK._SUM has 12 observations and 4 variables.
NOTE: PROCEDURE SUMMARY used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 12 observations read from the data set WORK._SUM.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
NOTE: Table WORK._SUM has been dropped.
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 4762 observations read from the data set WORK._TFREQ.
NOTE: The data set WORK._TFREQ has 4762 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 4762 observations read from the data set WORK._TFREQ.
NOTE: The data set WORK._UNQT has 264 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 264 observations read from the data set WORK._UNQT.
NOTE: 69 observations with duplicate key values were deleted.
NOTE: The data set WORK._UNQT has 195 observations and 1 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
NOTE: Table WORK._CLCDF created, with 996 rows and 3 columns.
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
NOTE: Table WORK._UNQT has been dropped.
NOTE: Table WORK._TFREQ has been dropped.
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 996 observations read from the data set WORK._CLCDF.
NOTE: The data set WORK._CLCDF has 195 observations and 13 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 195 observations read from the data set WORK._CLCDF.
NOTE: The data set WORK._CLCDF has 195 observations and 26 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 195 observations read from the data set WORK._CLCDF.
NOTE: The data set WORK._CLCDFTR has 996 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
NOTE: Table WORK._CLCDF has been dropped.
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 996 observations read from the data set WORK._CLCDFTR.
NOTE: The data set WORK._CLCDFTR has 996 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 996 observations read from the data set WORK._CLCDFTR.
NOTE: The data set WORK._DESC_ has 11 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
NOTE: Table WORK._CLCDFTR has been dropped.
NOTE: View WORK._CMB has been dropped.
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 12 observations read from the data set EMWS5.TEXTCLUSTER_CLUSTERS.
NOTE: The data set EMWS5.TEXTCLUSTER_CLUSTERS has 12 observations and 58 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.07 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 11 observations read from the data set WORK._DESC_.
NOTE: The data set WORK._DESC_ has 11 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 12 observations read from the data set EMWS5.TEXTCLUSTER_CLUSTERS.
NOTE: There were 11 observations read from the data set WORK._DESC_.
NOTE: The data set WORK._DESC_ has 12 observations and 59 variables.
NOTE: DATA statement used (Total process time):
      real time           0.29 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 12 observations read from the data set WORK._DESC_.
NOTE: The data set EMWS5.TEXTCLUSTER_CLUSTERS has 12 observations and 59 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.06 seconds
      cpu time            0.01 seconds
 
 
NOTE: Fileref TEMP has been deassigned.
 
NOTE: Variable TARGET is uninitialized.
NOTE: The data set EMWS5.TEXTCLUSTER_EMINFO has 4 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.35 seconds
      cpu time            0.01 seconds
 
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.07 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS5.TEXTCLUSTER_TMCONFIG.
NOTE: The data set EMWS5.TEXTCLUSTER_TMCONFIG has 1 observations and 32 variables.
NOTE: DATA statement used (Total process time):
      real time           0.29 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: The data set WORK.EM_METACHANGE has 1 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 1 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 2 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 2 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 3 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 3 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 4 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 4 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 5 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 5 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 6 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 6 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 7 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 7 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 8 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 8 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 9 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 9 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 10 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 10 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 11 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 11 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 12 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 12 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 13 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 13 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 14 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 14 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 15 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 15 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 16 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 16 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 17 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 17 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 18 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 18 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 19 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 19 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 20 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 20 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 21 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 21 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 22 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 22 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 23 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 23 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 24 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 24 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 25 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 25 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 26 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 26 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 27 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 27 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 28 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 28 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 29 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 29 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 30 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 30 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 31 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 31 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 32 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 32 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 33 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 33 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 34 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 34 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 35 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 35 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 36 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 36 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 37 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 37 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 38 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 38 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 39 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 39 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 40 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 40 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 41 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 41 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 42 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 42 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 43 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 43 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 44 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 44 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 45 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 45 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 46 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 46 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 47 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 47 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 48 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 48 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 49 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 49 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 50 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 50 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 51 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 51 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 52 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 52 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 53 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 53 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 54 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 54 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 55 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 55 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 56 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 56 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 57 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 57 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 58 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 58 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 59 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 59 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 60 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 60 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 61 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 61 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 62 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 62 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 63 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 63 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 64 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 64 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 65 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 65 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 66 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 66 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 67 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
WARNING: No logical assign for filename TEMP.
16994  *------------------------------------------------------------*;
16995  * End TRAIN: TextCluster;
16996  *------------------------------------------------------------*;
 
16997  *------------------------------------------------------------*;
16998  * Close any missing semi colons;
16999  *------------------------------------------------------------*;
17000  ;
17001  ;
17002  ;
17003  ;
17004  quit;
17005  *------------------------------------------------------------*;
17006  * Close any unbalanced quotes;
17007  *------------------------------------------------------------*;
17008  /*; *"; *'; */
17009  ;
17010  run;
17011  quit;
17012  /* Reset EM Options */
17013  options formchar="|----|+|---+=|-/\<>*";
17014  options nocenter ls=256 ps=10000;
17015  goptions reset=all device=GIF NODISPLAY;
 
17016  proc sort data=WORK.EM_METACHANGE;
17017  by key uname;
17018  run;
 
NOTE: There were 67 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 67 observations and 9 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
17019  filename x "P:\DMBI_Project\Twitter_Insta_Content_Engineering\Workspaces\EMWS5\TextCluster\CDELTA_TRAIN.sas";
17020  data _null_;
17021  file x;
17022  put 'if upcase(NAME) = "TEXTCLUSTER_CLUSTER_" then do;';
17023  put 'ROLE = "SEGMENT";';
17024  put 'LEVEL = "NOMINAL";';
17025  put 'end;';
17026  put 'else ';
17027  put 'if upcase(NAME) = "TEXTCLUSTER_PROB1" then do;';
17028  put 'ROLE = "REJECTED";';
17029  put 'end;';
17030  put 'else ';
17031  put 'if upcase(NAME) = "TEXTCLUSTER_PROB10" then do;';
17032  put 'ROLE = "REJECTED";';
17033  put 'end;';
17034  put 'else ';
17035  put 'if upcase(NAME) = "TEXTCLUSTER_PROB11" then do;';
17036  put 'ROLE = "REJECTED";';
17037  put 'end;';
17038  put 'else ';
17039  put 'if upcase(NAME) = "TEXTCLUSTER_PROB12" then do;';
17040  put 'ROLE = "REJECTED";';
17041  put 'end;';
17042  put 'else ';
17043  put 'if upcase(NAME) = "TEXTCLUSTER_PROB2" then do;';
17044  put 'ROLE = "REJECTED";';
17045  put 'end;';
17046  put 'else ';
17047  put 'if upcase(NAME) = "TEXTCLUSTER_PROB3" then do;';
17048  put 'ROLE = "REJECTED";';
17049  put 'end;';
17050  put 'else ';
17051  put 'if upcase(NAME) = "TEXTCLUSTER_PROB4" then do;';
17052  put 'ROLE = "REJECTED";';
17053  put 'end;';
17054  put 'else ';
17055  put 'if upcase(NAME) = "TEXTCLUSTER_PROB5" then do;';
17056  put 'ROLE = "REJECTED";';
17057  put 'end;';
17058  put 'else ';
17059  put 'if upcase(NAME) = "TEXTCLUSTER_PROB6" then do;';
17060  put 'ROLE = "REJECTED";';
17061  put 'end;';
17062  put 'else ';
17063  put 'if upcase(NAME) = "TEXTCLUSTER_PROB7" then do;';
17064  put 'ROLE = "REJECTED";';
17065  put 'end;';
17066  put 'else ';
17067  put 'if upcase(NAME) = "TEXTCLUSTER_PROB8" then do;';
17068  put 'ROLE = "REJECTED";';
17069  put 'end;';
17070  put 'else ';
17071  put 'if upcase(NAME) = "TEXTCLUSTER_PROB9" then do;';
17072  put 'ROLE = "REJECTED";';
17073  put 'end;';
17074  put 'else ';
17075  put 'if upcase(NAME) = "TEXTCLUSTER_SVD1" then do;';
17076  put 'ROLE = "INPUT";';
17077  put 'LEVEL = "INTERVAL";';
17078  put 'end;';
17079  put 'else ';
17080  put 'if upcase(NAME) = "TEXTCLUSTER_SVD10" then do;';
17081  put 'ROLE = "INPUT";';
17082  put 'LEVEL = "INTERVAL";';
17083  put 'end;';
17084  put 'else ';
17085  put 'if upcase(NAME) = "TEXTCLUSTER_SVD11" then do;';
17086  put 'ROLE = "INPUT";';
17087  put 'LEVEL = "INTERVAL";';
17088  put 'end;';
17089  put 'else ';
17090  put 'if upcase(NAME) = "TEXTCLUSTER_SVD12" then do;';
17091  put 'ROLE = "INPUT";';
17092  put 'LEVEL = "INTERVAL";';
17093  put 'end;';
17094  put 'else ';
17095  put 'if upcase(NAME) = "TEXTCLUSTER_SVD13" then do;';
17096  put 'ROLE = "INPUT";';
17097  put 'LEVEL = "INTERVAL";';
17098  put 'end;';
17099  put 'else ';
17100  put 'if upcase(NAME) = "TEXTCLUSTER_SVD14" then do;';
17101  put 'ROLE = "INPUT";';
17102  put 'LEVEL = "INTERVAL";';
17103  put 'end;';
17104  put 'else ';
17105  put 'if upcase(NAME) = "TEXTCLUSTER_SVD15" then do;';
17106  put 'ROLE = "INPUT";';
17107  put 'LEVEL = "INTERVAL";';
17108  put 'end;';
17109  put 'else ';
17110  put 'if upcase(NAME) = "TEXTCLUSTER_SVD16" then do;';
17111  put 'ROLE = "INPUT";';
17112  put 'LEVEL = "INTERVAL";';
17113  put 'end;';
17114  put 'else ';
17115  put 'if upcase(NAME) = "TEXTCLUSTER_SVD17" then do;';
17116  put 'ROLE = "INPUT";';
17117  put 'LEVEL = "INTERVAL";';
17118  put 'end;';
17119  put 'else ';
17120  put 'if upcase(NAME) = "TEXTCLUSTER_SVD18" then do;';
17121  put 'ROLE = "INPUT";';
17122  put 'LEVEL = "INTERVAL";';
17123  put 'end;';
17124  put 'else ';
17125  put 'if upcase(NAME) = "TEXTCLUSTER_SVD19" then do;';
17126  put 'ROLE = "INPUT";';
17127  put 'LEVEL = "INTERVAL";';
17128  put 'end;';
17129  put 'else ';
17130  put 'if upcase(NAME) = "TEXTCLUSTER_SVD2" then do;';
17131  put 'ROLE = "INPUT";';
17132  put 'LEVEL = "INTERVAL";';
17133  put 'end;';
17134  put 'else ';
17135  put 'if upcase(NAME) = "TEXTCLUSTER_SVD20" then do;';
17136  put 'ROLE = "INPUT";';
17137  put 'LEVEL = "INTERVAL";';
17138  put 'end;';
17139  put 'else ';
17140  put 'if upcase(NAME) = "TEXTCLUSTER_SVD21" then do;';
17141  put 'ROLE = "INPUT";';
17142  put 'LEVEL = "INTERVAL";';
17143  put 'end;';
17144  put 'else ';
17145  put 'if upcase(NAME) = "TEXTCLUSTER_SVD22" then do;';
17146  put 'ROLE = "INPUT";';
17147  put 'LEVEL = "INTERVAL";';
17148  put 'end;';
17149  put 'else ';
17150  put 'if upcase(NAME) = "TEXTCLUSTER_SVD23" then do;';
17151  put 'ROLE = "INPUT";';
17152  put 'LEVEL = "INTERVAL";';
17153  put 'end;';
17154  put 'else ';
17155  put 'if upcase(NAME) = "TEXTCLUSTER_SVD24" then do;';
17156  put 'ROLE = "INPUT";';
17157  put 'LEVEL = "INTERVAL";';
17158  put 'end;';
17159  put 'else ';
17160  put 'if upcase(NAME) = "TEXTCLUSTER_SVD25" then do;';
17161  put 'ROLE = "INPUT";';
17162  put 'LEVEL = "INTERVAL";';
17163  put 'end;';
17164  put 'else ';
17165  put 'if upcase(NAME) = "TEXTCLUSTER_SVD26" then do;';
17166  put 'ROLE = "INPUT";';
17167  put 'LEVEL = "INTERVAL";';
17168  put 'end;';
17169  put 'else ';
17170  put 'if upcase(NAME) = "TEXTCLUSTER_SVD27" then do;';
17171  put 'ROLE = "INPUT";';
17172  put 'LEVEL = "INTERVAL";';
17173  put 'end;';
17174  put 'else ';
17175  put 'if upcase(NAME) = "TEXTCLUSTER_SVD28" then do;';
17176  put 'ROLE = "INPUT";';
17177  put 'LEVEL = "INTERVAL";';
17178  put 'end;';
17179  put 'else ';
17180  put 'if upcase(NAME) = "TEXTCLUSTER_SVD29" then do;';
17181  put 'ROLE = "INPUT";';
17182  put 'LEVEL = "INTERVAL";';
17183  put 'end;';
17184  put 'else ';
17185  put 'if upcase(NAME) = "TEXTCLUSTER_SVD3" then do;';
17186  put 'ROLE = "INPUT";';
17187  put 'LEVEL = "INTERVAL";';
17188  put 'end;';
17189  put 'else ';
17190  put 'if upcase(NAME) = "TEXTCLUSTER_SVD30" then do;';
17191  put 'ROLE = "INPUT";';
17192  put 'LEVEL = "INTERVAL";';
17193  put 'end;';
17194  put 'else ';
17195  put 'if upcase(NAME) = "TEXTCLUSTER_SVD31" then do;';
17196  put 'ROLE = "INPUT";';
17197  put 'LEVEL = "INTERVAL";';
17198  put 'end;';
17199  put 'else ';
17200  put 'if upcase(NAME) = "TEXTCLUSTER_SVD32" then do;';
17201  put 'ROLE = "INPUT";';
17202  put 'LEVEL = "INTERVAL";';
17203  put 'end;';
17204  put 'else ';
17205  put 'if upcase(NAME) = "TEXTCLUSTER_SVD33" then do;';
17206  put 'ROLE = "INPUT";';
17207  put 'LEVEL = "INTERVAL";';
17208  put 'end;';
17209  put 'else ';
17210  put 'if upcase(NAME) = "TEXTCLUSTER_SVD34" then do;';
17211  put 'ROLE = "INPUT";';
17212  put 'LEVEL = "INTERVAL";';
17213  put 'end;';
17214  put 'else ';
17215  put 'if upcase(NAME) = "TEXTCLUSTER_SVD35" then do;';
17216  put 'ROLE = "INPUT";';
17217  put 'LEVEL = "INTERVAL";';
17218  put 'end;';
17219  put 'else ';
17220  put 'if upcase(NAME) = "TEXTCLUSTER_SVD36" then do;';
17221  put 'ROLE = "INPUT";';
17222  put 'LEVEL = "INTERVAL";';
17223  put 'end;';
17224  put 'else ';
17225  put 'if upcase(NAME) = "TEXTCLUSTER_SVD37" then do;';
17226  put 'ROLE = "INPUT";';
17227  put 'LEVEL = "INTERVAL";';
17228  put 'end;';
17229  put 'else ';
17230  put 'if upcase(NAME) = "TEXTCLUSTER_SVD38" then do;';
17231  put 'ROLE = "INPUT";';
17232  put 'LEVEL = "INTERVAL";';
17233  put 'end;';
17234  put 'else ';
17235  put 'if upcase(NAME) = "TEXTCLUSTER_SVD39" then do;';
17236  put 'ROLE = "INPUT";';
17237  put 'LEVEL = "INTERVAL";';
17238  put 'end;';
17239  put 'else ';
17240  put 'if upcase(NAME) = "TEXTCLUSTER_SVD4" then do;';
17241  put 'ROLE = "INPUT";';
17242  put 'LEVEL = "INTERVAL";';
17243  put 'end;';
17244  put 'else ';
17245  put 'if upcase(NAME) = "TEXTCLUSTER_SVD40" then do;';
17246  put 'ROLE = "INPUT";';
17247  put 'LEVEL = "INTERVAL";';
17248  put 'end;';
17249  put 'else ';
17250  put 'if upcase(NAME) = "TEXTCLUSTER_SVD41" then do;';
17251  put 'ROLE = "INPUT";';
17252  put 'LEVEL = "INTERVAL";';
17253  put 'end;';
17254  put 'else ';
17255  put 'if upcase(NAME) = "TEXTCLUSTER_SVD42" then do;';
17256  put 'ROLE = "INPUT";';
17257  put 'LEVEL = "INTERVAL";';
17258  put 'end;';
17259  put 'else ';
17260  put 'if upcase(NAME) = "TEXTCLUSTER_SVD43" then do;';
17261  put 'ROLE = "INPUT";';
17262  put 'LEVEL = "INTERVAL";';
17263  put 'end;';
17264  put 'else ';
17265  put 'if upcase(NAME) = "TEXTCLUSTER_SVD44" then do;';
17266  put 'ROLE = "INPUT";';
17267  put 'LEVEL = "INTERVAL";';
17268  put 'end;';
17269  put 'else ';
17270  put 'if upcase(NAME) = "TEXTCLUSTER_SVD45" then do;';
17271  put 'ROLE = "INPUT";';
17272  put 'LEVEL = "INTERVAL";';
17273  put 'end;';
17274  put 'else ';
17275  put 'if upcase(NAME) = "TEXTCLUSTER_SVD46" then do;';
17276  put 'ROLE = "INPUT";';
17277  put 'LEVEL = "INTERVAL";';
17278  put 'end;';
17279  put 'else ';
17280  put 'if upcase(NAME) = "TEXTCLUSTER_SVD47" then do;';
17281  put 'ROLE = "INPUT";';
17282  put 'LEVEL = "INTERVAL";';
17283  put 'end;';
17284  put 'else ';
17285  put 'if upcase(NAME) = "TEXTCLUSTER_SVD48" then do;';
17286  put 'ROLE = "INPUT";';
17287  put 'LEVEL = "INTERVAL";';
17288  put 'end;';
17289  put 'else ';
17290  put 'if upcase(NAME) = "TEXTCLUSTER_SVD49" then do;';
17291  put 'ROLE = "INPUT";';
17292  put 'LEVEL = "INTERVAL";';
17293  put 'end;';
17294  put 'else ';
17295  put 'if upcase(NAME) = "TEXTCLUSTER_SVD5" then do;';
17296  put 'ROLE = "INPUT";';
17297  put 'LEVEL = "INTERVAL";';
17298  put 'end;';
17299  put 'else ';
17300  put 'if upcase(NAME) = "TEXTCLUSTER_SVD50" then do;';
17301  put 'ROLE = "INPUT";';
17302  put 'LEVEL = "INTERVAL";';
17303  put 'end;';
17304  put 'else ';
17305  put 'if upcase(NAME) = "TEXTCLUSTER_SVD51" then do;';
17306  put 'ROLE = "INPUT";';
17307  put 'LEVEL = "INTERVAL";';
17308  put 'end;';
17309  put 'else ';
17310  put 'if upcase(NAME) = "TEXTCLUSTER_SVD52" then do;';
17311  put 'ROLE = "INPUT";';
17312  put 'LEVEL = "INTERVAL";';
17313  put 'end;';
17314  put 'else ';
17315  put 'if upcase(NAME) = "TEXTCLUSTER_SVD53" then do;';
17316  put 'ROLE = "INPUT";';
17317  put 'LEVEL = "INTERVAL";';
17318  put 'end;';
17319  put 'else ';
17320  put 'if upcase(NAME) = "TEXTCLUSTER_SVD54" then do;';
17321  put 'ROLE = "INPUT";';
17322  put 'LEVEL = "INTERVAL";';
17323  put 'end;';
17324  put 'else ';
17325  put 'if upcase(NAME) = "TEXTCLUSTER_SVD6" then do;';
17326  put 'ROLE = "INPUT";';
17327  put 'LEVEL = "INTERVAL";';
17328  put 'end;';
17329  put 'else ';
17330  put 'if upcase(NAME) = "TEXTCLUSTER_SVD7" then do;';
17331  put 'ROLE = "INPUT";';
17332  put 'LEVEL = "INTERVAL";';
17333  put 'end;';
17334  put 'else ';
17335  put 'if upcase(NAME) = "TEXTCLUSTER_SVD8" then do;';
17336  put 'ROLE = "INPUT";';
17337  put 'LEVEL = "INTERVAL";';
17338  put 'end;';
17339  put 'else ';
17340  put 'if upcase(NAME) = "TEXTCLUSTER_SVD9" then do;';
17341  put 'ROLE = "INPUT";';
17342  put 'LEVEL = "INTERVAL";';
17343  put 'end;';
17344  run;
 
NOTE: The file X is:
      Filename=P:\DMBI_Project\Twitter_Insta_Content_Engineering\Workspaces\EMWS5\TextCluster\CDELTA_TRAIN.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=06May2020:18:32:51,
      Create Time=06May2020:17:53:50
 
NOTE: 322 records were written to the file X.
      The minimum record length was 4.
      The maximum record length was 49.
NOTE: DATA statement used (Total process time):
      real time           0.05 seconds
      cpu time            0.00 seconds
 
 
17345  filename x;
NOTE: Fileref X has been deassigned.
 
*------------------------------------------------------------*
* Score Log
Date:                May 06, 2020
Time:                18:32:52
*------------------------------------------------------------*
17447  %let EMEXCEPTIONSTRING=;
17448  *------------------------------------------------------------*;
17449  * SCORE: TextCluster;
17450  *------------------------------------------------------------*;
17451  %let EM_ACTION = SCORE;
17452  %let syscc = 0;
17453  %macro main();
17454
17455     %if %upcase(&EM_ACTION) eq CREATE %then %do;
17456        filename temp catalog 'sashelp.emtxtext.cluster_create.source';
17457        %include temp;
17458        %create();
17459     %end;
17460     %if %upcase(&EM_ACTION) eq TRAIN %then %do;
17461        filename temp catalog 'sashelp.emtxtext.cluster_train.source';
17462        %include temp;
17463        %train();
17464     %end;
17465     %if %upcase(&EM_ACTION) eq REPORT %then %do;
17466        filename temp catalog 'sashelp.emtxtext.cluster_report.source';
17467        %include temp;
17468        %report();
17469     %end;
17470     %if %upcase(&EM_ACTION) eq SCORE %then %do;
17471        filename temp catalog 'sashelp.emtxtext.cluster_score.source';
17472        %include temp;
17473        %score();
17474     %end;
17475  %mend main;
17476
17477  %main();
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMTXTEXT.CLUSTER_SCORE.SOURCE.
17478 +%macro tmc_score(import_ds=,configdata=,export_ds=,term_ds=,export_out=,clusters_ds=,svdu=,svds=,
17479 +    import_out=,em_outstat=,prefixstring=,ocluster=,ndescterms=,ftmout=,fterms=,hier=);
17480 +  %if &import_ds ne %then %do;
17482 +    %let syscc=0;
17484 +    %tmc_doc_score(import=&import_ds,export=&export_ds,emoutstat=&em_outstat,
17485 +                termds=&term_ds,clusters=&clusters_ds,configds=&configdata,
17486 +                _scrout=&import_out, svd_u=&svdu, svd_s=&svds, prefix=&prefixstring,
17487 +                outclusters=&ocluster, descterms=&ndescterms, filterterms=&fterms,
17488 +                filtertmout=&ftmout, hierds=&hier);
17490 +  %end;
17492 +%mend tmc_score;
17493 +%macro score();
17495 +    %global last_parse_node last_filter_node last_prescore_node server_err
17496 +      parsevar EM_SASMSG ;
17497 +    %let syscc=0;
17498 +    %if ^%symexist(tm_debug) %then %let tm_debug=0;
17499 +    /*use saved version of em_info in case macro is not populated*/
17500 +    %em_getname(key=last_tm_nodes, type=data);
17502 +    filename temp catalog 'sashelp.emtxtext.tm_get_last_filter.source';
17503 +    %include temp;
17504 +    %tm_get_last_filter(eminfo=&em_user_last_tm_nodes,em_lib=&em_lib,
17505 +                        em_variableset=&em_data_variableset);
17506 +    %if &EMEXCEPTIONSTRING ne %then %goto end_cluster_score;
17507 +    %let lastparsenode=&last_parse_node;
17508 +    %let lastfilternode=&last_filter_node;
17509 +    %let lastprescore=&last_prescore_node;
17510 +    %let filt_node=;
17512 +   %em_getname(key=terms, type=data);
17513 +   %em_getname(key=docs, type=data);
17514 +   %em_getname(key=clusters, type=data);
17515 +   %em_getname(key=svd_u, type=data);
17516 +   %em_getname(key=svd_s, type=data);
17517 +   %em_getname(key=emoutstat, type=data);
17518 +   %em_getname(key=tmconfig, type=data);
17520 +   %em_getname(key=tmout, type=data);
17521 +   %em_getname(key=validout, type=data);
17522 +   %em_getname(key=testout, type=data);
17523 +   %em_getname(key=scoreout, type=data);
17524 +   %em_getname(key=PRESCORECODE, type=file, extension=sas);
17525 +   %let systmutil=;
17527 +    filename temp catalog 'sashelp.emtxtext.tm_data2code.source';
17528 +    %include temp;
17529 +    filename temp catalog 'sashelp.emtext.tmemclus.source';
17530 +    %include temp;
17531 +    filename temp catalog 'sashelp.emtext.tmpred.source';
17532 +    %include temp;
17533 +    filename temp catalog 'sashelp.emtext.tmsort.source';
17534 +    %include temp;
17535 +    filename temp catalog 'sashelp.emtxtext.tmc_doc_score.source';
17536 +    %include temp;
17537 +    filename temp catalog 'sashelp.emtext.tmsvd.source';
17538 +    %include temp;
17539 +    filename temp catalog 'sashelp.emtext.tmfast.source';
17540 +    %include temp;
17542 +   %let EM_PUBLISHCODE = PUBLISH;
17543 +   %let EM_SCORECODEFORMAT = DATASTEP;
17544 +   %let overwrite_pre = ;
17546 +   %let lastprescore=%trim(%left(&lastprescore));
17548 +   /* Create indexed term table for writing out score code */
17549 +   proc sql noprint;
17550 +       select count(*) into :svdkeep
17551 +       from &em_user_svd_s
17552 +       where keep=1;
17553 +   create table _clusterms as
17554 +      select key, term, role, keep, freq, numdocs, parent, _ispar, weight from &em_user_terms;
17556 +   data _filter_tmout;
17557 +      set &EM_LIB..&lastfilternode._tmout;
17558 +   run;
17560 +   %tmc_score(import_ds=&em_import_data,export_ds=&em_export_train,
17561 +              import_out=_filter_tmout,
17562 +              export_out=&EM_export_transaction,
17563 +              term_ds=_clusterms,
17564 +              clusters_ds=&em_user_clusters,
17565 +              svdu=&em_user_svd_u,
17566 +              svds=&em_user_svd_s,
17567 +              em_outstat=&em_user_emoutstat,
17568 +              configdata=&em_user_tmconfig,
17569 +              prefixstring=&EM_NODEID,
17570 +              ocluster=&em_user_clusters,
17571 +              ndescterms=&em_property_ndescterms,
17572 +              fterms=&EM_LIB..&lastfilternode._terms,
17573 +              ftmout=&EM_LIB..&lastfilternode._tmout,
17574 +              hier=&em_user_hierds);
17576 +   %tmc_score(import_ds=&em_import_validate,export_ds=&em_export_validate,
17577 +              export_out=&EM_USER_validout,
17578 +              import_out=&EM_LIB..&lastfilternode._validout,
17579 +              term_ds=_clusterms,
17580 +              clusters_ds=&em_user_clusters,
17581 +              svdu=&em_user_svd_u,
17582 +              svds=&em_user_svd_s,
17583 +              em_outstat=&em_user_emoutstat,
17584 +              configdata=&em_user_tmconfig,
17585 +              prefixstring=&EM_NODEID);
17586 +   %tmc_score(import_ds=&em_import_test,export_ds=&em_export_test,
17587 +              export_out=&EM_USER_testout,
17588 +              import_out=&EM_LIB..&lastfilternode._testout,
17589 +              term_ds=_clusterms,
17590 +              clusters_ds=&em_user_clusters,
17591 +              svdu=&em_user_svd_u,
17592 +              svds=&em_user_svd_s,
17593 +              em_outstat=&em_user_emoutstat,
17594 +              configdata=&em_user_tmconfig,
17595 +              prefixstring=&EM_NODEID);
17597 +   %if &syscc>4 %then %do;
17598 +       %let syscc=0;
17599 +       %goto end_cluster_score;
17600 +   %end;
17602 +   * path of the diagram ;
17603 +   %let emwspath = ;
17604 +   data _null_;
17605 +      call symput("emwspath", strip(pathname("&EM_LIB")));
17606 +   run;
17608 +   filename pre "&EM_USER_PRESCORECODE";
17609 +   data _null_;
17610 +       file pre;
17611 +       put 'filename temp catalog "sashelp.emtext.tmemclus.source";';
17612 +       put '%include temp;';
17613 +       put 'filename temp catalog "sashelp.emtext.tmpred.source";';
17614 +       put '%include temp;';
17615 +       put 'filename temp catalog "sashelp.emtxtext.tmc_doc_score.source";';
17616 +       put '%include temp;';
17617 +       put 'filename temp catalog "sashelp.emtext.tmsort.source";';
17618 +       put '%include temp;';
17619 +       put 'filename temp catalog "sashelp.emtext.tmsvd.source";';
17620 +       put '%include temp;';
17621 +       put 'filename temp catalog "sashelp.emtext.tmfast.source";';
17622 +       put '%include temp;';
17623 +       put 'filename temp;';
17624 +   run;
17627 +   /* We need to use last prescore */
17628 +   %if &lastprescore ne %then %do;
17629 +      %let tmprescoreFile = %bquote(&emwspath)&em_dsep&lastprescore&em_dsep.PRESCORECODE.sas;
17630 +      filename tmpre "&tmprescoreFile";
17631 +      %em_copyfile(infref=tmpre, outfref=pre, append=Y);
17632 +      filename tmpre;
17633 +   %end;
17635 +   data _codeclusters;
17636 +        set &em_user_clusters (drop=clus_desc);
17637 +   run;
17639 +     %if not %symexist(em_term_loc) %then %do;
17640 +       %let em_term_loc = %bquote(%sysfunc(pathname(&EM_LIB)));
17641 +         libname termloc "&em_term_loc";
17643 +      %let scored_terms = termloc.&lastfilternode._filtterms;
17644 +       %let scored_clust = termloc.&EM_NODEID._clusters;
17645 +       %let scored_config = termloc.&EM_NODEID._tmconfig;
17646 +       %let scored_svd_u = termloc.&EM_NODEID._svd_u;
17647 +       %let scored_svd_s= termloc.&EM_NODEID._svd_s;
17649 +       %if &em_property_algorithm=1.0 %then  %do;
17650 +          %let scored_emoutstat= termloc.&EM_NODEID._emoutstat;
17651 +       %end;
17653 +   %end;
17654 +   %else %do; /* Write out data sets to external directory */
17655 +       libname termloc "&em_term_loc";
17656 +        %if %sysfunc(libref(termloc)) ne 0 %then %do;
17657 +           %let  EMEXCEPTIONSTRING = EMTOOL.EMTERMLOC,&em_term_loc;
17658 +           %goto end_cluster_score;
17659 +       %end;
17661 +      /* copy datasets to use for prescore code*/
17662 +       data termloc.&EM_LIB._&EM_NODEID._CLUSTERS;
17663 +         set _codeclusters;
17664 +       run;
17666 +       data termloc.&EM_LIB._&EM_NODEID._svd_u;
17667 +         set &em_user_svd_u;
17668 +       run;
17670 +       data termloc.&EM_LIB._&EM_NODEID._svd_s;
17671 +         set &em_user_svd_s;
17672 +       run;
17674 +       data termloc.&EM_LIB._&EM_NODEID._tmconfig;
17675 +         set &em_user_tmconfig;
17676 +       run;
17678 +       %let scored_terms = termloc.&EM_LIB._&lastfilternode._filtterms;
17679 +       %let scored_clust = termloc.&EM_LIB._&EM_NODEID._CLUSTERS;
17680 +       %let scored_config = termloc.&EM_LIB._&EM_NODEID._tmconfig;
17681 +       %let scored_svd_u = termloc.&EM_LIB._&EM_NODEID._svd_u;
17682 +       %let scored_svd_s= termloc.&EM_LIB._&EM_NODEID._svd_s;
17684 +       %if &em_property_algorithm=1.0 %then  %do;
17685 +         data termloc.&EM_LIB._&EM_NODEID._emoutstat;
17686 +         set &em_user_emoutstat;
17687 +         run;
17688 +           %let scored_emoutstat= termloc.&EM_LIB._&EM_NODEID._emoutstat;
17689 +       %end;
17690 +   %end;
17694 +   %let _score_append=;
17696 +   * Now save code, if necessary, for search phrase;
17697 +   filename _tmscore "&EM_FILE_EMPUBLISHSCORECODE";
17698 +   %if &em_property_algorithm=1.0 %then %do;
17699 +   data _NULL_;
17700 +     file _tmscore;
17701 +     length string $200;
17702 +     string ='%tmc_doc_score(import='||'&em_score_output'||",export=work._newexport,";
17703 +     put string;
17704 +     string="      termds=&scored_terms, configds=&scored_config,";
17705 +     put string;
17706 +     string= "      clusters=&scored_clust, emoutstat=&scored_emoutstat, ";
17707 +     put string;
17708 +     string = "      _scrout=work.&lastfilternode._out, svd_u=&scored_svd_u, svd_s=&scored_svd_s, prefix=&em_nodeid);";
17709 +     put string;
17710 +     string='data &em_score_output; set work._newexport;';
17711 +     put string;
17712 +    run;
17713 +    %end;
17714 +    %else %do;
17715 +    data _NULL_;
17716 +     file _tmscore;
17717 +     string= '%'||"tmc_doc_score(import="||'&em_score_output'||",export=work._newexport,";
17718 +     put string;
17719 +     put "      termds=&scored_terms,configds=&scored_config,";
17720 +     put "      clusters=&scored_clust, ";
17721 +     put "      _scrout=work.&lastfilternode._out, svd_u=&scored_svd_u, svd_s=&scored_svd_s, prefix=&em_nodeid);";
17722 +     put 'data &em_score_output; set work._newexport;';
17723 +    run;
17724 +    %end;
17725 +   filename _tmscore;
17727 +%end_cluster_score:
17728 +    filename temp;
17729 +    %if &tm_debug =0 %then %do;
17730 +    proc sql noprint;
17731 +        drop table _clusterms;
17732 +        drop table _filter_tmout;
17733 +        drop table _codeclusters;
17734 +    quit;
17735 +    %end;
17737 +%mend score;
NOTE: %INCLUDE (level 1) ending.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMTXTEXT.TM_GET_LAST_FILTER.SOURCE.
17739 +/* ****************************************************************
17740 + * Copyright (C) 2009 by SAS Institute Inc., Cary, NC 27513
17741 + *
17742 + * Name:             tm_get_last_filter.sas
17743 + * Product:          SAS Text Miner
17744 + * Language:         Sas
17745 + * Script:
17746 + *
17747 + * Usage:
17748 + *
17749 + * Purpose:  macro to get the last filter node and the last parse node in the
17750 + *   diagram that corresponds to the current parse variable.  If there is no filter
17751 + *   node, the filter node is set to the last parse node.
17752 + *
17753 + *
17754 + *
17755 + * History:
17756 + * 14Aug09 Initial Coding
17757 + *
17758 + * Notes:
17759 + *    Returns an error in the following cases:
17760 + *      1. There is no preceding parse node.
17761 + *      2. There is no parse node with the current parse variable.
17762 + *
17763 + * Last Modified By:
17764 + * Last Modified On: Wed Sep 23 15:35:04 2009
17765 + *
17766 + * End
17767 + * ************************************************************** */
17768 +%macro tm_get_last_filter(eminfo=,em_lib=, em_variableset=);
17769 +   %let last_parse_node=;
17770 +   %let last_filter_node=;
17771 +   %let last_prescore_node=;
17772 +   %let server_err=;
17773 +   %let EMEXCEPTIONSTRING=;
17774 +   %let syscc=0;
17775 +
17776 +    /* verify that setinit for SAS Text Miner is currently active */
17777 +    %if %sysfunc(sysprod(PRODNUM107)) ne 1 %then %do;
17778 +       %let EMEXCEPTIONSTRING = EMTOOL.NOTMLICENSE;
17779 +        %goto end_macro;
17780 +        %end;
17781 +
17782 +
17783 +    * find last filter or text parse node if no filter node. ;
17784 +   %if %sysfunc(exist(&eminfo)) %then %do;
17785 +      proc sql noprint;
17786 +      select data into :last_parse_node from &eminfo where key="LastTextParsing";
17787 +         select data into :last_filter_node from &eminfo where key="LastTextFilter";
17788 +         select data into :last_prescore_node from &eminfo where kupcase(key)="PRESCORECODE";
17789 +      quit;
17790 +
17791 +   %end;
17792 +
17793 +   %if &last_parse_node= %then %do;
17794 +      %let EMEXCEPTIONSTRING = EMTOOL.NOPARSINGNODE;
17795 +      %goto end_macro;
17796 +      %end;
17797 +
17798 +   %else %if &last_filter_node= %then %let last_filter_node = %ktrim(&last_parse_node);
17799 +   %else %let last_filter_node = %ktrim(&last_filter_node);
17800 +   %let last_parse_node = %ktrim(&last_parse_node);
17801 +
17802 +   * Check to make sure parse variable is present and still exists;
17803 +   %let parsevar = ;
17804 +   proc sql noprint;
17805 +    select parsevar into :parsevar
17806 +    from &em_lib..&last_filter_node._tmconfig;
17807 +    quit;
17808 +
17809 +    *check for dropped parsevar on input dataset;
17810 +       %let parsevarOK= ;
17811 +       %let parsevarN=%kupcase(%ktrim(&parsevar));
17812 +       data _null_;
17813 +         set &em_variableset(where=(kupcase(NAME)="&parsevarN" and USE in('Y' 'D')));
17814 +         if (ROLE='TEXT' or ROLE='TEXTLOC') then call symput('parsevarOK', strip(ROLE));
17815 +         run;
17816 +       %if(&parsevarOK eq ) %then %do;
17817 +          %let EMEXCEPTIONSTRING = EMTOOL.NOPARSINGVAR;
17818 +          %goto end_macro;
17819 +          %end;
17820 +%end_macro:
17821 +
17822 +%mend tm_get_last_filter;
NOTE: %INCLUDE (level 1) ending.
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS5.TEXTCLUSTER_VARIABLESET.
      WHERE (KUPCASE(NAME)='MESSAGE') and USE in ('D', 'Y');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMTXTEXT.TM_DATA2CODE.SOURCE.
17823 +/* ****************************************************************
17824 + * Copyright (C) 2009 by SAS Institute Inc., Cary, NC 27513
17825 + *
17826 + * Name:             tm_data2code.sas
17827 + * Product:          SAS Text Miner
17828 + * Language:         Sas
17829 + * Script:
17830 + *
17831 + * Usage:  %tm_data2code(data=, outdata=WORK.DATA);
17832 + *
17833 + * Purpose:          To do a data2code (like %em_data2code()) but allow the input data
17834 + *  to be view or data.
17835 + *
17836 + *    PARAMETERS:
17837 + *        DATA        = data set
17838 + *        OUTDATA     = out data set
17839 + *        OUTFILE     = file where to saved the code
17840 + *        APPEND      = append (Y/N)
17841 + * History:
17842 + * 11Jun09 Initial Coding
17843 + *
17844 + * Notes:
17845 + *
17846 + * Last Modified By:
17847 + * Last Modified On: Thu Jul 23 11:00:06 2009
17848 + *
17849 + * End
17850 + * ************************************************************** */
17851 +%macro tm_data2code(data=, outdata=WORK.DATA, outfile=, append=N);
17852 +%if &data eq %then %do;
17853 +   %put ERROR: Data set not defined;
17854 +   %end;
17855 +%else %do;
17856 +   %if (^%sysfunc(exist(&data)) and ^%sysfunc(exist(&data, view))) %then %do;
17857 +       %put ERROR: Data set does not exist;
17858 +       %end;
17859 +   %else %do;
17860 +      %global em_data em_outdata em_codefile em_append;
17861 +      %let em_data=&data;
17862 +      %let em_outdata=&outdata;
17863 +      %let em_codefile=&outfile;
17864 +      %let em_append=&append;
17865 +      proc display c=sashelp.emutil.data2code.scl; run;
17866 +      %end;
17867 +   %end;
17868 +%mend;
NOTE: %INCLUDE (level 1) ending.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMTEXT.TMEMCLUS.SOURCE.
17869 +
17870 + /*
17871 +
17872 +  Macro:   tmemclus.sas
17873 +  Purpose: Call proc emclus with given defaults and parameters.
17874 +  Syntax:  %tmemclus(data=, role=, clusters=, seed=,
17875 +                   outstat=, out=, vars=, cov=, iter=, secclus=,
17876 +                   seciter=, min=, method=, eps=, init=, print=,
17877 +                   p=, outliers=, decvar=, initstd=, dist=,
17878 +                   secstd=, nobs=, threads=);
17879 +  Required Parameters:  data=      The input data set.
17880 +                        role=      Train or score
17881 +                        clusters=  The number of primary clusters
17882 +
17883 +  Optional Parameters:  vars=      Variables to be used
17884 +                   cov=       Type of covariance matrix
17885 +                   iter=      Number of EM iterations
17886 +                   secclus    Number of secondary clusters
17887 +                   seciter    Number of k-means iterations
17888 +                   min=       Minimum number of obs in a cluster
17889 +                   method=    Standard or scaled
17890 +                   eps=       Stopping tolerance
17891 +                   init=      Random, Fastclus, or Emclus
17892 +                   print=     All, last, or none
17893 +                   p=
17894 +                   outliers=  Keep, cluster, or ignore
17895 +                   outstat=   Name of OUTSTAT data set
17896 +                   out=       Name of OUT data set
17897 +                   seed=      Name of SEED data set
17898 +                   decvar=    Proportion to decrease variances
17899 +                   initstd=   Initial standard deviation
17900 +                   dist=      Minimum distance between clusters
17901 +                   secstd=    Secondary cluster max std dev.
17902 +                   nobs=      Number of obs read in each iteration
17903 +  History:
17904 +  2001/01/16 - Bill Wheeler - Initial Coding.
17905 +  2001/11/29 - Bill Wheeler - Updated for version 8 or 9
17906 +*/
17907 +%MACRO tmemclus(data=, role=, clusters=, seed=,
17908 + outstat=, out=, vars=, cov=, iter=, secclus=,
17909 + seciter=, min=, method=, eps=, init=, print=,
17910 + p=, outliers=, decvar=, initstd=, dist=, secstd=, nobs=, threads=);
17911 +
17912 + %local saveout saveseed op1 op2 op3 op4;
17913 +
17914 + %LET saveout = &out;
17915 + %LET saveseed = &outstat;
17916 +
17917 + /* defaults */
17918 + %if &role= %then %let role = TRAIN;
17919 + %if &seed ne %then %let seed = seed=&seed;
17920 + %if &vars= %then %let var = ;
17921 + %else %let var = var &vars;
17922 + %if &cov ne %then %let cov = cov = &cov;
17923 + %if &iter ne %then %let iter = iter = &iter;
17924 + %if &init ne %then %let init = init = &init;
17925 + %if &eps ne  %then %let eps = eps = &eps;
17926 + %if &min ne %then %let min = min = &min;
17927 + %if &seciter ne %then %let seciter = seciter = &seciter;
17928 + %if &print ne %then %let print = print = &print;
17929 + %if &p ne %then %let p = p = &p;
17930 + %if &outliers ne %then %let outliers = outliers = &outliers;
17931 + %if &method ne %then %let method = method = &method;
17932 + %if &decvar ne %then %let decvar = decvar = &decvar;
17933 + %if &outstat ne %then %let outstat = outstat = &outstat;
17934 + %if &out ne %then %let out = out = &out;
17935 + %if (&threads >= 0)  %then %let threads = threads = &threads;
17936 + %else %let threads = ;
17937 +
17938 + %LET op1 = ;
17939 + %LET op2 = ;
17940 + %LET op3 = ;
17941 + %LET op4 = ;
17942 + %if ^(&initstd=) %then %let op1 = %str(initstd = &initstd);
17943 + %if ^(&dist=) %then %let op2 = %str(dist = &dist);
17944 + %if ^(&secstd=) %then %let op3 = %str(secstd = &secstd);
17945 + %if ^(&nobs=) %then %let op4 = %str(nobs = &nobs);
17946 +
17947 +
17948 + %IF &SYSVER < 9 %THEN %DO;
17949 +    %LET cov = ;
17950 +    %LET decvar = ;
17951 +    %LET outliers = ;
17952 +    %LET out = ;
17953 + %END;
17954 +
17955 +
17956 + %if %upcase(&role) = TRAIN %then
17957 + %do;
17958 +   proc emclus data = &data
17959 +   clusters = &clusters
17960 +   &seed
17961 +   &outstat
17962 +   &out
17963 +   &init
17964 +   &eps
17965 +   &method
17966 +   &secclus
17967 +   &min
17968 +   &print
17969 +   &outliers
17970 +   &iter
17971 +   &op1 &op2
17972 +   &op3 &op4
17973 +   &decvar
17974 +   &cov
17975 +   &threads
17976 +   ;
17977 +   &var;
17978 + %end;
17979 + %else
17980 +  %do;
17981 +    proc emclus data = &data
17982 +    role = score
17983 +    clusters = &clusters
17984 +    &seed
17985 +    &out
17986 +    &cov
17987 +    ;
17988 +    &var;
17989 +  %end;
17990 +
17991 + %IF &SYSVER < 9 and &saveout ^= %THEN %DO;
17992 +   proc emclus data = &data
17993 +   role = score
17994 +   clusters = &clusters
17995 +   seed = &saveseed
17996 +   &saveout
17997 +   ;
17998 +   &var;
17999 + %END;
18000 +
18001 +
18002 +%MEND tmemclus;
NOTE: %INCLUDE (level 1) ending.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMTEXT.TMPRED.SOURCE.
18003 +
18004 +/*
18005 +  Macro: tmpred(inds,outds,clusters,type=,ignore=,freqDS=)
18006 +
18007 +  Description: This macro will take output from
18008 +     emclus and generate predicted
18009 +      predicted clusters.
18010 +
18011 +  Parms: inds - input data set, produced by emclus.
18012 +   outds - data set with clusters created by this macro.
18013 +   clusters - number of clusters that should be on this data set
18014 +   type - valid values: 'max' or 'prob'.  Max will just take the
18015 +      cluster with the highest probability as the predicted cluster.
18016 +      In the case of a tie the first cluster with that value will
18017 +       selected.
18018 +      Prob will attempt to select multiple clusters based on
18019 +      how many clusters were requested.  That is if 3 clusters
18020 +      were requested, any cluster with prob>1/3 will be selected
18021 +      as the predicted cluster. THIS OPTION IS UNTESTED.
18022 +*/
18023 +
18024 +%macro tmpred(inds,outds,clusters,type=, ignore=0, freqDS=, compress=1);
18025 +
18026 +  %local _str newfreqDS _flag;
18027 +
18028 +  * set the optional arguments;
18029 +  %if &type= %then %let type=max;
18030 +  %if &ignore = 1 %then %let
18031 +    _str = if _CLUSTER_ = &clusters then _CLUSTER_ = .;
18032 +  %else %let _str = ;
18033 +  %if %str(&freqDS) ^= %str() %then %do;
18034 +   %let newfreqDS = &freqDS(keep=_c1-_c&clusters);
18035 +   %let _flag = 1;
18036 +  %end;
18037 +  %else %let _flag = 0;
18038 +
18039 +  %if &compress = 1 %then %let compress = compress=Y;
18040 +  %else %let compress = ;
18041 +
18042 +  data &outds(&compress drop=_c1-_c&clusters)
18043 +    %if &_flag = 1 %then %do;
18044 +    &newfreqDS
18045 +    %end;
18046 +    ;
18047 +    set &inds end=eof;
18048 +   * array for holding all probabilities;
18049 +    array _p prob1--prob&clusters;
18050 +    array _c(&clusters);
18051 +    retain _c 0;
18052 +   * get rid of working columns;
18053 +    drop _max_ _i /*prob1--prob&clusters*/ _WARN_;
18054 +    /* keep the largest probability and the cluster */
18055 +    _max_ = 0;
18056 +    do _i = 1 to &clusters;
18057 +      if _p(_i) > _max_ then do;
18058 +        _max_ = _p(_i);
18059 +        _CLUSTER_ = _i;
18060 +      end;
18061 +    end;
18062 +    if (_CLUSTER_ >= 1) and (_CLUSTER_ <= &clusters) then
18063 +      _c(_CLUSTER_) = _c(_CLUSTER_) + 1;
18064 +    else _CLUSTER_ = .;
18065 +    &_str;
18066 +    %if &_flag = 1 %then %do;
18067 +      if eof then do;
18068 +        output &freqDS;
18069 +                output &outDS;
18070 +          end;
18071 +          else output &outDS;
18072 +        %end;
18073 +
18074 +    run;
18075 +%mend tmpred;
NOTE: %INCLUDE (level 1) ending.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMTEXT.TMSORT.SOURCE.
18076 + /*
18077 +PROC SORT macro
18078 +
18079 +%tmsort(data=, out=, by=);
18080 +
18081 +data=      - name of input data set (outtree data set from PROC CLUSTER)
18082 +out=       - name of the output data set
18083 +by=        - by statement
18084 +options=   - proc options
18085 +*/
18086 +
18087 +%macro tmsort(data=, out=, by=, options=, threads=THREADS);
18088 +  %if %BQUOTE(&out) ^= %then %let out = out =  &out;
18089 +  %if &SYSVER < 9 %then %let threads = ;
18090 +
18091 +  proc sort data = %STR(&data) &threads &options
18092 +    &out;
18093 +    by &by;
18094 +  run;
18095 +
18096 +%mend tmsort;
NOTE: %INCLUDE (level 1) ending.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMTXTEXT.TMC_DOC_SCORE.SOURCE.
18097 +/*****************************************************************************
18098 +*
18099 +* tmc_doc_score
18100 +*
18101 +*  import  =  the doc data set of _document_ ids's as input
18102 +*  export = the new doc dataset with the svd dimensions and cluster results as output
18103 +*  termds = the terms table as input
18104 +*  clusters = input dataset of clusters from train
18105 +*  emoutstat = input dataset of seeds from training
18106 +*  _scrout = input OUT data set to be scored, may be trimmed based on conent of termds
18107 +*  svd_u = input singular vectors
18108 +
18109 +
18110 +*  svd_s = input singular values
18111 +*  prefxi = variable prefix string identifier.
18112 +*
18113 +**************************************************************************************/
18114 +
18115 +%macro tmc_doc_score(import=,export=,termds=,export_out=,clusters=,emoutstat=,
18116 +                 _scrout=,svd_u=,svd_s=,configds=,prefix=, outclusters=,hierds=,
18117 +                filterterms=,filtertmout=, descterms=);
18118 +
18119 +   %if ^%symexist(tm_debug) %then %let tm_debug=0;
18120 +
18121 +    proc sql noprint;
18122 +        select cellwgt into: cellwgt
18123 +            from &configds;
18124 +        select clus_alg into: algorithm
18125 +            from &configds;
18126 +        select parseVar into :textvar
18127 +            from &configds;
18128 +        select count(*) into :nclus
18129 +            from &clusters;
18130 +        select count(*) into :svdkeep
18131 +            from &svd_s
18132 +            where keep=1;
18133 +    quit;
18134 +
18135 +    %let svdkeep=%left(&svdkeep);
18136 +    %let nclus=%left(&nclus);
18137 +    %let algorithm=%left(&algorithm);
18138 +    %Let cellwgt=%left(&cellwgt);
18139 +    data _import_ds;
18140 +        set &import;
18141 +    run;
18142 +
18143 +
18144 +    %tmsort(data=&termds(where=(keep='Y')), out=_terms(keep= KEY PARENT),
18145 +            by=KEY);
18146 +    %tmsort(data=&_scrout, out=&_scrout, by=_termnum_);
18147 +
18148 +    data _svdm1;
18149 +        merge _terms (where=(PARENT ne _termnum_) in=_b_ keep=KEY PARENT rename=(KEY=_TERMNUM_))
18150 +              &_scrout (in = _A_ rename=(_COUNT_=COUNT));
18151 +        by _termnum_;
18152 +        if _B_;
18153 +        if (_A_ and _B_ and (PARENT ne .))
18154 +          then _TERMNUM_ = PARENT;
18155 +
18156 +        keep _TERMNUM_ _DOCUMENT_ COUNT;
18157 +        if (_DOCUMENT_=.) or (COUNT=.) then delete;
18158 +    run;
18159 +
18160 +    proc sql ;
18161 +       create table _scrout as select distinct _TERMNUM_, _DOCUMENT_,
18162 +        sum(COUNT) as _COUNT_ from _svdm1
18163 +        group by _TERMNUM_, _DOCUMENT_;
18164 +
18165 +       drop table _svdm1;
18166 +       drop table _terms;
18167 +    quit;
18168 +
18169 +    %tmsort(data=&termds(where=(KEEP='Y' and PARENT=.)),
18170 +         out=_weights (rename=(KEY=INDEX WEIGHT=GWGT) keep=KEY WEIGHT),
18171 +         by=KEY, options=, threads=);
18172 +
18173 +
18174 +    %tmsort(data=_scrout, out=_scrout, by=_DOCUMENT_, options=, threads=);
18175 +      %let svdkeep=%left(&svdkeep);
18176 +      data &svd_u;
18177 +         set &svd_u(keep= index col1-col&svdkeep);
18178 +      run;
18179 +
18180 +      proc sql;
18181 +         create table  _inweights as
18182 +         select a.*
18183 +         from _weights a right join &svd_u b
18184 +         on a.index=b.index
18185 +         ;
18186 +       quit;
18187 +    %if %lowcase(&cellwgt) = bin %then %let cellwgt=BINARY;
18188 +    proc spsvd data=_scrout IN_U=&svd_u
18189 +        local = &cellwgt global = none in_global = _inweights ;
18190 +        row _TERMNUM_;
18191 +        col _DOCUMENT_;
18192 +        entry _COUNT_;
18193 +        output colpro=_COLPRO bigpro normcol prefix="&prefix._SVD";
18194 +    run;
18195 +    proc sort data=_import_ds;
18196 +    by _DOCUMENT_; run;
18197 +
18198 +    proc sort data=_colpro;
18199 +    by INDEX;
18200 +    run;
18201 +
18202 +    data &export;
18203 +        merge _import_ds (in=_C_ ) _colpro (rename=(INDEX=_DOCUMENT_));
18204 +        by _DOCUMENT_;
18205 +        if _C_;
18206 +    run;
18207 +
18208 +    data &export;
18209 +       set  &export;
18210 +       array svd_array &prefix._SVD1 - &prefix._SVD&svdkeep.;
18211 +       do i = 1 to dim(svd_array);
18212 +          if svd_array(i)=. then svd_array(i)=0;
18213 +       end;
18214 +       drop i;
18215 +    run;
18216 +
18217 +
18218 +    %tmsort(data=&export, out=, by=_document_, options=, threads=);
18219 +
18220 +    %if %left(&algorithm)=1.0 %then %do;
18221 +
18222 +        %tmemclus(data=&export,
18223 +            role=SCORE, clusters=&nclus,
18224 +            seed=&emoutstat,
18225 +            outstat=, out=&export,
18226 +            vars=%STR(&prefix._SVD1 - &prefix._SVD&SVDKEEP),
18227 +            cov=, iter=5, secclus=,
18228 +            seciter=, min=, method=, eps=.1, init=, print=,
18229 +            p=, outliers=, decvar=0,
18230 +            initstd=, dist=, secstd=, nobs=);
18231 +        run;
18232 +
18233 +        %tmpred(&export, &export, &nclus, type=, ignore=0,
18234 +                  freqDS=, compress=1);
18235 +
18236 +        data &export;
18237 +           set &export;
18238 +           rename prob1-prob&nClus = &prefix._prob1-&prefix._prob&nclus;
18239 +           rename _cluster_=&prefix._cluster_;
18240 +        run;
18241 +
18242 +        %if &outclusters ne %then %do;
18243 +              %let memloc = _tmmem;
18244 +              proc tmutil data=&_scrout key=&filterterms ;
18245 +                 control init memloc="&memloc" release;
18246 +                 output keeponly out=_outtmutil;
18247 +              run;
18248 +
18249 +              data _docdata;
18250 +                 set &export (rename=(&prefix._cluster_=cluster));
18251 +              run;
18252 +
18253 +              /* Recalculate desc terms */
18254 +              data _terms_;
18255 +               set &filterterms;
18256 +               by key _ispar;
18257 +               if first.key then
18258 +                output;
18259 +               else;
18260 +              run;
18261 +
18262 +              data _terms_;
18263 +               set _terms_;
18264 +               if _ispar='+' then
18265 +                  Term=_ispar || ' ' || term;
18266 +              run;
18267 +
18268 +             %tmsort(data=_outtmutil,
18269 +               out=_tmout_,
18270 +               by=_termnum_,
18271 +                  options=,
18272 +               threads=threads);
18273 +
18274 +
18275 +             data _tmout_;
18276 +               merge _tmout_ (in=_A_)
18277 +                  _terms_ (rename=(key=_termnum_ term=_term_) keep=key term );
18278 +               by _termnum_;
18279 +               if _A_;
18280 +             run;
18281 +
18282 +             data _docs_;
18283 +               set _docdata (rename=(cluster=_cluster_) keep=_document_ cluster);
18284 +               _SEGMNT_=_cluster_;
18285 +             run;
18286 +
18287 +             %tmterm1(DSN_TPARS=_tmout_,
18288 +              DSN_CLUS=_docs_,
18289 +              DSN_DESC=_desc_,
18290 +              N_DESC_TERMS=&descterms,
18291 +              N_CLUS=&nclus,
18292 +              top_freq=%eval(&descterms*2),
18293 +              key=);
18294 +
18295 +             %tmsort(data=_desc_,
18296 +               out=_desc_,
18297 +               by=_cluster_,
18298 +                  options=,
18299 +               threads=threads);
18300 +
18301 +             proc sql noprint;
18302 +               create table &outclusters as
18303 +                 select a.clus_desc, b.* from &outclusters b left join _desc_ a
18304 +                 on a._cluster_=b._cluster_;
18305 +             quit;
18306 +
18307 +       %end;
18308 +
18309 +    %end;
18310 +    %else %do;
18311 +
18312 +        data _clustermean;
18313 +            set &clusters(keep=_cluster_ _mean1-_mean&svdkeep. freq);
18314 +        run;
18315 +
18316 +        proc sql;
18317 +        create table _meandocs as
18318 +            select a.*, b.*
18319 +            from &export(keep=&prefix._SVD1 - &prefix._SVD&SVDKEEP _document_) a , _clustermean b;
18320 +        quit;
18321 +
18322 +
18323 +        proc sort data=_meandocs;
18324 +        by _document_;
18325 +        run;
18326 +
18327 +        %if (&syscc>4) %then %do;
18328 +            %let emexceptionstring=EMTOOL.INSUFFICIENTMEM;
18329 +            %goto end_tmc;
18330 +        %end;
18331 +
18332 +        %tmsort(data=_meandocs,out=,by=_document_);
18333 +
18334 +          data _docdata(drop=_mean1-_mean&svdkeep. j _CLUSTER_ _freq_ rename=(_cluster_=&prefix._cluster_ distance=&prefix._distance));
18335 +            set _meandocs;
18336 +            drop _minDist_ _dist_ j freq;
18337 +            label CLUSTER = 'Cluster ID';
18338 +            array _means(&svdkeep) _mean1-_mean&svdkeep.;
18339 +            array _cols(&svdkeep) &prefix._SVD1-&prefix._SVD&svdkeep.;
18340 +            by _document_;
18341 +            retain CLUSTER _mindist_;
18342 +            _dist_ = 0;
18343 +            /* innner product*/
18344 +            do j = 1 to &svdkeep;
18345 +                _dist_ = _dist_ + (_cols(j)-_means(j))*(_cols(j)-_means(j));
18346 +            end;
18347 +
18348 +            /* initialization*/
18349 +            if first._document_ then do;
18350 +                _minDist_ = _dist_;
18351 +                CLUSTER = _cluster_;
18352 +            end;
18353 +            /*optimization*/
18354 +            if (_dist_ < _minDist_) then do;
18355 +                _minDist_ = _dist_;
18356 +                CLUSTER = _cluster_;
18357 +            end;
18358 +            if last._document_ then do;
18359 +               output;
18360 +            end;
18361 +        run;
18362 +        proc sort data=_docdata;
18363 +           by _document_;
18364 +        proc sort data=&export;
18365 +           by _document_;
18366 +        run;
18367 +
18368 +        data &export;
18369 +           merge &export _docdata;
18370 +           by _document_;
18371 +           rename cluster=&prefix._cluster_;
18372 +        run;
18373 +    %end;
18374 +
18375 +    /* Reorder variables in exported data set */
18376 +    proc sql noprint;
18377 +        create table &export as
18378 +        select &textvar, &prefix._cluster_, *
18379 +        from &export;
18380 +    quit;
18381 +
18382 +
18383 +    %if &outclusters ne %then %do;
18384 +
18385 +        /* update freqencies in cluster table */
18386 +         proc freq data =_docdata ;
18387 +            tables cluster/out=_tempfreqtable;
18388 +         run;
18389 +
18390 +        proc sql noprint;
18391 +            create table &outclusters as
18392 +            select  a.*, b.count as freq, b.percent/100 as percent
18393 +            from &clusters (drop= freq percent _rmsstd_) a, _tempfreqtable b
18394 +           where a._cluster_=b.cluster;
18395 +
18396 +        quit;
18397 +
18398 +        %if %left(&algorithm)=2.0 %then %do;
18399 +
18400 +          proc sql noprint;
18401 +
18402 +             create table &hierds as select a.freq, b.*
18403 +                from &outclusters a right join &hierds b on a._cluster_=b._cluster_;
18404 +          quit;
18405 +
18406 +          /* Find descriptive terms for clusters & parents */
18407 +          filename temp catalog 'sashelp.emtxtext.tmgethierterms.source';
18408 +          %include temp;
18409 +          filename temp;
18410 +
18411 +          %tm_getHierTerms(hierds=&hierds,
18412 +                         docs=_docdata,
18413 +                         tmout=&filtertmout,
18414 +                         terms= &filterterms,
18415 +                         ndescterms=&descterms);
18416 +
18417 +          proc sql noprint;
18418 +             create table &outclusters as
18419 +                select a.clus_desc, b.* from &hierds a, &outclusters b
18420 +                where a._cluster_=b._cluster_;
18421 +
18422 +             update &hierds set freq=0 where clus_desc="" and _cluster_ ne 1;
18423 +          quit;
18424 +
18425 +          /* Add frequencies to ancestors */
18426 +          data _hd;
18427 +             set &hierds;
18428 +             cluster=_cluster_;
18429 +             drop _cluster_ parent;
18430 +          run;
18431 +
18432 +          %let empty=1;
18433 +
18434 +          %do %while (&empty);
18435 +
18436 +            proc sql noprint;
18437 +                update _hd set freq=
18438 +                    (select sum(freq) from &HIERDS
18439 +                    where parent=cluster)
18440 +                    where freq=. and cluster not in
18441 +                    (select parent from &hierds where freq=.);
18442 +                select count(*) into :empty from _hd
18443 +                    where freq=.;
18444 +                update &hierds set freq=(select freq from _hd where _cluster_=cluster);
18445 +            quit;
18446 +
18447 +          %end;
18448 +
18449 +          /* Set graphdesc variable for graph display */
18450 +          data &hierds(drop=plus pos sub);
18451 +            set &hierds;
18452 +            plus='';
18453 +            if substr(CLUS_DESC, 1, 1) = "+" then plus="+ ";
18454 +            if ktrim(clus_desc) ne "" then do;
18455 +              if(substr(CLUS_DESC, 1, 1)) = "'" then do;
18456 +                 pos = findc(CLUS_DESC, "'",2);
18457 +                 sub = substr(CLUS_DESC,1,pos);
18458 +              end;
18459 +              else sub = scan(CLUS_DESC, 1);
18460 +              graphdesc=_CLUSTER_ || ': ' || plus || sub;
18461 +            end;
18462 +            else graphdesc=_CLUSTER_;
18463 +          run;
18464 +        %end;
18465 +
18466 +         /*calculate residual for each doc */
18467 +
18468 +         proc sort data=_docdata (rename=(cluster=_cluster_));
18469 +            by _cluster_;
18470 +         run;
18471 +
18472 +         data _rmscalc;
18473 +            merge _docdata(in=inhere) &outclusters;
18474 +            array _means(&svdkeep) _mean1-_mean&svdkeep.;
18475 +            array _svds(&svdkeep) &prefixstring._SVD1 - &prefixstring._SVD&svdkeep.;
18476 +            by _cluster_;
18477 +            error=0;
18478 +            do i = 1 to &svdkeep;
18479 +               error +( (_svds{i}-_means{i}) * (_svds{i}-_means{i}));
18480 +            end;
18481 +
18482 +            drop i ;
18483 +         run;
18484 +
18485 +          /*calc standardized residual for clusters*/
18486 +         proc summary data=_rmscalc nway;
18487 +            class _cluster_;
18488 +            var error;
18489 +            output out=_meanerr mean=meane sum=sume;
18490 +         run;
18491 +
18492 +         data _rmsse;
18493 +            set _meanerr;
18494 +            /* original code divides by number of svd dims*/
18495 +            if _freq_ gt 1 then do;
18496 +              _rmsstd_=sqrt(sume/((_freq_-1)*(&svdkeep.)));
18497 +            end;
18498 +            else do;
18499 +              _rmsstd_=0;
18500 +            end;
18501 +            keep _cluster_  _rmsstd_;
18502 +         run;
18503 +
18504 +
18505 +         proc sql noprint;
18506 +           create table _clusstat2 as
18507 +           select a.*,b.*
18508 +           from &outclusters a left join _rmsse b
18509 +           on a._cluster_=b._cluster_;
18510 +
18511 +           create table &outclusters as
18512 +           select * from _clusstat2;
18513 +         quit;
18514 +
18515 +
18516 +    %end;
18517 +
18518 +
18519 +%end_tmc:
18520 +    %if &tm_debug =0  %then %do;
18521 +    proc sql noprint;
18522 +        drop table _weights;
18523 +        drop table _colpro;
18524 +        drop table _scrout;
18525 +        drop table _svdm1;
18526 +        drop table _inweights;
18527 +        drop table _clustermean;
18528 +        drop table _clusstat2;
18529 +        drop table _outtmutil;
18530 +        drop table _rmscalc;
18531 +        drop table _rmsse;
18532 +        drop table _meanerr;
18533 +        drop table _meandocs;
18534 +        drop table _import_ds;
18535 +        drop table _hd;
18536 +        drop table _terms_;
18537 +        drop table _docs_;
18538 +        drop table _tmout_;
18539 +        drop table _desc_;
18540 +        drop table _docdata;
18541 +    quit;
18542 +    %end;
18543 +
18544 +%mend tmc_doc_score;
18545 +
18546 +
18547 +
18548 +
18549 +
18550 +
18551 +
18552 +
18553 +
18554 +
18555 +
18556 +
18557 +
18558 +
18559 +
18560 +
18561 +
18562 +
18563 +
18564 +
18565 +
NOTE: %INCLUDE (level 1) ending.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMTEXT.TMSVD.SOURCE.
18567 + /*
18569 +  Macro:     tmsvd.sas
18570 +  Purpose:  Call proc spsvd with given defaults and parameters.
18571 +  Syntax:   %tmsvd(in,k=,global=,local=,row=,col=,entry=,scaleOp=,normOp=,
18572 +            in_global=,in_u=,in_s=,in_v=,u=,s=,v=,wgt=,wordPro=,
18573 +           colPro=, p=, tol=, gwgt=, mink=, maxk=, res=, remote=, compact=,bigpro=0);
18575 +  Required Parameters:  in     The data= data set.
18576 +  Optional Parameters:  k= The number of dimensions to reduce to
18577 +                   global=  The global weight to use, defaults to IDF.
18578 +                   local=  The local weight to use, defaults to BINARY.
18579 +                   row=   Column in the input data set that represents
18580 +                          the matrix row,
18581 +                       defaults to _termnum_.
18582 +            col=   Column in the input data set that represents
18583 +                          the matrix column,
18584 +                         defaults to _document_.
18585 +            entry= Column in the input data set that represents the
18586 +                          value in the
18587 +                         given row,column cell.  Defaults to _count_.
18588 +             scaleOp= Scale options: scalerow scalecol scaleall
18589 +            normOp=  Normalization options: normrow normcol normall
18590 +            in_global= The gwgt= output data set from a prior spsvd run.
18591 +                   in_u=  The u= output from a prior spsvd run.
18592 +                   in_s=  The s= output from a prior spsvd run.
18593 +                   in_v=  The v= output from a prior spsvd run.
18594 +                   u=     matrix U data set
18595 +                   s=     matrix S data set
18596 +                   v=     matrix V data set
18597 +                  wgt=   weighted input matrix data set
18598 +                  wordPro= projections of rows of A onto columns of V
18599 +                  colPro=  projection of columns of A onto columns of U
18600 +                  p=   number of iterations
18601 +                  tol= convergence tolerance
18602 +                   gwgt= global weights data set
18603 +                  mink=
18604 +                  maxk=
18605 +                  res=
18606 +                  remote= name of file
18608 +  History:
18609 +  2001/01/16 - Kevin Daly - Initial coding.
18610 +  2001/01/19 - Kevin Daly - Fixed so that when global=NONE and local=NONE,
18611 +             no gwgt data set
18612 +               is requested.  This was causing an error and the proc
18613 +              would terminate.
18614 +  2001/02/21 - Bill Wheeler - Allowd all options to be specified
18615 +  2001/05/14 - Bill Wheeler - Added version 9 options min_k, max_k, resolution
18616 +  2001/08/14 - Bill Wheeler - Added remote option
18617 +  2001/11/29 - Bill Wheeler - Updated for version 8 or 9
18618 +*/
18620 +%macro tmsvd(in,k=,global=,local=,row=,col=,entry=,scaleOp=,normOp=,
18621 +             in_global=, in_u=, in_s=, in_v=, u=, s=, v=,
18622 +             wgt=, wordPro=, colPro=, p=, tol=, gwgt=, mink=, maxk=, res=,
18623 +             remote=, compact=,bigpro= );
18625 +  %put;
18626 +  /* Defaults */
18627 +  %if &k ^= %then %let k = k = &k;
18628 +  %if &global ^= %then %let global = global = &global;
18629 +  %if %lowcase(&local) = bin %then %let local=BINARY;
18630 +  %if &local ^= %then %let local=local=&local;
18631 +  %if &row= %then %let row=_termnum_;
18632 +  %if &col= %then %let col=_document_;
18633 +  %if &entry= %then %let entry=_count_;
18634 +  %if &scaleOp ^= %then %let scaleOp = scaledoc;
18635 +  %if &normOp ^= %then %let normOp = normdoc;
18636 +  %if &compact ^= %then %let compact = compact;
18637 +  %else %let compact = ;
18639 +  %if &in_global ^= %then %let in_global = in_global=&in_global;
18640 +  %if &in_u ^= %then %let in_u = in_u=&in_u;
18641 +  %if &in_s ^= %then %let in_s = in_s=&in_s;
18642 +  %if &in_v ^= %then %let in_v = in_v=&in_v;
18643 +  %if ((&p ^= ) and (&p ^= .)) %then %let p = p=&p;
18644 +  %else %let p = ;
18645 +  %if ((&tol ^= ) and (&tol ^= .)) %then %let tol = tol=&tol;
18646 +  %else %let tol = ;
18648 +  %IF &SYSVER < 9 %THEN %DO;
18649 +    %IF &k = %THEN %DO;
18650 +      %IF &maxk ^= %THEN %LET k = k = &maxk;
18651 +      %ELSE %LET k = k = 100;
18652 +    %END;
18653 +    %LET mink = ;
18654 +    %LET maxk = ;
18655 +    %LET res = ;
18656 +    %LET remote = ;
18657 +    %LET compact = ;
18658 +  %END;
18661 +  %if &colPro ^= %then %let colPro = COLPRO=&colPro;
18662 +  %if &gwgt ^= %then %let gwgt = GWGT=&gwgt;
18663 +  %if &s ^= %then %let s = S=&s;
18664 +  %if &u ^= %then %let u = U=&u;
18665 +  %if &v ^= %then %let v = V=&v;
18666 +  %if &wordPro ^= %then %let wordPro = WORDPRO=&wordPro;
18667 +  %if &wgt ^= %then %let wgt = WGT=&wgt;
18668 +  %if (&mink ^=  ) and (&mink ^= .) %then %let mink = min_k = &mink;
18669 +  %else %let mink = ;
18670 +  %if &maxk ^= %then %let maxk = max_k = &maxk;
18671 +  %if &res ^= %then %let res = res = &res;
18672 +  proc sort data=&in; by &col;
18673 +  /* Run the proc */
18674 +  proc spsvd data=&in
18675 +      &mink
18676 +      &maxk
18677 +      &res
18678 +      &k &compact
18679 +    &local &global &in_global
18680 +    &in_u &in_s &in_v &p &tol;
18681 +    row &row; col &col; entry &entry;
18682 +      output &colPro &gwgt &normOp &scaleOp &s &u &v
18683 +           &wordPro &wgt &bigpro;
18684 +    &remote;
18685 +  run;
18687 +%mend tmsvd;
NOTE: %INCLUDE (level 1) ending.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMTEXT.TMFAST.SOURCE.
18688 + /*
18689 +
18690 +  Macro:   tmfast.sas
18691 +  Purpose: Call proc fastclus with given defaults and parameters.
18692 +  Syntax:  %tmfast(data=, clusters=, outstat=, vars=);
18693 +
18694 +  Required Parameters:  data=      The input data set.
18695 +                        clusters=  The maximum number of clusters
18696 +
18697 +  Optional Parameters:  vars=      Variables to be used
18698 +                        outstat=   The name of the OUTSTAT data set
18699 +                        outseed=   The name of the OUTSEED data set
18700 +
18701 +  Either outstat or outseed mut be given, but not both.
18702 +  History:
18703 +  2001/01/16 - Bill Wheeler - Initial Coding.
18704 +
18705 +*/
18706 +%MACRO tmfast(data=, clusters=, outstat=, outseed=,
18707 +                 id=, out=, vars=);
18708 + /* defaults */
18709 + %if (&id ne ) %then %let id = id &id;
18710 + %if (&out ne ) %then %let out = out = &out;
18711 + %if (&vars ne ) %then %let var = var &vars;
18712 + %else %let var = ;
18713 +
18714 + %if &outseed= %then
18715 + %do;
18716 +   proc fastclus data = &data
18717 +   maxclusters = &clusters noprint
18718 +   outstat = &outstat &out;
18719 +   &var;
18720 +   &id;
18721 + %end;
18722 + %else
18723 + %do;
18724 +   proc fastclus data = &data
18725 +   maxclusters = &clusters noprint
18726 +   outseed = &outseed &out;
18727 +   &var;
18728 +   &id;
18729 + %end;
18730 +%MEND tmfast;
NOTE: %INCLUDE (level 1) ending.
NOTE: Table WORK._CLUSTERMS created, with 2110 rows and 9 columns.
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 11913 observations read from the data set EMWS5.TEXTFILTER_TMOUT.
NOTE: The data set WORK._FILTER_TMOUT has 11913 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 2694 observations read from the data set EMWS5.TEXTPARSING_TRAIN.
NOTE: There were 2694 observations read from the data set EMWS5.TEXTFILTER_DOC_IDS.
NOTE: There were 2694 observations read from the data set EMWS5.TEXTFILTER_TRAIN.
NOTE: The data set WORK._IMPORT_DS has 2694 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 2110 observations read from the data set WORK._CLUSTERMS.
      WHERE keep='Y';
NOTE: The data set WORK._TERMS has 2110 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 11913 observations read from the data set WORK._FILTER_TMOUT.
NOTE: The data set WORK._FILTER_TMOUT has 11913 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 1732 observations read from the data set WORK._TERMS.
      WHERE PARENT not = _termnum_;
NOTE: There were 11913 observations read from the data set WORK._FILTER_TMOUT.
NOTE: The data set WORK._SVDM1 has 11913 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
NOTE: Table WORK._SCROUT created, with 11893 rows and 3 columns.
 
NOTE: Table WORK._SVDM1 has been dropped.
NOTE: Table WORK._TERMS has been dropped.
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 1159 observations read from the data set WORK._CLUSTERMS.
      WHERE (KEEP='Y') and (PARENT=.);
NOTE: The data set WORK._WEIGHTS has 1159 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 11893 observations read from the data set WORK._SCROUT.
NOTE: The data set WORK._SCROUT has 11893 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1159 observations read from the data set EMWS5.TEXTCLUSTER_SVD_U.
NOTE: The data set EMWS5.TEXTCLUSTER_SVD_U has 1159 observations and 55 variables.
NOTE: DATA statement used (Total process time):
      real time           0.10 seconds
      cpu time            0.03 seconds
 
 
NOTE: Table WORK._INWEIGHTS created, with 1159 rows and 2 columns.
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 11893 observations read from the data set WORK._SCROUT.
NOTE: There were 1159 observations read from the data set EMWS5.TEXTCLUSTER_SVD_U.
NOTE: There were 1159 observations read from the data set WORK._INWEIGHTS.
NOTE: The data set WORK._COLPRO has 2565 observations and 55 variables.
NOTE: PROCEDURE SPSVD used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 2694 observations read from the data set WORK._IMPORT_DS.
NOTE: The data set WORK._IMPORT_DS has 2694 observations and 9 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 2565 observations read from the data set WORK._COLPRO.
NOTE: The data set WORK._COLPRO has 2565 observations and 55 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 2694 observations read from the data set WORK._IMPORT_DS.
NOTE: There were 2565 observations read from the data set WORK._COLPRO.
NOTE: The data set EMWS5.TEXTCLUSTER_TRAIN has 2694 observations and 63 variables.
NOTE: DATA statement used (Total process time):
      real time           0.07 seconds
      cpu time            0.04 seconds
 
 
 
NOTE: There were 2694 observations read from the data set EMWS5.TEXTCLUSTER_TRAIN.
NOTE: The data set EMWS5.TEXTCLUSTER_TRAIN has 2694 observations and 63 variables.
NOTE: DATA statement used (Total process time):
      real time           0.11 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 2694 observations read from the data set EMWS5.TEXTCLUSTER_TRAIN.
NOTE: The data set EMWS5.TEXTCLUSTER_TRAIN has 2694 observations and 63 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.12 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 2694 observations read from the data set EMWS5.TEXTCLUSTER_TRAIN.
NOTE: There were 25 observations read from the data set EMWS5.TEXTCLUSTER_EMOUTSTAT.
NOTE: The data set EMWS5.TEXTCLUSTER_TRAIN has 2694 observations and 76 variables.
NOTE: PROCEDURE EMCLUS used (Total process time):
      real time           0.49 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 2694 observations read from the data set EMWS5.TEXTCLUSTER_TRAIN.
NOTE: The data set EMWS5.TEXTCLUSTER_TRAIN has 2694 observations and 76 variables.
NOTE: Compressing data set EMWS5.TEXTCLUSTER_TRAIN decreased size by 24.32 percent.
      Compressed is 28 pages; un-compressed would require 37 pages.
NOTE: DATA statement used (Total process time):
      real time           0.11 seconds
      cpu time            0.07 seconds
 
 
 
NOTE: There were 2694 observations read from the data set EMWS5.TEXTCLUSTER_TRAIN.
NOTE: The data set EMWS5.TEXTCLUSTER_TRAIN has 2694 observations and 76 variables.
NOTE: DATA statement used (Total process time):
      real time           0.11 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 11913 observations read from the data set WORK._FILTER_TMOUT.
NOTE: There were 2110 observations read from the data set EMWS5.TEXTFILTER_TERMS_DATA.
      WHERE KEEP='Y';
NOTE: There were 8167 observations read from the data set EMWS5.TEXTFILTER_TERM_STRINGS.
NOTE: The data set WORK._OUTTMUTIL has 11893 observations and 3 variables.
NOTE: PROCEDURE TMUTIL used (Total process time):
      real time           0.09 seconds
      cpu time            0.07 seconds
 
 
 
NOTE: There were 2694 observations read from the data set EMWS5.TEXTCLUSTER_TRAIN.
NOTE: The data set WORK._DOCDATA has 2694 observations and 76 variables.
NOTE: DATA statement used (Total process time):
      real time           0.07 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 2110 observations read from the data set EMWS5.TEXTFILTER_TERMS_DATA.
      WHERE KEEP='Y';
NOTE: There were 8167 observations read from the data set EMWS5.TEXTFILTER_TERM_STRINGS.
NOTE: There were 2110 observations read from the data set EMWS5.TEXTFILTER_TERMS.
NOTE: The data set WORK._TERMS_ has 1732 observations and 13 variables.
NOTE: DATA statement used (Total process time):
      real time           0.05 seconds
      cpu time            0.04 seconds
 
 
 
NOTE: There were 1732 observations read from the data set WORK._TERMS_.
NOTE: The data set WORK._TERMS_ has 1732 observations and 13 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 11893 observations read from the data set WORK._OUTTMUTIL.
NOTE: The data set WORK._TMOUT_ has 11893 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 11893 observations read from the data set WORK._TMOUT_.
NOTE: There were 1732 observations read from the data set WORK._TERMS_.
NOTE: The data set WORK._TMOUT_ has 11893 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 2694 observations read from the data set WORK._DOCDATA.
NOTE: The data set WORK._DOCS_ has 2694 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
NOTE: SQL view WORK._CMB has been defined.
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 11893 observations read from the data set WORK._TMOUT_.
NOTE: There were 2694 observations read from the data set WORK._DOCS_.
NOTE: There were 11893 observations read from the data set WORK._CMB.
NOTE: The data set WORK._TFREQ has 4229 observations and 5 variables.
NOTE: PROCEDURE SUMMARY used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 11893 observations read from the data set WORK._TMOUT_.
NOTE: There were 2694 observations read from the data set WORK._DOCS_.
NOTE: There were 11893 observations read from the data set WORK._CMB.
NOTE: The data set WORK._SUM has 12 observations and 4 variables.
NOTE: PROCEDURE SUMMARY used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 12 observations read from the data set WORK._SUM.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: Table WORK._SUM has been dropped.
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 4229 observations read from the data set WORK._TFREQ.
NOTE: The data set WORK._TFREQ has 4229 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 4229 observations read from the data set WORK._TFREQ.
NOTE: The data set WORK._UNQT has 264 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 264 observations read from the data set WORK._UNQT.
NOTE: 81 observations with duplicate key values were deleted.
NOTE: The data set WORK._UNQT has 183 observations and 1 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
NOTE: Table WORK._CLCDF created, with 1018 rows and 3 columns.
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
NOTE: Table WORK._UNQT has been dropped.
NOTE: Table WORK._TFREQ has been dropped.
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1018 observations read from the data set WORK._CLCDF.
NOTE: The data set WORK._CLCDF has 183 observations and 13 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 183 observations read from the data set WORK._CLCDF.
NOTE: The data set WORK._CLCDF has 183 observations and 26 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 183 observations read from the data set WORK._CLCDF.
NOTE: The data set WORK._CLCDFTR has 1018 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
NOTE: Table WORK._CLCDF has been dropped.
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1018 observations read from the data set WORK._CLCDFTR.
NOTE: The data set WORK._CLCDFTR has 1018 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 1018 observations read from the data set WORK._CLCDFTR.
NOTE: The data set WORK._DESC_ has 11 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
NOTE: Table WORK._CLCDFTR has been dropped.
NOTE: View WORK._CMB has been dropped.
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 11 observations read from the data set WORK._DESC_.
NOTE: The data set WORK._DESC_ has 11 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
WARNING: This CREATE TABLE statement recursively references the target table. A consequence of this is a possible data integrity problem.
WARNING: Variable clus_desc already exists on file EMWS5.TEXTCLUSTER_CLUSTERS.
NOTE: Table EMWS5.TEXTCLUSTER_CLUSTERS created, with 12 rows and 59 columns.
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.06 seconds
      cpu time            0.03 seconds
 
 
WARNING: This CREATE TABLE statement recursively references the target table. A consequence of this is a possible data integrity problem.
WARNING: Variable Message already exists on file EMWS5.TEXTCLUSTER_TRAIN.
WARNING: Variable TextCluster_cluster_ already exists on file EMWS5.TEXTCLUSTER_TRAIN.
NOTE: Table EMWS5.TEXTCLUSTER_TRAIN created, with 2694 rows and 76 columns.
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.14 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 2694 observations read from the data set WORK._DOCDATA.
NOTE: The data set WORK._TEMPFREQTABLE has 12 observations and 3 variables.
NOTE: The PROCEDURE FREQ printed page 2.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.19 seconds
      cpu time            0.01 seconds
 
 
WARNING: This CREATE TABLE statement recursively references the target table. A consequence of this is a possible data integrity problem.
NOTE: Table EMWS5.TEXTCLUSTER_CLUSTERS created, with 12 rows and 58 columns.
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.08 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 2694 observations read from the data set WORK._DOCDATA.
NOTE: The data set WORK._DOCDATA has 2694 observations and 76 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 2694 observations read from the data set WORK._DOCDATA.
NOTE: There were 12 observations read from the data set EMWS5.TEXTCLUSTER_CLUSTERS.
NOTE: The data set WORK._RMSCALC has 2694 observations and 134 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 2694 observations read from the data set WORK._RMSCALC.
NOTE: The data set WORK._MEANERR has 12 observations and 5 variables.
NOTE: PROCEDURE SUMMARY used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 12 observations read from the data set WORK._MEANERR.
NOTE: The data set WORK._RMSSE has 12 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
WARNING: Variable _cluster_ already exists on file WORK._CLUSSTAT2.
NOTE: Table WORK._CLUSSTAT2 created, with 12 rows and 59 columns.
 
NOTE: Table EMWS5.TEXTCLUSTER_CLUSTERS created, with 12 rows and 59 columns.
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.07 seconds
      cpu time            0.01 seconds
 
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 770 observations read from the data set EMWS5.TEXTFILTER_VALIDATE.
NOTE: The data set WORK._IMPORT_DS has 770 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.15 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 2110 observations read from the data set WORK._CLUSTERMS.
      WHERE keep='Y';
NOTE: The data set WORK._TERMS has 2110 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 3071 observations read from the data set EMWS5.TEXTFILTER_VALIDOUT.
NOTE: The data set EMWS5.TEXTFILTER_VALIDOUT has 3071 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.09 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 1732 observations read from the data set WORK._TERMS.
      WHERE PARENT not = _termnum_;
NOTE: There were 3071 observations read from the data set EMWS5.TEXTFILTER_VALIDOUT.
NOTE: The data set WORK._SVDM1 has 3071 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
 
 
NOTE: Table WORK._SCROUT created, with 3071 rows and 3 columns.
 
NOTE: Table WORK._SVDM1 has been dropped.
NOTE: Table WORK._TERMS has been dropped.
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 1159 observations read from the data set WORK._CLUSTERMS.
      WHERE (KEEP='Y') and (PARENT=.);
NOTE: The data set WORK._WEIGHTS has 1159 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 3071 observations read from the data set WORK._SCROUT.
NOTE: The data set WORK._SCROUT has 3071 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1159 observations read from the data set EMWS5.TEXTCLUSTER_SVD_U.
NOTE: The data set EMWS5.TEXTCLUSTER_SVD_U has 1159 observations and 55 variables.
NOTE: DATA statement used (Total process time):
      real time           0.08 seconds
      cpu time            0.01 seconds
 
 
NOTE: Table WORK._INWEIGHTS created, with 1159 rows and 2 columns.
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 3071 observations read from the data set WORK._SCROUT.
NOTE: There were 1159 observations read from the data set EMWS5.TEXTCLUSTER_SVD_U.
NOTE: There were 1159 observations read from the data set WORK._INWEIGHTS.
NOTE: The data set WORK._COLPRO has 722 observations and 55 variables.
NOTE: PROCEDURE SPSVD used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 770 observations read from the data set WORK._IMPORT_DS.
NOTE: The data set WORK._IMPORT_DS has 770 observations and 9 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 722 observations read from the data set WORK._COLPRO.
NOTE: The data set WORK._COLPRO has 722 observations and 55 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 770 observations read from the data set WORK._IMPORT_DS.
NOTE: There were 722 observations read from the data set WORK._COLPRO.
NOTE: The data set EMWS5.TEXTCLUSTER_VALIDATE has 770 observations and 63 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 770 observations read from the data set EMWS5.TEXTCLUSTER_VALIDATE.
NOTE: The data set EMWS5.TEXTCLUSTER_VALIDATE has 770 observations and 63 variables.
NOTE: DATA statement used (Total process time):
      real time           0.11 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 770 observations read from the data set EMWS5.TEXTCLUSTER_VALIDATE.
NOTE: The data set EMWS5.TEXTCLUSTER_VALIDATE has 770 observations and 63 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.08 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 770 observations read from the data set EMWS5.TEXTCLUSTER_VALIDATE.
NOTE: There were 25 observations read from the data set EMWS5.TEXTCLUSTER_EMOUTSTAT.
NOTE: The data set EMWS5.TEXTCLUSTER_VALIDATE has 770 observations and 76 variables.
NOTE: PROCEDURE EMCLUS used (Total process time):
      real time           0.24 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 770 observations read from the data set EMWS5.TEXTCLUSTER_VALIDATE.
NOTE: The data set EMWS5.TEXTCLUSTER_VALIDATE has 770 observations and 76 variables.
NOTE: Compressing data set EMWS5.TEXTCLUSTER_VALIDATE decreased size by 18.18 percent.
      Compressed is 9 pages; un-compressed would require 11 pages.
NOTE: DATA statement used (Total process time):
      real time           0.07 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 770 observations read from the data set EMWS5.TEXTCLUSTER_VALIDATE.
NOTE: The data set EMWS5.TEXTCLUSTER_VALIDATE has 770 observations and 76 variables.
NOTE: DATA statement used (Total process time):
      real time           0.07 seconds
      cpu time            0.01 seconds
 
 
WARNING: This CREATE TABLE statement recursively references the target table. A consequence of this is a possible data integrity problem.
WARNING: Variable Message already exists on file EMWS5.TEXTCLUSTER_VALIDATE.
WARNING: Variable TextCluster_cluster_ already exists on file EMWS5.TEXTCLUSTER_VALIDATE.
NOTE: Table EMWS5.TEXTCLUSTER_VALIDATE created, with 770 rows and 76 columns.
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.12 seconds
      cpu time            0.03 seconds
 
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 385 observations read from the data set EMWS5.TEXTFILTER_TEST.
NOTE: The data set WORK._IMPORT_DS has 385 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 2110 observations read from the data set WORK._CLUSTERMS.
      WHERE keep='Y';
NOTE: The data set WORK._TERMS has 2110 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1578 observations read from the data set EMWS5.TEXTFILTER_TESTOUT.
NOTE: The data set EMWS5.TEXTFILTER_TESTOUT has 1578 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.16 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 1732 observations read from the data set WORK._TERMS.
      WHERE PARENT not = _termnum_;
NOTE: There were 1578 observations read from the data set EMWS5.TEXTFILTER_TESTOUT.
NOTE: The data set WORK._SVDM1 has 1578 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
 
 
NOTE: Table WORK._SCROUT created, with 1578 rows and 3 columns.
 
NOTE: Table WORK._SVDM1 has been dropped.
NOTE: Table WORK._TERMS has been dropped.
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 1159 observations read from the data set WORK._CLUSTERMS.
      WHERE (KEEP='Y') and (PARENT=.);
NOTE: The data set WORK._WEIGHTS has 1159 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1578 observations read from the data set WORK._SCROUT.
NOTE: The data set WORK._SCROUT has 1578 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 1159 observations read from the data set EMWS5.TEXTCLUSTER_SVD_U.
NOTE: The data set EMWS5.TEXTCLUSTER_SVD_U has 1159 observations and 55 variables.
NOTE: DATA statement used (Total process time):
      real time           0.07 seconds
      cpu time            0.04 seconds
 
 
NOTE: Table WORK._INWEIGHTS created, with 1159 rows and 2 columns.
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.27 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 1578 observations read from the data set WORK._SCROUT.
NOTE: There were 1159 observations read from the data set EMWS5.TEXTCLUSTER_SVD_U.
NOTE: There were 1159 observations read from the data set WORK._INWEIGHTS.
NOTE: The data set WORK._COLPRO has 368 observations and 55 variables.
NOTE: PROCEDURE SPSVD used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 385 observations read from the data set WORK._IMPORT_DS.
NOTE: The data set WORK._IMPORT_DS has 385 observations and 9 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 368 observations read from the data set WORK._COLPRO.
NOTE: The data set WORK._COLPRO has 368 observations and 55 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 385 observations read from the data set WORK._IMPORT_DS.
NOTE: There were 368 observations read from the data set WORK._COLPRO.
NOTE: The data set EMWS5.TEXTCLUSTER_TEST has 385 observations and 63 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 385 observations read from the data set EMWS5.TEXTCLUSTER_TEST.
NOTE: The data set EMWS5.TEXTCLUSTER_TEST has 385 observations and 63 variables.
NOTE: DATA statement used (Total process time):
      real time           0.08 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 385 observations read from the data set EMWS5.TEXTCLUSTER_TEST.
NOTE: The data set EMWS5.TEXTCLUSTER_TEST has 385 observations and 63 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.06 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 385 observations read from the data set EMWS5.TEXTCLUSTER_TEST.
NOTE: There were 25 observations read from the data set EMWS5.TEXTCLUSTER_EMOUTSTAT.
NOTE: The data set EMWS5.TEXTCLUSTER_TEST has 385 observations and 76 variables.
NOTE: PROCEDURE EMCLUS used (Total process time):
      real time           0.07 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 385 observations read from the data set EMWS5.TEXTCLUSTER_TEST.
NOTE: The data set EMWS5.TEXTCLUSTER_TEST has 385 observations and 76 variables.
NOTE: Compressing data set EMWS5.TEXTCLUSTER_TEST decreased size by 16.67 percent.
      Compressed is 5 pages; un-compressed would require 6 pages.
NOTE: DATA statement used (Total process time):
      real time           0.08 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 385 observations read from the data set EMWS5.TEXTCLUSTER_TEST.
NOTE: The data set EMWS5.TEXTCLUSTER_TEST has 385 observations and 76 variables.
NOTE: DATA statement used (Total process time):
      real time           0.08 seconds
      cpu time            0.03 seconds
 
 
WARNING: This CREATE TABLE statement recursively references the target table. A consequence of this is a possible data integrity problem.
WARNING: Variable Message already exists on file EMWS5.TEXTCLUSTER_TEST.
WARNING: Variable TextCluster_cluster_ already exists on file EMWS5.TEXTCLUSTER_TEST.
NOTE: Table EMWS5.TEXTCLUSTER_TEST created, with 385 rows and 76 columns.
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.08 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: The file PRE is:
      Filename=P:\DMBI_Project\Twitter_Insta_Content_Engineering\Workspaces\EMWS5\TextCluster\PRESCORECODE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=06May2020:18:32:58,
      Create Time=06May2020:18:32:58
 
NOTE: 13 records were written to the file PRE.
      The minimum record length was 14.
      The maximum record length was 62.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: The file PRE is:
      Filename=P:\DMBI_Project\Twitter_Insta_Content_Engineering\Workspaces\EMWS5\TextCluster\PRESCORECODE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=452,
      Last Modified=06May2020:18:32:58,
      Create Time=06May2020:18:32:58
 
NOTE: 23 records were written to the file PRE.
      The minimum record length was 1.
      The maximum record length was 85.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
NOTE: Fileref TMPRE has been deassigned.
 
NOTE: There were 12 observations read from the data set EMWS5.TEXTCLUSTER_CLUSTERS.
NOTE: The data set WORK._CODECLUSTERS has 12 observations and 58 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
NOTE: Libref TERMLOC refers to the same physical library as EMWS5.
NOTE: Libref TERMLOC was successfully assigned as follows:
      Engine:        V9
      Physical Name: P:\DMBI_Project\Twitter_Insta_Content_Engineering\Workspaces\EMWS5
 
NOTE: The file _TMSCORE is:
      Filename=P:\DMBI_Project\Twitter_Insta_Content_Engineering\Workspaces\EMWS5\TextCluster\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=06May2020:18:32:58,
      Create Time=06May2020:18:32:58
 
NOTE: 5 records were written to the file _TMSCORE.
      The minimum record length was 43.
      The maximum record length was 115.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
NOTE: Fileref _TMSCORE has been deassigned.
NOTE: Fileref TEMP has been deassigned.
18731  *------------------------------------------------------------*;
18732  * End SCORE: TextCluster;
18733  *------------------------------------------------------------*;
 
18735  *------------------------------------------------------------*;
18736  * TextCluster: Computing metadata for TRAIN data;
18737  *------------------------------------------------------------*;
 
19405  proc sort data = EMWS5.TextFilter_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
19406  by TARGET KEY;
19407  run;
 
NOTE: There were 5 observations read from the data set EMWS5.TEXTFILTER_EMINFO.
NOTE: The data set WORK.SORTEDEMINFO has 5 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.05 seconds
      cpu time            0.01 seconds
 
 
19408  proc sort data = EMWS5.TextCluster_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
19409  by TARGET KEY;
19410  run;
 
NOTE: There were 4 observations read from the data set EMWS5.TEXTCLUSTER_EMINFO.
NOTE: The data set WORK.TEMP_INFO has 4 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
 
 
19411  data EMWS5.TextCluster_EMINFO;
19412  merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
19413  by TARGET KEY;
19414  run;
 
NOTE: There were 5 observations read from the data set WORK.SORTEDEMINFO.
NOTE: There were 4 observations read from the data set WORK.TEMP_INFO.
NOTE: The data set EMWS5.TEXTCLUSTER_EMINFO has 6 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.05 seconds
      cpu time            0.01 seconds
 
 
19415  proc datasets lib=work nolist;
19416  delete TEMP_INFO SORTEDEMINFO;
19417  run;
 
NOTE: Deleting WORK.TEMP_INFO (memtype=DATA).
NOTE: Deleting WORK.SORTEDEMINFO (memtype=DATA).
19418  quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
*------------------------------------------------------------*
* Report Log
Date:                May 06, 2020
Time:                18:32:59
*------------------------------------------------------------*
19442  %let EMEXCEPTIONSTRING=;
19443  *------------------------------------------------------------*;
19444  * REPORT: TextCluster;
19445  *------------------------------------------------------------*;
19446  %let EM_ACTION = REPORT;
19447  %let syscc = 0;
19448  %macro main();
19449
19450     %if %upcase(&EM_ACTION) eq CREATE %then %do;
19451        filename temp catalog 'sashelp.emtxtext.cluster_create.source';
19452        %include temp;
19453        %create();
19454     %end;
19455     %if %upcase(&EM_ACTION) eq TRAIN %then %do;
19456        filename temp catalog 'sashelp.emtxtext.cluster_train.source';
19457        %include temp;
19458        %train();
19459     %end;
19460     %if %upcase(&EM_ACTION) eq REPORT %then %do;
19461        filename temp catalog 'sashelp.emtxtext.cluster_report.source';
19462        %include temp;
19463        %report();
19464     %end;
19465     %if %upcase(&EM_ACTION) eq SCORE %then %do;
19466        filename temp catalog 'sashelp.emtxtext.cluster_score.source';
19467        %include temp;
19468        %score();
19469     %end;
19470  %mend main;
19471
19472  %main();
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMTXTEXT.CLUSTER_REPORT.SOURCE.
19473 +%macro report();
19474 +
19475 +    %EM_GETNAME(KEY=GRAPH_TABLE, TYPE=DATA);
19476 +    %EM_GETNAME(KEY=clusters, TYPE=DATA);
19477 +    %EM_GETNAME(KEY=prescorecode, type=file, extension=sas);
19478 +    %em_getname(key=svd_s, type=data);
19479 +    %em_getname(key=hierds, type=data);
19480 +
19481 +    proc sql noprint;
19482 +        select count(*) into :svdkeep
19483 +            from &em_user_svd_s
19484 +            where keep=1;
19485 +        select count(*) into :nclus
19486 +            from &em_user_clusters;
19487 +    quit;
19488 +    %let svdkeep=%left(&svdkeep);
19489 +    %let nclus=%left(&nclus);
19490 +    %let clusterid=%sysfunc(sasmsg(sashelp.tmine, rpt_text_clusterid_vlabel, NOQUOTE));
19491 +    %let frequency=%sysfunc(sasmsg(sashelp.tmine, rpt_text_frequency_vlabel, NOQUOTE));
19492 +    %let percentage=%sysfunc(sasmsg(sashelp.tmine, rpt_text_percentage_vlabel, NOQUOTE));
19493 +    %let descterms=%sysfunc(sasmsg(sashelp.tmine, rpt_text_descterms_vlabel, NOQUOTE));
19494 +    %let rmsstd=%sysfunc(sasmsg(sashelp.tmine, rpt_text_rmsstd_vlabel, NOQUOTE));
19495 +    %let coordinate=%sysfunc(sasmsg(sashelp.tmine, rpt_text_coordinate_vlabel, NOQUOTE));
19496 +    %let parent=%sysfunc(sasmsg(sashelp.tmine, rpt_text_parent_vlabel, NOQUOTE));
19497 +    %let hierlevel=%sysfunc(sasmsg(sashelp.tmine, rpt_text_hierlevel_vlabel, NOQUOTE));
19498 +    %let graphdesc=%sysfunc(sasmsg(sashelp.tmine, rpt_text_graphdesc_vlabel, NOQUOTE));
19499 +    %let descshort=%sysfunc(sasmsg(sashelp.tmine, rpt_text_descshort_vlabel, NOQUOTE));
19500 +
19501 +    data &em_user_graph_table;
19502 +        set &em_user_clusters;
19503 +        label _cluster_="&clusterid"
19504 +              clus_desc="&DescTerms"
19505 +              freq="&Frequency"
19506 +              percent="&Percentage"
19507 +              _rmsstd_="&rmsstd"
19508 +              %do i=1 %to &svdkeep;
19509 +                _mean&i="&Coordinate &i"
19510 +              %end;
19511 +              ;
19512 +        format percent percent10.;
19513 +        desc_short = clus_desc;
19514 +        if COUNTW(clus_desc, ' ') > 5 then do;
19515 +            call scan(clus_desc, 6, position, len, ' ');
19516 +            desc_short=substr(clus_desc, 1, position-1) || '...';
19517 +            drop position len;
19518 +            label desc_short="&descshort";
19519 +        end;
19520 +    run;
19521 +
19522 +    proc sql noprint;
19523 +        create table &em_user_graph_table as
19524 +        select _cluster_, clus_desc, freq, percent, *
19525 +        from &em_user_graph_table;
19526 +    quit;
19527 +
19528 +    %let block = %sysfunc(sasmsg(sashelp.tmine, rpt_text_clusters_title, NOQUOTE));
19529 +
19530 +    %let desc = %sysfunc(sasmsg(sashelp.tmine, rpt_text_prescore_title, NOQUOTE));
19531 +    %EM_REPORT(KEY=PRESCORECODE, VIEWTYPE=SOURCE, DESCRIPTION=%nrbquote(&desc),
19532 +              BLOCK=Scoring, AUTODISPLAY=N);
19533 +
19534 +    %let desc = %sysfunc(sasmsg(sashelp.tmine, rpt_text_clusfreqbyrms_title, NOQUOTE));
19535 +    %EM_REPORT(KEY=GRAPH_TABLE, VIEWTYPE=SCATTER, X=FREQ, Y=_RMSSTD_, DESCRIPTION=%nrbquote(&desc),
19536 +            BLOCK=%nrbquote(&block), AUTODISPLAY=Y, TIP=%if &em_property_nDescTerms > 5 %then desc_short; %else clus_desc;);
19537 +
19538 +    %let desc = %sysfunc(sasmsg(sashelp.tmine, rpt_text_clusters_title, NOQUOTE));
19539 +    %EM_REPORT(KEY=GRAPH_TABLE, VIEWTYPE=DATA, DESCRIPTION=%nrbquote(&desc), BLOCK=%nrbquote(&block), AUTODISPLAY=Y);
19540 +
19541 +    %if &nclus > 2 %then %do;
19542 +        data work.graph_table(drop=_cluster_);
19543 +            set &em_user_graph_table;
19544 +            cluster=put(_cluster_,best12.);
19545 +        run;
19546 +        proc distance data=work.graph_table out=work.graph_table method=EUCLID nostd;
19547 +            var RATIO(_mean1-_mean&svdkeep);
19548 +            id cluster;
19549 +        run;
19550 +        proc mds data=work.graph_table out=work.graph_table
19551 +            level=ratio dimension=2 noprint;
19552 +        run;
19553 +        data work.graph_table;
19554 +            set work.graph_table;
19555 +            if _name_ ne '';
19556 +            Cluster=input(substr(_name_,2),8.);
19557 +            LABEL dim1='X' dim2='Y';
19558 +        run;
19559 +        proc sql noprint;
19560 +            create table &em_user_graph_table as
19561 +            select a.*, b.dim1, b.dim2
19562 +            from &em_user_graph_table a, work.graph_table b
19563 +            where a._cluster_=b.cluster;
19564 +        quit;
19565 +
19566 +        %let desc = %sysfunc(sasmsg(sashelp.tmine, rpt_text_clusterdist_title, NOQUOTE));
19567 +        %EM_REPORT(KEY=GRAPH_TABLE, VIEWTYPE=SCATTER, X=DIM1, Y=DIM2, BLOCK=%nrbquote(&BLOCK),
19568 +            DESCRIPTION=%nrbquote(&desc), AUTODISPLAY=Y, TIP=%if &em_property_nDescTerms > 5 %then desc_short; %else clus_desc;,
19569 +            GROUP=_CLUSTER_, LEGEND=N);
19570 +    %end;
19571 +    %else %do;
19572 +        %put &em_codebar;
19573 +        %let errormsg=%sysfunc(sasmsg(sashelp.tmine, EMTOOL.NODISTANCEREPORT_NOTE, NOQUOTE));
19574 +        %put &errormsg;
19575 +        %put &em_codebar;
19576 +    %end;
19577 +
19578 +    %let desc = %sysfunc(sasmsg(sashelp.tmine, rpt_text_clusterfreq_title, NOQUOTE));
19579 +    %EM_REPORT(KEY=GRAPH_TABLE, VIEWTYPE=PIE, X=_cluster_, Y=freq, DESCRIPTION=%nrbquote(&desc),
19580 +        TOOLTIP=clus_desc, BLOCK=%nrbquote(&block), AUTODISPLAY=Y);
19581 +
19582 +    %if &EM_PROPERTY_ALGORITHM=2.0 %then %do;
19583 +
19584 +        proc sql noprint;
19585 +            create table &em_user_hierds as
19586 +            select level, _cluster_, parent, clus_desc, *
19587 +            from &em_user_hierds;
19588 +        quit;
19589 +        filename temp catalog 'sashelp.emtext.tmsort.source';
19590 +        %include temp;
19591 +        %tmsort(data=&em_user_hierds, out=, by=level parent _cluster_);
19592 +
19593 +        data &em_user_hierds;
19594 +            set &em_user_hierds;
19595 +            label _cluster_="&clusterid"
19596 +                  clus_desc="&descterms"
19597 +                  freq="&frequency"
19598 +                  parent="&parent"
19599 +                  level="&hierlevel"
19600 +                  graphdesc="&graphdesc";
19601 +        run;
19602 +        %let desc = %sysfunc(sasmsg(sashelp.tmine, rpt_text_clusterhierarchy_title, NOQUOTE));
19603 +        %em_report(viewtype=constellation, linkkey=hierds, nodekey=hierds, method=HIERARCHY,
19604 +            linkfrom=_CLUSTER_,linkto=PARENT,linkid=_cluster_,nodeid=_CLUSTER_,nodesize=FREQ,nodelabel=graphdesc,
19605 +            nodetip=clus_desc, BLOCK=%nrbquote(&block), DESCRIPTION=%nrbquote(&desc), AUTODISPLAY=Y);
19606 +
19607 +        %let desc = %sysfunc(sasmsg(sashelp.tmine, rpt_text_hierarchydata_title, NOQUOTE));
19608 +        %em_report(KEY=hierds, VIEWTYPE=data, DESCRIPTION=%nrbquote(&DESC), AUTODISPLAY=Y, BLOCK=%nrbquote(&BLOCK));
19609 +    %end;
19610 +
19611 +    proc sql noprint;
19612 +        drop table work.graph_table;
19613 +    quit;
19614 +
19615 +%mend report;
19616 +
NOTE: %INCLUDE (level 1) ending.
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 12 observations read from the data set EMWS5.TEXTCLUSTER_CLUSTERS.
NOTE: The data set EMWS5.TEXTCLUSTER_GRAPH_TABLE has 12 observations and 60 variables.
NOTE: DATA statement used (Total process time):
      real time           0.05 seconds
      cpu time            0.01 seconds
 
 
WARNING: This CREATE TABLE statement recursively references the target table. A consequence of this is a possible data integrity problem.
WARNING: Variable clus_desc already exists on file EMWS5.TEXTCLUSTER_GRAPH_TABLE.
WARNING: Variable _CLUSTER_ already exists on file EMWS5.TEXTCLUSTER_GRAPH_TABLE.
WARNING: Variable freq already exists on file EMWS5.TEXTCLUSTER_GRAPH_TABLE.
WARNING: Variable percent already exists on file EMWS5.TEXTCLUSTER_GRAPH_TABLE.
NOTE: Table EMWS5.TEXTCLUSTER_GRAPH_TABLE created, with 12 rows and 60 columns.
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.06 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.04 seconds
 
 
 
NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 265 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 265 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 397 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
 
NOTE: There were 12 observations read from the data set EMWS5.TEXTCLUSTER_GRAPH_TABLE.
NOTE: The data set WORK.GRAPH_TABLE has 12 observations and 60 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
 
WARNING: Found negative value(s) in the ratio variable(s). The distance matrix may be meaningless.
NOTE: The data set WORK.GRAPH_TABLE has 12 observations and 13 variables.
NOTE: PROCEDURE DISTANCE used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Convergence reached in 13 iterations.
NOTE: The data set WORK.GRAPH_TABLE has 14 observations and 7 variables.
NOTE: PROCEDURE MDS used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 14 observations read from the data set WORK.GRAPH_TABLE.
NOTE: The data set WORK.GRAPH_TABLE has 12 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
WARNING: This CREATE TABLE statement recursively references the target table. A consequence of this is a possible data integrity problem.
NOTE: Table EMWS5.TEXTCLUSTER_GRAPH_TABLE created, with 12 rows and 62 columns.
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.04 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 397 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 530 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 530 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 663 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
 
 
NOTE: Table WORK.GRAPH_TABLE has been dropped.
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
19617  *------------------------------------------------------------*;
19618  * End REPORT: TextCluster;
19619  *------------------------------------------------------------*;
 
19620  /* Reset EM Options */
19621  options formchar="|----|+|---+=|-/\<>*";
19622  options nocenter ls=256 ps=10000;
19623  goptions reset=all device=GIF NODISPLAY;
 
19624  proc sort data=WORK.EM_USER_REPORT;
19625  by ID VIEW;
19626  run;
 
NOTE: There were 663 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 663 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
